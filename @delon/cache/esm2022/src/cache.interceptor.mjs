/* eslint-disable @typescript-eslint/no-explicit-any */
import { HttpResponseBase } from '@angular/common/http';
import { inject } from '@angular/core';
import { map, of } from 'rxjs';
import { AlainConfigService } from '@delon/util/config';
import { CacheService } from './cache.service';
import { CACHE } from './token';
/**
 * Cache interceptor
 *
 * ç¼“å­˜æ‹¦æˆªå™¨
 *
 * @example
 * provideHttpClient(withInterceptors([httpCacheInterceptor])),
 */
export const httpCacheInterceptor = (req, next) => {
    const cog = inject(AlainConfigService).merge('cache', {}).interceptor;
    const options = {
        enabled: true,
        emitNotify: true,
        saveType: 'm',
        ...cog,
        ...req.context.get(CACHE)
    };
    const srv = inject(CacheService);
    const mapPipe = map(ev => save(srv, ev, options));
    if (options.enabled === false) {
        return next(req).pipe(mapPipe);
    }
    if (options.key == null) {
        options.key = req.urlWithParams;
    }
    const cacheData = srv.getNone(options.key);
    if (cacheData != null) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
            console.log(`%cðŸ‘½${req.method}->${req.urlWithParams}->from cache(onle in development)`, 'background:#000;color:#1890ff', req, cacheData);
        }
        return of(cacheData);
    }
    return next(req).pipe(mapPipe);
};
function save(srv, ev, options) {
    if (!(ev instanceof HttpResponseBase) || !(ev.status >= 200 && ev.status < 300))
        return ev;
    let expire = options.expire;
    if (expire == null) {
        const ageMatch = /max-age=(\d+)/g.exec(ev.headers.get('cache-control')?.toLowerCase() ?? '');
        if (ageMatch == null)
            return ev;
        expire = +ageMatch[1];
    }
    if (expire > 0) {
        srv.set(options.key, ev, {
            type: options.saveType,
            expire: expire
        });
    }
    return ev;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jYWNoZS9zcmMvY2FjaGUuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELE9BQU8sRUFBZ0MsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFvQixNQUFNLE1BQU0sQ0FBQztBQUVqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFnQixLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFOUM7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFzQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUNuRSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBRSxDQUFDLFdBQVcsQ0FBQztJQUN2RSxNQUFNLE9BQU8sR0FBaUI7UUFDNUIsT0FBTyxFQUFFLElBQUk7UUFDYixVQUFVLEVBQUUsSUFBSTtRQUNoQixRQUFRLEVBQUUsR0FBRztRQUNiLEdBQUcsR0FBRztRQUNOLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0tBQzFCLENBQUM7SUFDRixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakMsTUFBTSxPQUFPLEdBQXFELEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDcEcsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQzlCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUNsQyxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBaUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNELElBQUksU0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQ1QsT0FBTyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxhQUFhLG1DQUFtQyxFQUMxRSwrQkFBK0IsRUFDL0IsR0FBRyxFQUNILFNBQVMsQ0FDVixDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDO0FBRUYsU0FBUyxJQUFJLENBQUMsR0FBaUIsRUFBRSxFQUFrQixFQUFFLE9BQXFCO0lBQ3hFLElBQUksQ0FBQyxDQUFDLEVBQUUsWUFBWSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzNGLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDNUIsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbkIsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzdGLElBQUksUUFBUSxJQUFJLElBQUk7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUNoQyxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBSyxFQUFFLEVBQUUsRUFBRTtZQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVU7WUFDeEIsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSW50ZXJjZXB0b3JGbiwgSHR0cFJlc3BvbnNlQmFzZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwLCBvZiwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBBbGFpbkNvbmZpZ1NlcnZpY2UgfSBmcm9tICdAZGVsb24vdXRpbC9jb25maWcnO1xuXG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2NhY2hlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FjaGVPcHRpb25zLCBDQUNIRSB9IGZyb20gJy4vdG9rZW4nO1xuXG4vKipcbiAqIENhY2hlIGludGVyY2VwdG9yXG4gKlxuICog57yT5a2Y5oum5oiq5ZmoXG4gKlxuICogQGV4YW1wbGVcbiAqIHByb3ZpZGVIdHRwQ2xpZW50KHdpdGhJbnRlcmNlcHRvcnMoW2h0dHBDYWNoZUludGVyY2VwdG9yXSkpLFxuICovXG5leHBvcnQgY29uc3QgaHR0cENhY2hlSW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvckZuID0gKHJlcSwgbmV4dCkgPT4ge1xuICBjb25zdCBjb2cgPSBpbmplY3QoQWxhaW5Db25maWdTZXJ2aWNlKS5tZXJnZSgnY2FjaGUnLCB7fSkhLmludGVyY2VwdG9yO1xuICBjb25zdCBvcHRpb25zOiBDYWNoZU9wdGlvbnMgPSB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBlbWl0Tm90aWZ5OiB0cnVlLFxuICAgIHNhdmVUeXBlOiAnbScsXG4gICAgLi4uY29nLFxuICAgIC4uLnJlcS5jb250ZXh0LmdldChDQUNIRSlcbiAgfTtcbiAgY29uc3Qgc3J2ID0gaW5qZWN0KENhY2hlU2VydmljZSk7XG4gIGNvbnN0IG1hcFBpcGU6IE9wZXJhdG9yRnVuY3Rpb248SHR0cEV2ZW50PGFueT4sIEh0dHBFdmVudDxhbnk+PiA9IG1hcChldiA9PiBzYXZlKHNydiwgZXYsIG9wdGlvbnMpKTtcbiAgaWYgKG9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gbmV4dChyZXEpLnBpcGUobWFwUGlwZSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5rZXkgPT0gbnVsbCkge1xuICAgIG9wdGlvbnMua2V5ID0gcmVxLnVybFdpdGhQYXJhbXM7XG4gIH1cblxuICBjb25zdCBjYWNoZURhdGEgPSBzcnYuZ2V0Tm9uZTxIdHRwRXZlbnQ8YW55Pj4ob3B0aW9ucy5rZXkpO1xuICBpZiAoY2FjaGVEYXRhICE9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYCVj8J+RvSR7cmVxLm1ldGhvZH0tPiR7cmVxLnVybFdpdGhQYXJhbXN9LT5mcm9tIGNhY2hlKG9ubGUgaW4gZGV2ZWxvcG1lbnQpYCxcbiAgICAgICAgJ2JhY2tncm91bmQ6IzAwMDtjb2xvcjojMTg5MGZmJyxcbiAgICAgICAgcmVxLFxuICAgICAgICBjYWNoZURhdGFcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBvZihjYWNoZURhdGEpO1xuICB9XG5cbiAgcmV0dXJuIG5leHQocmVxKS5waXBlKG1hcFBpcGUpO1xufTtcblxuZnVuY3Rpb24gc2F2ZShzcnY6IENhY2hlU2VydmljZSwgZXY6IEh0dHBFdmVudDxhbnk+LCBvcHRpb25zOiBDYWNoZU9wdGlvbnMpOiBIdHRwRXZlbnQ8YW55PiB7XG4gIGlmICghKGV2IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlQmFzZSkgfHwgIShldi5zdGF0dXMgPj0gMjAwICYmIGV2LnN0YXR1cyA8IDMwMCkpIHJldHVybiBldjtcbiAgbGV0IGV4cGlyZSA9IG9wdGlvbnMuZXhwaXJlO1xuICBpZiAoZXhwaXJlID09IG51bGwpIHtcbiAgICBjb25zdCBhZ2VNYXRjaCA9IC9tYXgtYWdlPShcXGQrKS9nLmV4ZWMoZXYuaGVhZGVycy5nZXQoJ2NhY2hlLWNvbnRyb2wnKT8udG9Mb3dlckNhc2UoKSA/PyAnJyk7XG4gICAgaWYgKGFnZU1hdGNoID09IG51bGwpIHJldHVybiBldjtcbiAgICBleHBpcmUgPSArYWdlTWF0Y2hbMV07XG4gIH1cbiAgaWYgKGV4cGlyZSA+IDApIHtcbiAgICBzcnYuc2V0KG9wdGlvbnMua2V5ISEsIGV2LCB7XG4gICAgICB0eXBlOiBvcHRpb25zLnNhdmVUeXBlISEsXG4gICAgICBleHBpcmU6IGV4cGlyZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBldjtcbn1cbiJdfQ==