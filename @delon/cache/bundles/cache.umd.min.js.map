{"version":3,"sources":["ng://@delon/cache/src/cache.config.ts","ng://@delon/cache/src/local-storage-cache.service.ts","ng://@delon/cache/src/cache.service.ts","ng://@delon/cache/src/cache.module.ts"],"names":["DelonCacheConfig","this","mode","reName","prefix","meta_key","Injectable","args","providedIn","DC_STORE_STORAGE_TOKEN","InjectionToken","factory","DC_STORE_STORAGE_TOKEN_FACTORY","LocalStorageCacheService","prototype","get","key","JSON","parse","localStorage","getItem","set","value","setItem","stringify","remove","removeItem","CacheService","options","store","http","memory","Map","notifyBuffer","meta","Set","freqTick","loadMeta","startExpireNotify","_deepGet","obj","path","defaultValue","length","checkObj","reduce","o","k","pushMeta","has","add","saveMeta","removeMeta","delete","_this","ret","v","forEach","metaData","push","e","getMeta","data","expire","addSeconds","Date","valueOf","Observable","pipe","tap","save","type","runNotify","isPromise","map","of","getNone","tryGet","_remove","needNotify","clear","Object","defineProperty","Math","max","abortExpireNotify","checkExpireNotify","runExpireNotify","freqTime","setTimeout","removed","clearTimeout","next","notify","change$","BehaviorSubject","asObservable","cancelNotify","unsubscribe","hasNotify","clearNotify","ngOnDestroy","Inject","HttpClient","DelonCacheModule","NgModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class DelonCacheConfig {\n  /**\n   * ç¼å­æ¨¡å¼ï¼é»è®¤ï¼`promise`\n   * - `promise` çº¦å®æ¨¡å¼ï¼åè®¸ `key` ä½ä¸º http è·åæ°æ®\n   * - `none` æ­£å¸¸æ¨¡å¼\n   */\n  mode?: 'promise' | 'none' = 'promise';\n  /**\n   * éå½åè¿ååæ°ï¼ä¾å¦ï¼\n   * - `null` è¿åä½ä¸ºåå®¹\n   * - `list` è¿åä½åº `{ list: [] }`\n   * - `result.list` è¿åä½åº `{ result: { list: [] } }`\n   */\n  reName?: string | string[] = '';\n  /**\n   * æä¹åæ°æ®é®å¼åç¼\n   */\n  prefix?: string = '';\n  /**\n   * æä¹åæ°æ®åæ°æ®å­å¨é®å\n   */\n  meta_key?: string = '__cache_meta';\n}\n","import { InjectionToken } from '@angular/core';\nimport { ICache, ICacheStore } from './interface';\n\nexport const DC_STORE_STORAGE_TOKEN = new InjectionToken<ICacheStore>(\n  'DC_STORE_STORAGE_TOKEN',\n  {\n    providedIn: 'root',\n    factory: DC_STORE_STORAGE_TOKEN_FACTORY,\n  },\n);\n\nexport function DC_STORE_STORAGE_TOKEN_FACTORY() {\n  return new LocalStorageCacheService();\n}\n\nexport class LocalStorageCacheService implements ICacheStore {\n  get(key: string): ICache {\n    return JSON.parse(localStorage.getItem(key) || 'null') || null;\n  }\n\n  set(key: string, value: ICache): boolean {\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  }\n\n  remove(key: string) {\n    localStorage.removeItem(key);\n  }\n}\n","// tslint:disable:no-any\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, OnDestroy } from '@angular/core';\nimport addSeconds from 'date-fns/add_seconds';\nimport { of, BehaviorSubject, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { DelonCacheConfig } from './cache.config';\nimport {\n  CacheNotifyResult,\n  CacheNotifyType,\n  ICache,\n  ICacheStore,\n} from './interface';\nimport { DC_STORE_STORAGE_TOKEN } from './local-storage-cache.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CacheService implements OnDestroy {\n  private readonly memory: Map<string, ICache> = new Map<string, ICache>();\n  private readonly notifyBuffer: Map<string, BehaviorSubject<CacheNotifyResult>> = new Map<string, BehaviorSubject<CacheNotifyResult>>();\n  private meta: Set<string> = new Set<string>();\n  private freqTick = 3000;\n  private freqTime;\n\n  constructor(\n    private options: DelonCacheConfig,\n    @Inject(DC_STORE_STORAGE_TOKEN) private store: ICacheStore,\n    private http: HttpClient,\n  ) {\n    this.loadMeta();\n    this.startExpireNotify();\n  }\n\n  _deepGet(obj: any, path: string[], defaultValue?: any) {\n    if (!obj) return defaultValue;\n    if (path.length <= 1) {\n      const checkObj = path.length ? obj[path[0]] : obj;\n      return typeof checkObj === 'undefined' ? defaultValue : checkObj;\n    }\n    return path.reduce((o, k) => o[k], obj) || defaultValue;\n  }\n\n  // #region meta\n\n  private pushMeta(key: string) {\n    if (this.meta.has(key)) return;\n    this.meta.add(key);\n    this.saveMeta();\n  }\n\n  private removeMeta(key: string) {\n    if (!this.meta.has(key)) return;\n    this.meta.delete(key);\n    this.saveMeta();\n  }\n\n  private loadMeta() {\n    const ret = this.store.get(this.options.meta_key);\n    if (ret && ret.v) {\n      (ret.v as string[]).forEach(key => this.meta.add(key));\n    }\n  }\n\n  private saveMeta() {\n    const metaData: string[] = [];\n    this.meta.forEach(key => metaData.push(key));\n    this.store.set(this.options.meta_key, { v: metaData, e: 0 });\n  }\n\n  getMeta() {\n    return this.meta;\n  }\n\n  // #endregion\n\n  // #region set\n\n  /**\n   * æä¹åç¼å­ `Observable` å¯¹è±¡ï¼ä¾å¦ï¼\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set<T>(\n    key: string,\n    data: Observable<T>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<T>;\n  /**\n   * æä¹åç¼å­ `Observable` å¯¹è±¡ï¼ä¾å¦ï¼\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set(\n    key: string,\n    data: Observable<any>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<any>;\n  /**\n   * æä¹åç¼å­åºç¡å¯¹è±¡ï¼ä¾å¦ï¼\n   * - `set('data/1', 1)`\n   * - `set('data/1', 1, { expire: 10 })`\n   */\n  set(\n    key: string,\n    data: {},\n    options?: { type?: 's'; expire?: number },\n  ): void;\n  /**\n   * æå®ç¼å­ç±»åè¿è¡ç¼å­å¯¹è±¡ï¼ä¾å¦åå­ç¼å­ï¼\n   * - `set('data/1', 1, { type: 'm' })`\n   * - `set('data/1', 1, { type: 'm', expire: 10 })`\n   */\n  set(\n    key: string,\n    data: {},\n    options: { type: 'm' | 's'; expire?: number },\n  ): void;\n  /**\n   * ç¼å­å¯¹è±¡\n   */\n  set(\n    key: string,\n    data: any | Observable<any>,\n    options: {\n      /** å­å¨ç±»åï¼'m' è¡¨ç¤ºåå­ï¼'s' è¡¨ç¤ºæä¹ */\n      type?: 'm' | 's';\n      /**\n       * è¿ææ¶é´ï¼åä½ `ç§`\n       */\n      expire?: number;\n    } = {},\n  ): any {\n    // expire\n    let e = 0;\n    if (options.expire) {\n      e = addSeconds(new Date(), options.expire).valueOf();\n    }\n    if (!(data instanceof Observable)) {\n      this.save(options.type, key, { v: data, e });\n      return;\n    }\n    return data.pipe(\n      tap((v: any) => {\n        this.save(options.type, key, { v, e });\n      }),\n    );\n  }\n\n  private save(type: 'm' | 's', key: string, value: ICache) {\n    if (type === 'm') {\n      this.memory.set(key, value);\n    } else {\n      this.store.set(this.options.prefix + key, value);\n      this.pushMeta(key);\n    }\n    this.runNotify(key, 'set');\n  }\n\n  // #endregion\n\n  // #region get\n\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨å `key` ä½ä¸ºHTTPè¯·æ±ç¼å­åè¿å */\n  get<T>(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<T>;\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨å `key` ä½ä¸ºHTTPè¯·æ±ç¼å­åè¿å */\n  get(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<any>;\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨æå·²è¿æåè¿å null */\n  get(\n    key: string,\n    options: {\n      mode: 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): any;\n  get(\n    key: string,\n    options: {\n      mode?: 'promise' | 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    } = {},\n  ): Observable<any> | any {\n    const isPromise =\n      options.mode !== 'none' && this.options.mode === 'promise';\n    const value: ICache = this.memory.has(key)\n      ? this.memory.get(key)\n      : this.store.get(this.options.prefix + key);\n    if (!value || (value.e && value.e > 0 && value.e < new Date().valueOf())) {\n      if (isPromise) {\n        return this.http\n          .get(key)\n          .pipe(\n            // tslint:disable-next-line:no-any\n            map((ret: any) => this._deepGet(ret, this.options.reName as string[], null)),\n            tap(v => this.set(key, v)),\n          );\n      }\n      return null;\n    }\n\n    return isPromise ? of(value.v) : value.v;\n  }\n\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨æå·²è¿æåè¿å null */\n  getNone<T>(key: string): T;\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨æå·²è¿æåè¿å null */\n  getNone(key: string): any {\n    return this.get(key, { mode: 'none' });\n  }\n\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æä¹åç¼å­ `Observable` å¯¹è±¡\n   */\n  tryGet<T>(\n    key: string,\n    data: Observable<T>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<T>;\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æä¹åç¼å­ `Observable` å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: Observable<any>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<any>;\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æä¹åç¼å­åºç¡å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: {},\n    options?: { type?: 's'; expire?: number },\n  ): any;\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æå®ç¼å­ç±»åè¿è¡ç¼å­å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: {},\n    options: { type: 'm' | 's'; expire?: number },\n  ): any;\n\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®ç¼å­å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: any | Observable<any>,\n    options: {\n      /** å­å¨ç±»åï¼'m' è¡¨ç¤ºåå­ï¼'s' è¡¨ç¤ºæä¹ */\n      type?: 'm' | 's';\n      /**\n       * è¿ææ¶é´ï¼åä½ `ç§`\n       */\n      expire?: number;\n    } = {},\n  ): any {\n    const ret = this.getNone(key);\n    if (ret === null) {\n      if (!(data instanceof Observable)) {\n        this.set(key, data, options as any);\n        return data;\n      }\n\n      return this.set(key, data as Observable<any>, options as any);\n    }\n    return of(ret);\n  }\n\n  // #endregion\n\n  // #region has\n\n  /** æ¯å¦ç¼å­ `key` */\n  has(key: string): boolean {\n    return this.memory.has(key) || this.meta.has(key);\n  }\n\n  // #endregion\n\n  // #region remove\n\n  private _remove(key: string, needNotify: boolean) {\n    if (needNotify) this.runNotify(key, 'remove');\n    if (this.memory.has(key)) {\n      this.memory.delete(key);\n      return;\n    }\n    this.store.remove(this.options.prefix + key);\n    this.removeMeta(key);\n  }\n\n  /** ç§»é¤ç¼å­ */\n  remove(key: string) {\n    this._remove(key, true);\n  }\n\n  /** æ¸ç©ºææç¼å­ */\n  clear() {\n    this.notifyBuffer.forEach((v, k) => this.runNotify(k, 'remove'));\n    this.memory.clear();\n    this.meta.forEach(key => this.store.remove(this.options.prefix + key));\n  }\n\n  // #endregion\n\n  // #region notify\n\n  /**\n   * è®¾ç½®çå¬é¢çï¼åä½ï¼æ¯«ç§ä¸æä½ `20ms`ï¼é»è®¤ï¼`3000ms`\n   */\n  set freq(value: number) {\n    this.freqTick = Math.max(20, value);\n    this.abortExpireNotify();\n    this.startExpireNotify();\n  }\n\n  private startExpireNotify() {\n    this.checkExpireNotify();\n    this.runExpireNotify();\n  }\n\n  private runExpireNotify() {\n    this.freqTime = setTimeout(() => {\n      this.checkExpireNotify();\n      this.runExpireNotify();\n    }, this.freqTick);\n  }\n\n  private checkExpireNotify() {\n    const removed: string[] = [];\n    this.notifyBuffer.forEach((v, key) => {\n      if (this.has(key) && this.getNone(key) === null) removed.push(key);\n    });\n    removed.forEach(key => {\n      this.runNotify(key, 'expire');\n      this._remove(key, false);\n    });\n  }\n\n  private abortExpireNotify() {\n    clearTimeout(this.freqTime);\n  }\n\n  private runNotify(key: string, type: CacheNotifyType) {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key).next({ type, value: this.getNone(key) });\n  }\n\n  /**\n   * `key` çå¬ï¼å½ `key` åæ´ãè¿æãç§»é¤æ¶éç¥ï¼æ³¨æä»¥ä¸è¥å¹²ç»èï¼\n   *\n   * - è°ç¨åé¤åæ¬¡è°ç¨ `cancelNotify` å¦åæ°¸è¿ä¸è¿æ\n   * - çå¬å¨æ¯ `freq` (é»è®¤ï¼3ç§) æ§è¡ä¸æ¬¡è¿ææ£æ¥\n   */\n  notify(key: string): Observable<CacheNotifyResult> {\n    if (!this.notifyBuffer.has(key)) {\n      const change$ = new BehaviorSubject<CacheNotifyResult>(this.getNone(key));\n      this.notifyBuffer.set(key, change$);\n    }\n    return this.notifyBuffer.get(key).asObservable();\n  }\n\n  /**\n   * åæ¶ `key` çå¬\n   */\n  cancelNotify(key: string): void {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key).unsubscribe();\n    this.notifyBuffer.delete(key);\n  }\n\n  /** `key` æ¯å¦å·²ç»çå¬ */\n  hasNotify(key: string): boolean {\n    return this.notifyBuffer.has(key);\n  }\n\n  /** æ¸ç©ºææ `key` ççå¬ */\n  clearNotify(): void {\n    this.notifyBuffer.forEach(v => v.unsubscribe());\n    this.notifyBuffer.clear();\n  }\n\n  // #endregion\n\n  ngOnDestroy(): void {\n    this.memory.clear();\n    this.abortExpireNotify();\n    this.clearNotify();\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({})\nexport class DelonCacheModule { }\n"]}