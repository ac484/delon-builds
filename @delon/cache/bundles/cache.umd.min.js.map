{"version":3,"sources":["ng://@delon/cache/src/interface.ts","ng://@delon/cache/src/cache.config.ts","ng://@delon/cache/src/cache.service.ts","ng://@delon/cache/src/local-storage-cache.service.ts","ng://@delon/cache/src/cache.module.ts"],"names":["DC_STORE_STORAGE_TOKEN","InjectionToken","DelonCacheConfig","this","mode","reName","prefix","meta_key","CacheService","options","store","http","memory","Map","notifyBuffer","meta","Set","freq_tick","loadMeta","startExpireNotify","prototype","_deepGet","obj","path","defaultValue","length","checkObj","reduce","o","k","pushMeta","key","has","add","saveMeta","removeMeta","delete","_this","ret","get","v","forEach","metaData","push","set","e","getMeta","data","expire","addSeconds","Date","valueOf","Observable","pipe","tap","save","type","value","runNotify","isPromise","map","of","getNone","tryGet","_remove","needNotify","remove","clear","Object","defineProperty","Math","max","abortExpireNotify","checkExpireNotify","runExpireNotify","freq_time","setTimeout","removed","clearTimeout","next","notify","change$","BehaviorSubject","asObservable","cancelNotify","unsubscribe","hasNotify","clearNotify","ngOnDestroy","Injectable","Inject","args","HttpClient","LocalStorageCacheService","JSON","parse","localStorage","getItem","setItem","stringify","removeItem","DelonCacheModule","forRoot","ngModule","providers","provide","useClass","NgModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface ICache {\n  v: any;\n  /** è¿ææ¶é´æ³ï¼`0` è¡¨ç¤ºä¸è¿æ */\n  e: number;\n}\n\nexport const DC_STORE_STORAGE_TOKEN = new InjectionToken<ICacheStore>(\n  'DC_STORE_STORAGE_TOKEN',\n);\n\nexport interface ICacheStore {\n  get(key: string): ICache;\n\n  set(key: string, value: ICache): boolean;\n\n  remove(key: string);\n}\n\nexport type CacheNotifyType = 'set' | 'remove' | 'expire';\n\nexport interface CacheNotifyResult {\n  type: CacheNotifyType;\n  value?: any;\n}\n","export class DelonCacheConfig {\n  /**\n   * ç¼å­æ¨¡å¼ï¼é»è®¤ï¼`promise`\n   * - `promise` çº¦å®æ¨¡å¼ï¼åè®¸ `key` ä½ä¸º http è·åæ°æ®\n   * - `none` æ­£å¸¸æ¨¡å¼\n   */\n  mode?: 'promise' | 'none' = 'promise';\n  /**\n   * éå½åè¿ååæ°ï¼ä¾å¦ï¼\n   * - `null` è¿åä½ä¸ºåå®¹\n   * - `list` è¿åä½åº `{ list: [] }`\n   * - `result.list` è¿åä½åº `{ result: { list: [] } }`\n   */\n  reName?: string | string[] = '';\n  /**\n   * æä¹åæ°æ®é®å¼åç¼\n   */\n  prefix?: string = '';\n  /**\n   * æä¹åæ°æ®åæ°æ®å­å¨é®å\n   */\n  meta_key?: string = '__cache_meta';\n}\n","import { Injectable, OnDestroy, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport addSeconds from 'date-fns/add_seconds';\nimport { Observable, of, BehaviorSubject } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport {\n  DC_STORE_STORAGE_TOKEN,\n  ICacheStore,\n  ICache,\n  CacheNotifyResult,\n  CacheNotifyType,\n} from './interface';\nimport { DelonCacheConfig } from './cache.config';\n\n@Injectable()\nexport class CacheService implements OnDestroy {\n  private readonly memory: Map<string, ICache> = new Map<string, ICache>();\n  private readonly notifyBuffer: Map<\n    string,\n    BehaviorSubject<CacheNotifyResult>\n  > = new Map<string, BehaviorSubject<CacheNotifyResult>>();\n  private meta: Set<string> = new Set<string>();\n  private freq_tick = 3000;\n  private freq_time: any;\n\n  constructor(\n    private options: DelonCacheConfig,\n    @Inject(DC_STORE_STORAGE_TOKEN) private store: ICacheStore,\n    private http: HttpClient,\n  ) {\n    this.loadMeta();\n    this.startExpireNotify();\n  }\n\n  _deepGet(obj: any, path: string[], defaultValue?: any) {\n    if (!obj) return defaultValue;\n    if (path.length <= 1) {\n      const checkObj = path.length ? obj[path[0]] : obj;\n      return typeof checkObj === 'undefined' ? defaultValue : checkObj;\n    }\n    return path.reduce((o, k) => o[k], obj) || defaultValue;\n  }\n\n  // #region meta\n\n  private pushMeta(key: string) {\n    if (this.meta.has(key)) return;\n    this.meta.add(key);\n    this.saveMeta();\n  }\n\n  private removeMeta(key: string) {\n    if (!this.meta.has(key)) return;\n    this.meta.delete(key);\n    this.saveMeta();\n  }\n\n  private loadMeta() {\n    const ret = this.store.get(this.options.meta_key);\n    if (ret && ret.v) {\n      (ret.v as string[]).forEach(key => this.meta.add(key));\n    }\n  }\n\n  private saveMeta() {\n    const metaData: string[] = [];\n    this.meta.forEach(key => metaData.push(key));\n    this.store.set(this.options.meta_key, { v: metaData, e: 0 });\n  }\n\n  getMeta() {\n    return this.meta;\n  }\n\n  // #endregion\n\n  // #region set\n\n  /**\n   * æä¹åç¼å­ `Observable` å¯¹è±¡ï¼ä¾å¦ï¼\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set<T>(\n    key: string,\n    data: Observable<T>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<T>;\n  /**\n   * æä¹åç¼å­ `Observable` å¯¹è±¡ï¼ä¾å¦ï¼\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set(\n    key: string,\n    data: Observable<any>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<any>;\n  /**\n   * æä¹åç¼å­åºç¡å¯¹è±¡ï¼ä¾å¦ï¼\n   * - `set('data/1', 1)`\n   * - `set('data/1', 1, { expire: 10 })`\n   */\n  set(\n    key: string,\n    data: Object,\n    options?: { type?: 's'; expire?: number },\n  ): void;\n  /**\n   * æå®ç¼å­ç±»åè¿è¡ç¼å­å¯¹è±¡ï¼ä¾å¦åå­ç¼å­ï¼\n   * - `set('data/1', 1, { type: 'm' })`\n   * - `set('data/1', 1, { type: 'm', expire: 10 })`\n   */\n  set(\n    key: string,\n    data: Object,\n    options: { type: 'm' | 's'; expire?: number },\n  ): void;\n  /**\n   * ç¼å­å¯¹è±¡\n   */\n  set(\n    key: string,\n    data: any | Observable<any>,\n    options: {\n      /** å­å¨ç±»åï¼'m' è¡¨ç¤ºåå­ï¼'s' è¡¨ç¤ºæä¹ */\n      type?: 'm' | 's';\n      /**\n       * è¿ææ¶é´ï¼åä½ `ç§`\n       */\n      expire?: number;\n    } = {},\n  ): any {\n    // expire\n    let e = 0;\n    if (options.expire) {\n      e = addSeconds(new Date(), options.expire).valueOf();\n    }\n    if (!(data instanceof Observable)) {\n      this.save(options.type, key, { v: data, e });\n      return;\n    }\n    return data.pipe(\n      tap((v: any) => {\n        this.save(options.type, key, { v, e });\n      }),\n    );\n  }\n\n  private save(type: 'm' | 's', key: string, value: ICache) {\n    if (type === 'm') {\n      this.memory.set(key, value);\n    } else {\n      this.store.set(this.options.prefix + key, value);\n      this.pushMeta(key);\n    }\n    this.runNotify(key, 'set');\n  }\n\n  // #endregion\n\n  // #region get\n\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨å `key` ä½ä¸ºHTTPè¯·æ±ç¼å­åè¿å */\n  get<T>(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<T>;\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨å `key` ä½ä¸ºHTTPè¯·æ±ç¼å­åè¿å */\n  get(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<any>;\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨æå·²è¿æåè¿å null */\n  get(\n    key: string,\n    options: {\n      mode: 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): any;\n  get(\n    key: string,\n    options: {\n      mode?: 'promise' | 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    } = {},\n  ): Observable<any> | any {\n    const isPromise =\n      options.mode !== 'none' && this.options.mode === 'promise';\n    const value: ICache = this.memory.has(key)\n      ? this.memory.get(key)\n      : this.store.get(this.options.prefix + key);\n    if (!value || (value.e && value.e > 0 && value.e < new Date().valueOf())) {\n      if (isPromise) {\n        return this.http\n          .get(key)\n          .pipe(\n            map((ret: any) =>\n              this._deepGet(ret, this.options.reName as string[], null),\n            ),\n            tap(v => this.set(key, v)),\n          );\n      }\n      return null;\n    }\n\n    return isPromise ? of(value.v) : value.v;\n  }\n\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨æå·²è¿æåè¿å null */\n  getNone<T>(key: string): T;\n  /** è·åç¼å­æ°æ®ï¼è¥ `key` ä¸å­å¨æå·²è¿æåè¿å null */\n  getNone(key: string): any {\n    return this.get(key, { mode: 'none' });\n  }\n\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æä¹åç¼å­ `Observable` å¯¹è±¡\n   */\n  tryGet<T>(\n    key: string,\n    data: Observable<T>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<T>;\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æä¹åç¼å­ `Observable` å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: Observable<any>,\n    options?: { type?: 's'; expire?: number },\n  ): Observable<any>;\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æä¹åç¼å­åºç¡å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: Object,\n    options?: { type?: 's'; expire?: number },\n  ): any;\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®æå®ç¼å­ç±»åè¿è¡ç¼å­å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: Object,\n    options: { type: 'm' | 's'; expire?: number },\n  ): any;\n\n  /**\n   * è·åç¼å­ï¼è¥ä¸å­å¨åè®¾ç½®ç¼å­å¯¹è±¡\n   */\n  tryGet(\n    key: string,\n    data: any | Observable<any>,\n    options: {\n      /** å­å¨ç±»åï¼'m' è¡¨ç¤ºåå­ï¼'s' è¡¨ç¤ºæä¹ */\n      type?: 'm' | 's';\n      /**\n       * è¿ææ¶é´ï¼åä½ `ç§`\n       */\n      expire?: number;\n    } = {},\n  ): any {\n    const ret = this.getNone(key);\n    if (ret === null) {\n      if (!(data instanceof Observable)) {\n        this.set(key, data, <any>options);\n        return data;\n      }\n\n      return this.set(key, data as Observable<any>, <any>options);\n    }\n    return of(ret);\n  }\n\n  // #endregion\n\n  // #region has\n\n  /** æ¯å¦ç¼å­ `key` */\n  has(key: string): boolean {\n    return this.memory.has(key) || this.meta.has(key);\n  }\n\n  // #endregion\n\n  // #region remove\n\n  private _remove(key: string, needNotify: boolean) {\n    if (needNotify) this.runNotify(key, 'remove');\n    if (this.memory.has(key)) {\n      this.memory.delete(key);\n      return;\n    }\n    this.store.remove(this.options.prefix + key);\n    this.removeMeta(key);\n  }\n\n  /** ç§»é¤ç¼å­ */\n  remove(key: string) {\n    this._remove(key, true);\n  }\n\n  /** æ¸ç©ºææç¼å­ */\n  clear() {\n    this.notifyBuffer.forEach((v, k) => this.runNotify(k, 'remove'));\n    this.memory.clear();\n    this.meta.forEach(key => this.store.remove(this.options.prefix + key));\n  }\n\n  // #endregion\n\n  // #region notify\n\n  /**\n   * è®¾ç½®çå¬é¢çï¼åä½ï¼æ¯«ç§ä¸æä½ `20ms`ï¼é»è®¤ï¼`3000ms`\n   */\n  set freq(value: number) {\n    this.freq_tick = Math.max(20, value);\n    this.abortExpireNotify();\n    this.startExpireNotify();\n  }\n\n  private startExpireNotify() {\n    this.checkExpireNotify();\n    this.runExpireNotify();\n  }\n\n  private runExpireNotify() {\n    this.freq_time = setTimeout(() => {\n      this.checkExpireNotify();\n      this.runExpireNotify();\n    }, this.freq_tick);\n  }\n\n  private checkExpireNotify() {\n    const removed: string[] = [];\n    this.notifyBuffer.forEach((v, key) => {\n      if (this.has(key) && this.getNone(key) === null) removed.push(key);\n    });\n    removed.forEach(key => {\n      this.runNotify(key, 'expire');\n      this._remove(key, false);\n    });\n  }\n\n  private abortExpireNotify() {\n    clearTimeout(this.freq_time);\n  }\n\n  private runNotify(key: string, type: CacheNotifyType) {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key).next({ type, value: this.getNone(key) });\n  }\n\n  /**\n   * `key` çå¬ï¼å½ `key` åæ´ãè¿æãç§»é¤æ¶éç¥ï¼æ³¨æä»¥ä¸è¥å¹²ç»èï¼\n   *\n   * - è°ç¨åé¤åæ¬¡è°ç¨ `cancelNotify` å¦åæ°¸è¿ä¸è¿æ\n   * - çå¬å¨æ¯ `freq` (é»è®¤ï¼3ç§) æ§è¡ä¸æ¬¡è¿ææ£æ¥\n   */\n  notify(key: string): Observable<CacheNotifyResult> {\n    if (!this.notifyBuffer.has(key)) {\n      const change$ = new BehaviorSubject<CacheNotifyResult>(this.getNone(key));\n      this.notifyBuffer.set(key, change$);\n    }\n    return this.notifyBuffer.get(key).asObservable();\n  }\n\n  /**\n   * åæ¶ `key` çå¬\n   */\n  cancelNotify(key: string): void {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key).unsubscribe();\n    this.notifyBuffer.delete(key);\n  }\n\n  /** `key` æ¯å¦å·²ç»çå¬ */\n  hasNotify(key: string): boolean {\n    return this.notifyBuffer.has(key);\n  }\n\n  /** æ¸ç©ºææ `key` ççå¬ */\n  clearNotify(): void {\n    this.notifyBuffer.forEach(v => v.unsubscribe());\n    this.notifyBuffer.clear();\n  }\n\n  // #endregion\n\n  ngOnDestroy(): void {\n    this.memory.clear();\n    this.abortExpireNotify();\n    this.clearNotify();\n  }\n}\n","import { ICacheStore, ICache } from './interface';\n\nexport class LocalStorageCacheService implements ICacheStore {\n  get(key: string): ICache {\n    return JSON.parse(localStorage.getItem(key) || 'null') || null;\n  }\n\n  set(key: string, value: ICache): boolean {\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  }\n\n  remove(key: string) {\n    localStorage.removeItem(key);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { DC_STORE_STORAGE_TOKEN } from './interface';\nimport { DelonCacheConfig } from './cache.config';\nimport { CacheService } from './cache.service';\nimport { LocalStorageCacheService } from './local-storage-cache.service';\n\n@NgModule({})\nexport class DelonCacheModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DelonCacheModule,\n      providers: [\n        DelonCacheConfig,\n        CacheService,\n        { provide: DC_STORE_STORAGE_TOKEN, useClass: LocalStorageCacheService },\n      ],\n    };\n  }\n}\n"]}