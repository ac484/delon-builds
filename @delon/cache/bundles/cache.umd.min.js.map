{"version":3,"sources":["../../../../packages/cache/src/local-storage-cache.service.ts","../../../../packages/cache/src/cache.service.ts","../../../../packages/cache/src/cache.module.ts"],"names":["DC_STORE_STORAGE_TOKEN","InjectionToken","providedIn","factory","LocalStorageCacheService","inject","Platform","platform","this","prototype","get","key","isBrowser","JSON","parse","localStorage","getItem","set","value","setItem","stringify","remove","removeItem","CacheService","cogSrv","store","http","memory","Map","notifyBuffer","meta","Set","freqTick","cog","merge","mode","reName","prefix","meta_key","loadMeta","startExpireNotify","deepGet","obj","path","defaultValue","length","checkObj","reduce","o","k","pushMeta","has","add","saveMeta","removeMeta","delete","_this","ret","v","forEach","metaData","push","e","getMeta","data","options","_a","type","expire","Object","assign","addSeconds","Date","valueOf","Observable","pipe","tap","save","runNotify","isPromise","map","of","getNone","tryGet","_remove","needNotify","clear","_v","defineProperty","Math","max","abortExpireNotify","checkExpireNotify","runExpireNotify","freqTime","setTimeout","removed","clearTimeout","next","notify","change$","BehaviorSubject","asObservable","cancelNotify","unsubscribe","hasNotify","clearNotify","ngOnDestroy","Injectable","args","AlainConfigService","Inject","HttpClient","NgModule"],"mappings":"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","sourcesContent":["import { Platform } from '@angular/cdk/platform';\nimport { inject, InjectionToken } from '@angular/core';\nimport { ICache, ICacheStore } from './interface';\n\nexport const DC_STORE_STORAGE_TOKEN = new InjectionToken<ICacheStore>('DC_STORE_STORAGE_TOKEN', {\n  providedIn: 'root',\n  factory: () => new LocalStorageCacheService(inject(Platform)),\n});\n\nexport class LocalStorageCacheService implements ICacheStore {\n  constructor(private platform: Platform) {}\n\n  get(key: string): ICache | null {\n    if (!this.platform.isBrowser) {\n      return null;\n    }\n    return JSON.parse(localStorage.getItem(key) || 'null') || null;\n  }\n\n  set(key: string, value: ICache): boolean {\n    if (!this.platform.isBrowser) {\n      return true;\n    }\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  }\n\n  remove(key: string): void {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n    localStorage.removeItem(key);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, OnDestroy } from '@angular/core';\nimport { AlainCacheConfig, AlainConfigService } from '@delon/util';\nimport addSeconds from 'date-fns/addSeconds';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { CacheNotifyResult, CacheNotifyType, ICache, ICacheStore } from './interface';\nimport { DC_STORE_STORAGE_TOKEN } from './local-storage-cache.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CacheService implements OnDestroy {\n  private readonly memory: Map<string, ICache> = new Map<string, ICache>();\n  private readonly notifyBuffer: Map<string, BehaviorSubject<CacheNotifyResult>> = new Map<string, BehaviorSubject<CacheNotifyResult>>();\n  private meta: Set<string> = new Set<string>();\n  private freqTick = 3000;\n  private freqTime: NzSafeAny;\n  private cog: AlainCacheConfig;\n\n  constructor(cogSrv: AlainConfigService, @Inject(DC_STORE_STORAGE_TOKEN) private store: ICacheStore, private http: HttpClient) {\n    this.cog = cogSrv.merge('cache', {\n      mode: 'promise',\n      reName: '',\n      prefix: '',\n      meta_key: '__cache_meta',\n    })!;\n    this.loadMeta();\n    this.startExpireNotify();\n  }\n\n  private deepGet(obj: NzSafeAny, path: string[], defaultValue?: NzSafeAny) {\n    if (!obj) return defaultValue;\n    if (path.length <= 1) {\n      const checkObj = path.length ? obj[path[0]] : obj;\n      return typeof checkObj === 'undefined' ? defaultValue : checkObj;\n    }\n    return path.reduce((o, k) => o[k], obj) || defaultValue;\n  }\n\n  // #region meta\n\n  private pushMeta(key: string) {\n    if (this.meta.has(key)) return;\n    this.meta.add(key);\n    this.saveMeta();\n  }\n\n  private removeMeta(key: string) {\n    if (!this.meta.has(key)) return;\n    this.meta.delete(key);\n    this.saveMeta();\n  }\n\n  private loadMeta() {\n    const ret = this.store.get(this.cog.meta_key!);\n    if (ret && ret.v) {\n      (ret.v as string[]).forEach(key => this.meta.add(key));\n    }\n  }\n\n  private saveMeta() {\n    const metaData: string[] = [];\n    this.meta.forEach(key => metaData.push(key));\n    this.store.set(this.cog.meta_key!, { v: metaData, e: 0 });\n  }\n\n  getMeta() {\n    return this.meta;\n  }\n\n  // #endregion\n\n  // #region set\n\n  /**\n   * Persistent cached `Observable` object, for example:\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set<T>(key: string, data: Observable<T>, options?: { type?: 's'; expire?: number }): Observable<T>;\n  /**\n   * Persistent cached `Observable` object, for example:\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set(key: string, data: Observable<NzSafeAny>, options?: { type?: 's'; expire?: number }): Observable<NzSafeAny>;\n  /**\n   * Persistent cached simple object, for example:\n   * - `set('data/1', 1)`\n   * - `set('data/1', 1, { expire: 10 })`\n   */\n  set(key: string, data: {}, options?: { type?: 's'; expire?: number }): void;\n  /**\n   * Persistent cached simple object and specify storage type, for example caching in memory:\n   * - `set('data/1', 1, { type: 'm' })`\n   * - `set('data/1', 1, { type: 'm', expire: 10 })`\n   */\n  set(key: string, data: {}, options: { type: 'm' | 's'; expire?: number }): void;\n  /**\n   * 缓存对象\n   */\n  set(\n    key: string,\n    data: NzSafeAny | Observable<NzSafeAny>,\n    options: {\n      /** 存储类型，'m' 表示内存，'s' 表示持久 */\n      type?: 'm' | 's';\n      /**\n       * 过期时间，单位 `秒`\n       */\n      expire?: number;\n    } = {},\n  ): NzSafeAny {\n    let e = 0;\n    const { type, expire } = this.cog;\n    options = {\n      type,\n      expire,\n      ...options,\n    };\n    if (options.expire) {\n      e = addSeconds(new Date(), options.expire).valueOf();\n    }\n    if (!(data instanceof Observable)) {\n      this.save(options.type!, key, { v: data, e });\n      return;\n    }\n    return data.pipe(\n      tap((v: NzSafeAny) => {\n        this.save(options.type!, key, { v, e });\n      }),\n    );\n  }\n\n  private save(type: 'm' | 's', key: string, value: ICache) {\n    if (type === 'm') {\n      this.memory.set(key, value);\n    } else {\n      this.store.set(this.cog.prefix + key, value);\n      this.pushMeta(key);\n    }\n    this.runNotify(key, 'set');\n  }\n\n  // #endregion\n\n  // #region get\n\n  /** 获取缓存数据，若 `key` 不存在则 `key` 作为HTTP请求缓存后返回 */\n  get<T>(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<T>;\n  /** 获取缓存数据，若 `key` 不存在则 `key` 作为HTTP请求缓存后返回 */\n  get(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<NzSafeAny>;\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n  get(\n    key: string,\n    options: {\n      mode: 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): NzSafeAny;\n  get(\n    key: string,\n    options: {\n      mode?: 'promise' | 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    } = {},\n  ): Observable<NzSafeAny> | NzSafeAny {\n    const isPromise = options.mode !== 'none' && this.cog.mode === 'promise';\n    const value = this.memory.has(key) ? (this.memory.get(key) as ICache) : this.store.get(this.cog.prefix + key);\n    if (!value || (value.e && value.e > 0 && value.e < new Date().valueOf())) {\n      if (isPromise) {\n        return this.http.get(key).pipe(\n          map((ret: NzSafeAny) => this.deepGet(ret, this.cog.reName as string[], null)),\n          tap(v => this.set(key, v, { type: options.type as NzSafeAny, expire: options.expire })),\n        );\n      }\n      return null;\n    }\n\n    return isPromise ? of(value.v) : value.v;\n  }\n\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n  getNone<T>(key: string): T;\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n  getNone(key: string): NzSafeAny {\n    return this.get(key, { mode: 'none' });\n  }\n\n  /**\n   * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象\n   */\n  tryGet<T>(key: string, data: Observable<T>, options?: { type?: 's'; expire?: number }): Observable<T>;\n  /**\n   * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象\n   */\n  tryGet(key: string, data: Observable<NzSafeAny>, options?: { type?: 's'; expire?: number }): Observable<NzSafeAny>;\n  /**\n   * 获取缓存，若不存在则设置持久化缓存基础对象\n   */\n  tryGet(key: string, data: {}, options?: { type?: 's'; expire?: number }): NzSafeAny;\n  /**\n   * 获取缓存，若不存在则设置指定缓存类型进行缓存对象\n   */\n  tryGet(key: string, data: {}, options: { type: 'm' | 's'; expire?: number }): NzSafeAny;\n\n  /**\n   * 获取缓存，若不存在则设置缓存对象\n   */\n  tryGet(\n    key: string,\n    data: NzSafeAny | Observable<NzSafeAny>,\n    options: {\n      /** 存储类型，'m' 表示内存，'s' 表示持久 */\n      type?: 'm' | 's';\n      /**\n       * 过期时间，单位 `秒`\n       */\n      expire?: number;\n    } = {},\n  ): NzSafeAny {\n    const ret = this.getNone(key);\n    if (ret === null) {\n      if (!(data instanceof Observable)) {\n        this.set(key, data, options as NzSafeAny);\n        return data;\n      }\n\n      return this.set(key, data as Observable<NzSafeAny>, options as NzSafeAny);\n    }\n    return of(ret);\n  }\n\n  // #endregion\n\n  // #region has\n\n  /** 是否缓存 `key` */\n  has(key: string): boolean {\n    return this.memory.has(key) || this.meta.has(key);\n  }\n\n  // #endregion\n\n  // #region remove\n\n  private _remove(key: string, needNotify: boolean) {\n    if (needNotify) this.runNotify(key, 'remove');\n    if (this.memory.has(key)) {\n      this.memory.delete(key);\n      return;\n    }\n    this.store.remove(this.cog.prefix + key);\n    this.removeMeta(key);\n  }\n\n  /** 移除缓存 */\n  remove(key: string) {\n    this._remove(key, true);\n  }\n\n  /** 清空所有缓存 */\n  clear() {\n    this.notifyBuffer.forEach((_v, k) => this.runNotify(k, 'remove'));\n    this.memory.clear();\n    this.meta.forEach(key => this.store.remove(this.cog.prefix + key));\n  }\n\n  // #endregion\n\n  // #region notify\n\n  /**\n   * 设置监听频率，单位：毫秒且最低 `20ms`，默认：`3000ms`\n   */\n  set freq(value: number) {\n    this.freqTick = Math.max(20, value);\n    this.abortExpireNotify();\n    this.startExpireNotify();\n  }\n\n  private startExpireNotify() {\n    this.checkExpireNotify();\n    this.runExpireNotify();\n  }\n\n  private runExpireNotify() {\n    this.freqTime = setTimeout(() => {\n      this.checkExpireNotify();\n      this.runExpireNotify();\n    }, this.freqTick);\n  }\n\n  private checkExpireNotify() {\n    const removed: string[] = [];\n    this.notifyBuffer.forEach((_v, key) => {\n      if (this.has(key) && this.getNone(key) === null) removed.push(key);\n    });\n    removed.forEach(key => {\n      this.runNotify(key, 'expire');\n      this._remove(key, false);\n    });\n  }\n\n  private abortExpireNotify() {\n    clearTimeout(this.freqTime);\n  }\n\n  private runNotify(key: string, type: CacheNotifyType) {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key)!.next({ type, value: this.getNone(key) });\n  }\n\n  /**\n   * `key` 监听，当 `key` 变更、过期、移除时通知，注意以下若干细节：\n   *\n   * - 调用后除再次调用 `cancelNotify` 否则永远不过期\n   * - 监听器每 `freq` (默认：3秒) 执行一次过期检查\n   */\n  notify(key: string): Observable<CacheNotifyResult> {\n    if (!this.notifyBuffer.has(key)) {\n      const change$ = new BehaviorSubject<CacheNotifyResult>(this.getNone(key));\n      this.notifyBuffer.set(key, change$);\n    }\n    return this.notifyBuffer.get(key)!.asObservable();\n  }\n\n  /**\n   * 取消 `key` 监听\n   */\n  cancelNotify(key: string): void {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key)!.unsubscribe();\n    this.notifyBuffer.delete(key);\n  }\n\n  /** `key` 是否已经监听 */\n  hasNotify(key: string): boolean {\n    return this.notifyBuffer.has(key);\n  }\n\n  /** 清空所有 `key` 的监听 */\n  clearNotify(): void {\n    this.notifyBuffer.forEach(v => v.unsubscribe());\n    this.notifyBuffer.clear();\n  }\n\n  // #endregion\n\n  ngOnDestroy(): void {\n    this.memory.clear();\n    this.abortExpireNotify();\n    this.clearNotify();\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({})\nexport class DelonCacheModule {}\n"]}