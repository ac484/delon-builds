{"version":3,"file":"cache.umd.js","sources":["../../../../packages/cache/src/local-storage-cache.service.ts","../../../../packages/cache/src/cache.service.ts","../../../../packages/cache/src/cache.module.ts"],"sourcesContent":["import { Platform } from '@angular/cdk/platform';\nimport { inject, InjectionToken } from '@angular/core';\nimport { ICache, ICacheStore } from './interface';\n\nexport const DC_STORE_STORAGE_TOKEN = new InjectionToken<ICacheStore>('DC_STORE_STORAGE_TOKEN', {\n  providedIn: 'root',\n  factory: () => new LocalStorageCacheService(inject(Platform)),\n});\n\nexport class LocalStorageCacheService implements ICacheStore {\n  constructor(private platform: Platform) {}\n\n  get(key: string): ICache | null {\n    if (!this.platform.isBrowser) {\n      return null;\n    }\n    return JSON.parse(localStorage.getItem(key) || 'null') || null;\n  }\n\n  set(key: string, value: ICache): boolean {\n    if (!this.platform.isBrowser) {\n      return true;\n    }\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  }\n\n  remove(key: string): void {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n    localStorage.removeItem(key);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, OnDestroy } from '@angular/core';\nimport { AlainCacheConfig, AlainConfigService } from '@delon/util';\nimport addSeconds from 'date-fns/addSeconds';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { CacheNotifyResult, CacheNotifyType, ICache, ICacheStore } from './interface';\nimport { DC_STORE_STORAGE_TOKEN } from './local-storage-cache.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CacheService implements OnDestroy {\n  private readonly memory: Map<string, ICache> = new Map<string, ICache>();\n  private readonly notifyBuffer: Map<string, BehaviorSubject<CacheNotifyResult>> = new Map<string, BehaviorSubject<CacheNotifyResult>>();\n  private meta: Set<string> = new Set<string>();\n  private freqTick = 3000;\n  private freqTime: NzSafeAny;\n  private cog: AlainCacheConfig;\n\n  constructor(cogSrv: AlainConfigService, @Inject(DC_STORE_STORAGE_TOKEN) private store: ICacheStore, private http: HttpClient) {\n    this.cog = cogSrv.merge('cache', {\n      mode: 'promise',\n      reName: '',\n      prefix: '',\n      meta_key: '__cache_meta',\n    })!;\n    this.loadMeta();\n    this.startExpireNotify();\n  }\n\n  private deepGet(obj: NzSafeAny, path: string[], defaultValue?: NzSafeAny): NzSafeAny {\n    if (!obj) return defaultValue;\n    if (path.length <= 1) {\n      const checkObj = path.length ? obj[path[0]] : obj;\n      return typeof checkObj === 'undefined' ? defaultValue : checkObj;\n    }\n    return path.reduce((o, k) => o[k], obj) || defaultValue;\n  }\n\n  // #region meta\n\n  private pushMeta(key: string): void {\n    if (this.meta.has(key)) return;\n    this.meta.add(key);\n    this.saveMeta();\n  }\n\n  private removeMeta(key: string): void {\n    if (!this.meta.has(key)) return;\n    this.meta.delete(key);\n    this.saveMeta();\n  }\n\n  private loadMeta(): void {\n    const ret = this.store.get(this.cog.meta_key!);\n    if (ret && ret.v) {\n      (ret.v as string[]).forEach(key => this.meta.add(key));\n    }\n  }\n\n  private saveMeta(): void {\n    const metaData: string[] = [];\n    this.meta.forEach(key => metaData.push(key));\n    this.store.set(this.cog.meta_key!, { v: metaData, e: 0 });\n  }\n\n  getMeta(): Set<string> {\n    return this.meta;\n  }\n\n  // #endregion\n\n  // #region set\n\n  /**\n   * Persistent cached `Observable` object, for example:\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set<T>(key: string, data: Observable<T>, options?: { type?: 's'; expire?: number }): Observable<T>;\n  /**\n   * Persistent cached `Observable` object, for example:\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\n   */\n  set(key: string, data: Observable<NzSafeAny>, options?: { type?: 's'; expire?: number }): Observable<NzSafeAny>;\n  /**\n   * Persistent cached simple object, for example:\n   * - `set('data/1', 1)`\n   * - `set('data/1', 1, { expire: 10 })`\n   */\n  set(key: string, data: {}, options?: { type?: 's'; expire?: number }): void;\n  /**\n   * Persistent cached simple object and specify storage type, for example caching in memory:\n   * - `set('data/1', 1, { type: 'm' })`\n   * - `set('data/1', 1, { type: 'm', expire: 10 })`\n   */\n  set(key: string, data: {}, options: { type: 'm' | 's'; expire?: number }): void;\n  /**\n   * 缓存对象\n   */\n  set(\n    key: string,\n    data: NzSafeAny | Observable<NzSafeAny>,\n    options: {\n      /** 存储类型，'m' 表示内存，'s' 表示持久 */\n      type?: 'm' | 's';\n      /**\n       * 过期时间，单位 `秒`\n       */\n      expire?: number;\n    } = {},\n  ): NzSafeAny {\n    let e = 0;\n    const { type, expire } = this.cog;\n    options = {\n      type,\n      expire,\n      ...options,\n    };\n    if (options.expire) {\n      e = addSeconds(new Date(), options.expire).valueOf();\n    }\n    if (!(data instanceof Observable)) {\n      this.save(options.type!, key, { v: data, e });\n      return;\n    }\n    return data.pipe(\n      tap((v: NzSafeAny) => {\n        this.save(options.type!, key, { v, e });\n      }),\n    );\n  }\n\n  private save(type: 'm' | 's', key: string, value: ICache): void {\n    if (type === 'm') {\n      this.memory.set(key, value);\n    } else {\n      this.store.set(this.cog.prefix + key, value);\n      this.pushMeta(key);\n    }\n    this.runNotify(key, 'set');\n  }\n\n  // #endregion\n\n  // #region get\n\n  /** 获取缓存数据，若 `key` 不存在则 `key` 作为HTTP请求缓存后返回 */\n  get<T>(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<T>;\n  /** 获取缓存数据，若 `key` 不存在则 `key` 作为HTTP请求缓存后返回 */\n  get(\n    key: string,\n    options?: {\n      mode: 'promise';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): Observable<NzSafeAny>;\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n  get(\n    key: string,\n    options: {\n      mode: 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    },\n  ): NzSafeAny;\n  get(\n    key: string,\n    options: {\n      mode?: 'promise' | 'none';\n      type?: 'm' | 's';\n      expire?: number;\n    } = {},\n  ): Observable<NzSafeAny> | NzSafeAny {\n    const isPromise = options.mode !== 'none' && this.cog.mode === 'promise';\n    const value = this.memory.has(key) ? (this.memory.get(key) as ICache) : this.store.get(this.cog.prefix + key);\n    if (!value || (value.e && value.e > 0 && value.e < new Date().valueOf())) {\n      if (isPromise) {\n        return this.http.get(key).pipe(\n          map((ret: NzSafeAny) => this.deepGet(ret, this.cog.reName as string[], null)),\n          tap(v => this.set(key, v, { type: options.type as NzSafeAny, expire: options.expire })),\n        );\n      }\n      return null;\n    }\n\n    return isPromise ? of(value.v) : value.v;\n  }\n\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n  getNone<T>(key: string): T;\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n  getNone(key: string): NzSafeAny {\n    return this.get(key, { mode: 'none' });\n  }\n\n  /**\n   * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象\n   */\n  tryGet<T>(key: string, data: Observable<T>, options?: { type?: 's'; expire?: number }): Observable<T>;\n  /**\n   * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象\n   */\n  tryGet(key: string, data: Observable<NzSafeAny>, options?: { type?: 's'; expire?: number }): Observable<NzSafeAny>;\n  /**\n   * 获取缓存，若不存在则设置持久化缓存基础对象\n   */\n  tryGet(key: string, data: {}, options?: { type?: 's'; expire?: number }): NzSafeAny;\n  /**\n   * 获取缓存，若不存在则设置指定缓存类型进行缓存对象\n   */\n  tryGet(key: string, data: {}, options: { type: 'm' | 's'; expire?: number }): NzSafeAny;\n\n  /**\n   * 获取缓存，若不存在则设置缓存对象\n   */\n  tryGet(\n    key: string,\n    data: NzSafeAny | Observable<NzSafeAny>,\n    options: {\n      /** 存储类型，'m' 表示内存，'s' 表示持久 */\n      type?: 'm' | 's';\n      /**\n       * 过期时间，单位 `秒`\n       */\n      expire?: number;\n    } = {},\n  ): NzSafeAny {\n    const ret = this.getNone(key);\n    if (ret === null) {\n      if (!(data instanceof Observable)) {\n        this.set(key, data, options as NzSafeAny);\n        return data;\n      }\n\n      return this.set(key, data as Observable<NzSafeAny>, options as NzSafeAny);\n    }\n    return of(ret);\n  }\n\n  // #endregion\n\n  // #region has\n\n  /** 是否缓存 `key` */\n  has(key: string): boolean {\n    return this.memory.has(key) || this.meta.has(key);\n  }\n\n  // #endregion\n\n  // #region remove\n\n  private _remove(key: string, needNotify: boolean): void {\n    if (needNotify) this.runNotify(key, 'remove');\n    if (this.memory.has(key)) {\n      this.memory.delete(key);\n      return;\n    }\n    this.store.remove(this.cog.prefix + key);\n    this.removeMeta(key);\n  }\n\n  /** 移除缓存 */\n  remove(key: string): void {\n    this._remove(key, true);\n  }\n\n  /** 清空所有缓存 */\n  clear(): void {\n    this.notifyBuffer.forEach((_v, k) => this.runNotify(k, 'remove'));\n    this.memory.clear();\n    this.meta.forEach(key => this.store.remove(this.cog.prefix + key));\n  }\n\n  // #endregion\n\n  // #region notify\n\n  /**\n   * 设置监听频率，单位：毫秒且最低 `20ms`，默认：`3000ms`\n   */\n  set freq(value: number) {\n    this.freqTick = Math.max(20, value);\n    this.abortExpireNotify();\n    this.startExpireNotify();\n  }\n\n  private startExpireNotify(): void {\n    this.checkExpireNotify();\n    this.runExpireNotify();\n  }\n\n  private runExpireNotify(): void {\n    this.freqTime = setTimeout(() => {\n      this.checkExpireNotify();\n      this.runExpireNotify();\n    }, this.freqTick);\n  }\n\n  private checkExpireNotify(): void {\n    const removed: string[] = [];\n    this.notifyBuffer.forEach((_v, key) => {\n      if (this.has(key) && this.getNone(key) === null) removed.push(key);\n    });\n    removed.forEach(key => {\n      this.runNotify(key, 'expire');\n      this._remove(key, false);\n    });\n  }\n\n  private abortExpireNotify(): void {\n    clearTimeout(this.freqTime);\n  }\n\n  private runNotify(key: string, type: CacheNotifyType): void {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key)!.next({ type, value: this.getNone(key) });\n  }\n\n  /**\n   * `key` 监听，当 `key` 变更、过期、移除时通知，注意以下若干细节：\n   *\n   * - 调用后除再次调用 `cancelNotify` 否则永远不过期\n   * - 监听器每 `freq` (默认：3秒) 执行一次过期检查\n   */\n  notify(key: string): Observable<CacheNotifyResult> {\n    if (!this.notifyBuffer.has(key)) {\n      const change$ = new BehaviorSubject<CacheNotifyResult>(this.getNone(key));\n      this.notifyBuffer.set(key, change$);\n    }\n    return this.notifyBuffer.get(key)!.asObservable();\n  }\n\n  /**\n   * 取消 `key` 监听\n   */\n  cancelNotify(key: string): void {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key)!.unsubscribe();\n    this.notifyBuffer.delete(key);\n  }\n\n  /** `key` 是否已经监听 */\n  hasNotify(key: string): boolean {\n    return this.notifyBuffer.has(key);\n  }\n\n  /** 清空所有 `key` 的监听 */\n  clearNotify(): void {\n    this.notifyBuffer.forEach(v => v.unsubscribe());\n    this.notifyBuffer.clear();\n  }\n\n  // #endregion\n\n  ngOnDestroy(): void {\n    this.memory.clear();\n    this.abortExpireNotify();\n    this.clearNotify();\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({})\nexport class DelonCacheModule {}\n"],"names":["InjectionToken","inject","Platform","addSeconds","Observable","tap","map","of","BehaviorSubject","Injectable","AlainConfigService","Inject","HttpClient","NgModule"],"mappings":";;;;;;;;;;;;;;;;QAIa,sBAAsB,GAAG,IAAIA,iBAAc,CAAc,wBAAwB,EAAE;QAC9F,UAAU,EAAE,MAAM;QAClB,OAAO;;WAAE,cAAM,OAAA,IAAI,wBAAwB,CAACC,SAAM,CAACC,iBAAQ,CAAC,CAAC,GAAA,CAAA;KAC9D;IAED;;;;QACE,kCAAoB,QAAkB;YAAlB,aAAQ,GAAR,QAAQ,CAAU;SAAI;;;;;QAE1C,sCAAG,GAAH,UAAI,GAAW;YACb,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC5B,OAAO,IAAI,CAAC;aACb;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC;SAChE;;;;;;QAED,sCAAG,GAAH,UAAI,GAAW,EAAE,KAAa;YAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC5B,OAAO,IAAI,CAAC;aACb;YACD,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACjD,OAAO,IAAI,CAAC;SACb;;;;;QAED,yCAAM,GAAN,UAAO,GAAW;YAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC5B,OAAO;aACR;YACD,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SAC9B;uCACF;KAAA,IAAA;;;;;;QAvBa,4CAA0B;;;;;;;;;;;;;;QCStC,sBAAY,MAA0B,EAA0C,KAAkB,EAAU,IAAgB;YAA5C,UAAK,GAAL,KAAK,CAAa;YAAU,SAAI,GAAJ,IAAI,CAAY;YAP3G,WAAM,GAAwB,IAAI,GAAG,EAAkB,CAAC;YACxD,iBAAY,GAAoD,IAAI,GAAG,EAA8C,CAAC;YAC/H,SAAI,GAAgB,IAAI,GAAG,EAAU,CAAC;YACtC,aAAQ,GAAG,IAAI,CAAC;YAKtB,IAAI,CAAC,GAAG,sBAAG,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;gBAC/B,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,EAAE;gBACV,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,cAAc;aACzB,CAAC,EAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;;;;;;;;QAEO,8BAAO,GAAP,UAAQ,GAAc,EAAE,IAAc,EAAE,YAAwB;YACtE,IAAI,CAAC,GAAG;gBAAE,OAAO,YAAY,CAAC;YAC9B,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;;oBACd,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;gBACjD,OAAO,OAAO,QAAQ,KAAK,WAAW,GAAG,YAAY,GAAG,QAAQ,CAAC;aAClE;YACD,OAAO,IAAI,CAAC,MAAM;;;;eAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,GAAA,GAAE,GAAG,CAAC,IAAI,YAAY,CAAC;SACzD;;;;;;;QAIO,+BAAQ,GAAR,UAAS,GAAW;YAC1B,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;gBAAE,OAAO;YAC/B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;;;;;;QAEO,iCAAU,GAAV,UAAW,GAAW;YAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;gBAAE,OAAO;YAChC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;;;;;QAEO,+BAAQ,GAAR;YAAA,iBAKP;;gBAJO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,oBAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAE;YAC9C,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,EAAE;gBAChB,oBAAC,GAAG,CAAC,CAAC,IAAc,OAAO;;;mBAAC;;;oBAAA,GAAG,IAAI,OAAA,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAA,EAAC,CAAC;aACxD;SACF;;;;;QAEO,+BAAQ,GAAR;;gBACA,QAAQ,GAAa,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,OAAO;;;eAAC;;;gBAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAA,EAAC,CAAC;YAC7C,IAAI,CAAC,KAAK,CAAC,GAAG,oBAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,IAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SAC3D;;;;QAED,8BAAO,GAAP;YACE,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;;;;;;;;QAiCD,0BAAG,GAAH,UACE,GAAW,EACX,IAAuC,EACvC,OAOM;YAVR,iBA+BC;YA5BC,wBAAA,EAAA,YAOM;;gBAEF,CAAC,GAAG,CAAC;YACH,IAAA,KAAmB,IAAI,CAAC,GAAG,EAAzB,IAAI,UAAA,EAAE,MAAM,YAAa;YACjC,OAAO,mBACL,IAAI,MAAA;gBACJ,MAAM,QAAA,IACH,OAAO,CACX,CAAC;YACF,IAAI,OAAO,CAAC,MAAM,EAAE;gBAClB,CAAC,GAAGC,8BAAU,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;aACtD;YACD,IAAI,EAAE,IAAI,YAAYC,eAAU,CAAC,EAAE;gBACjC,IAAI,CAAC,IAAI,oBAAC,OAAO,CAAC,IAAI,IAAG,GAAG,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,GAAA,EAAE,CAAC,CAAC;gBAC9C,OAAO;aACR;YACD,OAAO,IAAI,CAAC,IAAI,CACdC,aAAG;;;eAAC,UAAC,CAAY;gBACf,KAAI,CAAC,IAAI,oBAAC,OAAO,CAAC,IAAI,IAAG,GAAG,EAAE,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC,CAAC;aACzC,EAAC,CACH,CAAC;SACH;;;;;;;;QAEO,2BAAI,GAAJ,UAAK,IAAe,EAAE,GAAW,EAAE,KAAa;YACtD,IAAI,IAAI,KAAK,GAAG,EAAE;gBAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aAC7B;iBAAM;gBACL,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACpB;YACD,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC5B;;;;;;QAiCD,0BAAG,GAAH,UACE,GAAW,EACX,OAIM;YANR,iBAqBC;YAnBC,wBAAA,EAAA,YAIM;;gBAEA,SAAS,GAAG,OAAO,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,SAAS;;gBAClE,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,uBAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAc,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YAC7G,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,EAAE;gBACxE,IAAI,SAAS,EAAE;oBACb,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAC5BC,aAAG;;;uBAAC,UAAC,GAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,GAAG,qBAAE,KAAI,CAAC,GAAG,CAAC,MAAM,IAAc,IAAI,CAAC,GAAA,EAAC,EAC7ED,aAAG;;;uBAAC;;;wBAAA,CAAC,IAAI,OAAA,KAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,IAAI,qBAAE,OAAO,CAAC,IAAI,EAAa,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,GAAA,EAAC,CACxF,CAAC;iBACH;gBACD,OAAO,IAAI,CAAC;aACb;YAED,OAAO,SAAS,GAAGE,OAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;SAC1C;;;;;;QAKD,8BAAO,GAAP,UAAQ,GAAW;YACjB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;SACxC;;;;;;;;QAsBD,6BAAM,GAAN,UACE,GAAW,EACX,IAAuC,EACvC,OAOM;YAPN,wBAAA,EAAA,YAOM;;gBAEA,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;YAC7B,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,IAAI,EAAE,IAAI,YAAYH,eAAU,CAAC,EAAE;oBACjC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,qBAAE,OAAO,GAAc,CAAC;oBAC1C,OAAO,IAAI,CAAC;iBACb;gBAED,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,qBAAE,IAAI,uBAA2B,OAAO,GAAc,CAAC;aAC3E;YACD,OAAOG,OAAE,CAAC,GAAG,CAAC,CAAC;SAChB;;;;;;;;QAOD,0BAAG,GAAH,UAAI,GAAW;YACb,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACnD;;;;;;;;;QAMO,8BAAO,GAAP,UAAQ,GAAW,EAAE,UAAmB;YAC9C,IAAI,UAAU;gBAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC9C,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACxB,OAAO;aACR;YACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;YACzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACtB;;;;;;QAGD,6BAAM,GAAN,UAAO,GAAW;YAChB,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACzB;;;;;QAGD,4BAAK,GAAL;YAAA,iBAIC;YAHC,IAAI,CAAC,YAAY,CAAC,OAAO;;;;eAAC,UAAC,EAAE,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAA,EAAC,CAAC;YAClE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,OAAO;;;eAAC;;;gBAAA,GAAG,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,GAAA,EAAC,CAAC;SACpE;QASD,sBAAI,8BAAI;;;;;;;;iBAAR,UAAS,KAAa;gBACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC1B;;;WAAA;;;;;QAEO,wCAAiB,GAAjB;YACN,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;;;;;QAEO,sCAAe,GAAf;YAAA,iBAKP;YAJC,IAAI,CAAC,QAAQ,GAAG,UAAU;;eAAC;gBACzB,KAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,KAAI,CAAC,eAAe,EAAE,CAAC;aACxB,GAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnB;;;;;QAEO,wCAAiB,GAAjB;YAAA,iBASP;;gBARO,OAAO,GAAa,EAAE;YAC5B,IAAI,CAAC,YAAY,CAAC,OAAO;;;;eAAC,UAAC,EAAE,EAAE,GAAG;gBAChC,IAAI,KAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI;oBAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACpE,EAAC,CAAC;YACH,OAAO,CAAC,OAAO;;;eAAC;;;gBAAA,GAAG;gBACjB,KAAI,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBAC9B,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aAC1B,EAAC,CAAC;SACJ;;;;;QAEO,wCAAiB,GAAjB;YACN,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC7B;;;;;;;QAEO,gCAAS,GAAT,UAAU,GAAW,EAAE,IAAqB;YAClD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC;gBAAE,OAAO;YACxC,mBAAA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,GAAE,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACtE;;;;;;;;;QAQD,6BAAM,GAAN,UAAO,GAAW;YAChB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;;oBACzB,OAAO,GAAG,IAAIC,oBAAe,CAAoB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACzE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;aACrC;YACD,OAAO,mBAAA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,GAAE,YAAY,EAAE,CAAC;SACnD;;;;;;QAKD,mCAAY,GAAZ,UAAa,GAAW;YACtB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC;gBAAE,OAAO;YACxC,mBAAA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,GAAE,WAAW,EAAE,CAAC;YAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC/B;;;;;;QAGD,gCAAS,GAAT,UAAU,GAAW;YACnB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACnC;;;;;QAGD,kCAAW,GAAX;YACE,IAAI,CAAC,YAAY,CAAC,OAAO;;;eAAC;;;gBAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,EAAC,CAAC;YAChD,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;SAC3B;;;;;QAID,kCAAW,GAAX;YACE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;;;;gBAvWFC,aAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;gBARPC,qBAAkB;gDAiBFC,SAAM,SAAC,sBAAsB;gBAnB/DC,aAAU;;;;;;;;QAYjB,8BAAyE;;;;;QACzE,oCAAuI;;;;;QACvI,4BAA8C;;;;;QAC9C,gCAAwB;;;;;QACxB,gCAA4B;;;;;QAC5B,2BAA8B;;;;;QAEU,6BAA0D;;;;;QAAE,4BAAwB;;;;;;;;;QChB9H;;;;;gBADCC,WAAQ,SAAC,EAAE;;;;;;;;;;;;;;;;;;;"}