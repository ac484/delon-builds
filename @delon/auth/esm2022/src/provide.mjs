import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { makeEnvironmentProviders } from '@angular/core';
import { CookieService } from '@delon/util/browser';
import { CookieStorageStore, DA_STORE_TOKEN, LocalStorageStore, MemoryStore, SessionStorageStore } from './store';
import { JWTInterceptor, SimpleInterceptor } from './token/index';
export var AuthFeatureKind;
(function (AuthFeatureKind) {
    AuthFeatureKind[AuthFeatureKind["Token"] = 0] = "Token";
    AuthFeatureKind[AuthFeatureKind["Store"] = 1] = "Store";
})(AuthFeatureKind || (AuthFeatureKind = {}));
function makeAuthFeature(kind, providers) {
    return {
        ɵkind: kind,
        ɵproviders: providers
    };
}
/**
 * Configures authentication process service to be available for injection.
 *
 * @see {@link withSimple}
 * @see {@link withJWT}
 * @see {@link withCookie}
 * @see {@link withLocalStorage}
 * @see {@link withSessionStorage}
 */
export function provideAuth(type, store) {
    return makeEnvironmentProviders([type.ɵproviders, (store ?? withLocalStorage()).ɵproviders]);
}
/** Use simple auth type,  */
export function withSimple() {
    return makeAuthFeature(AuthFeatureKind.Token, [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: SimpleInterceptor,
            multi: true
        }
    ]);
}
export function withJWT() {
    return makeAuthFeature(AuthFeatureKind.Token, [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: JWTInterceptor,
            multi: true
        }
    ]);
}
/** `cookie` storage */
export function withCookie() {
    return makeAuthFeature(AuthFeatureKind.Store, [
        { provide: DA_STORE_TOKEN, useClass: CookieStorageStore, deps: [CookieService] }
    ]);
}
/** `localStorage` storage, **not lost after closing the browser**. */
export function withLocalStorage() {
    return makeAuthFeature(AuthFeatureKind.Store, [{ provide: DA_STORE_TOKEN, useClass: LocalStorageStore }]);
}
/** `sessionStorage` storage, **lost after closing the browser**. */
export function withSessionStorage() {
    return makeAuthFeature(AuthFeatureKind.Store, [{ provide: DA_STORE_TOKEN, useClass: SessionStorageStore }]);
}
/** Memory storage, **lost after closing the browser tab**. */
export function withMemoryStorage() {
    return makeAuthFeature(AuthFeatureKind.Store, [{ provide: DA_STORE_TOKEN, useClass: MemoryStore }]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2F1dGgvc3JjL3Byb3ZpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFrQyx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbEgsT0FBTyxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRSxNQUFNLENBQU4sSUFBWSxlQUdYO0FBSEQsV0FBWSxlQUFlO0lBQ3pCLHVEQUFLLENBQUE7SUFDTCx1REFBSyxDQUFBO0FBQ1AsQ0FBQyxFQUhXLGVBQWUsS0FBZixlQUFlLFFBRzFCO0FBT0QsU0FBUyxlQUFlLENBQWdDLElBQVcsRUFBRSxTQUFxQjtJQUN4RixPQUFPO1FBQ0wsS0FBSyxFQUFFLElBQUk7UUFDWCxVQUFVLEVBQUUsU0FBUztLQUN0QixDQUFDO0FBQ0osQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FDekIsSUFBd0MsRUFDeEMsS0FBMEM7SUFFMUMsT0FBTyx3QkFBd0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDL0YsQ0FBQztBQUVELDZCQUE2QjtBQUM3QixNQUFNLFVBQVUsVUFBVTtJQUN4QixPQUFPLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFO1FBQzVDO1lBQ0UsT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU87SUFDckIsT0FBTyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRTtRQUM1QztZQUNFLE9BQU8sRUFBRSxpQkFBaUI7WUFDMUIsUUFBUSxFQUFFLGNBQWM7WUFDeEIsS0FBSyxFQUFFLElBQUk7U0FDWjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCx1QkFBdUI7QUFDdkIsTUFBTSxVQUFVLFVBQVU7SUFDeEIsT0FBTyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRTtRQUM1QyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFO0tBQ2pGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxzRUFBc0U7QUFDdEUsTUFBTSxVQUFVLGdCQUFnQjtJQUM5QixPQUFPLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM1RyxDQUFDO0FBRUQsb0VBQW9FO0FBQ3BFLE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMsT0FBTyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUcsQ0FBQztBQUVELDhEQUE4RDtBQUM5RCxNQUFNLFVBQVUsaUJBQWlCO0lBQy9CLE9BQU8sZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudFByb3ZpZGVycywgUHJvdmlkZXIsIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb29raWVTZXJ2aWNlIH0gZnJvbSAnQGRlbG9uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB7IENvb2tpZVN0b3JhZ2VTdG9yZSwgREFfU1RPUkVfVE9LRU4sIExvY2FsU3RvcmFnZVN0b3JlLCBNZW1vcnlTdG9yZSwgU2Vzc2lvblN0b3JhZ2VTdG9yZSB9IGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IHsgSldUSW50ZXJjZXB0b3IsIFNpbXBsZUludGVyY2VwdG9yIH0gZnJvbSAnLi90b2tlbi9pbmRleCc7XG5cbmV4cG9ydCBlbnVtIEF1dGhGZWF0dXJlS2luZCB7XG4gIFRva2VuLFxuICBTdG9yZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhGZWF0dXJlPEtpbmRUIGV4dGVuZHMgQXV0aEZlYXR1cmVLaW5kPiB7XG4gIMm1a2luZDogS2luZFQ7XG4gIMm1cHJvdmlkZXJzOiBQcm92aWRlcltdO1xufVxuXG5mdW5jdGlvbiBtYWtlQXV0aEZlYXR1cmU8S2luZFQgZXh0ZW5kcyBBdXRoRmVhdHVyZUtpbmQ+KGtpbmQ6IEtpbmRULCBwcm92aWRlcnM6IFByb3ZpZGVyW10pOiBBdXRoRmVhdHVyZTxLaW5kVD4ge1xuICByZXR1cm4ge1xuICAgIMm1a2luZDoga2luZCxcbiAgICDJtXByb3ZpZGVyczogcHJvdmlkZXJzXG4gIH07XG59XG5cbi8qKlxuICogQ29uZmlndXJlcyBhdXRoZW50aWNhdGlvbiBwcm9jZXNzIHNlcnZpY2UgdG8gYmUgYXZhaWxhYmxlIGZvciBpbmplY3Rpb24uXG4gKlxuICogQHNlZSB7QGxpbmsgd2l0aFNpbXBsZX1cbiAqIEBzZWUge0BsaW5rIHdpdGhKV1R9XG4gKiBAc2VlIHtAbGluayB3aXRoQ29va2llfVxuICogQHNlZSB7QGxpbmsgd2l0aExvY2FsU3RvcmFnZX1cbiAqIEBzZWUge0BsaW5rIHdpdGhTZXNzaW9uU3RvcmFnZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVBdXRoKFxuICB0eXBlOiBBdXRoRmVhdHVyZTxBdXRoRmVhdHVyZUtpbmQuVG9rZW4+LFxuICBzdG9yZT86IEF1dGhGZWF0dXJlPEF1dGhGZWF0dXJlS2luZC5TdG9yZT5cbik6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbdHlwZS7JtXByb3ZpZGVycywgKHN0b3JlID8/IHdpdGhMb2NhbFN0b3JhZ2UoKSkuybVwcm92aWRlcnNdKTtcbn1cblxuLyoqIFVzZSBzaW1wbGUgYXV0aCB0eXBlLCAgKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2ltcGxlKCk6IEF1dGhGZWF0dXJlPEF1dGhGZWF0dXJlS2luZC5Ub2tlbj4ge1xuICByZXR1cm4gbWFrZUF1dGhGZWF0dXJlKEF1dGhGZWF0dXJlS2luZC5Ub2tlbiwgW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgdXNlQ2xhc3M6IFNpbXBsZUludGVyY2VwdG9yLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aEpXVCgpOiBBdXRoRmVhdHVyZTxBdXRoRmVhdHVyZUtpbmQuVG9rZW4+IHtcbiAgcmV0dXJuIG1ha2VBdXRoRmVhdHVyZShBdXRoRmVhdHVyZUtpbmQuVG9rZW4sIFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgIHVzZUNsYXNzOiBKV1RJbnRlcmNlcHRvcixcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdKTtcbn1cblxuLyoqIGBjb29raWVgIHN0b3JhZ2UgKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQ29va2llKCk6IEF1dGhGZWF0dXJlPEF1dGhGZWF0dXJlS2luZC5TdG9yZT4ge1xuICByZXR1cm4gbWFrZUF1dGhGZWF0dXJlKEF1dGhGZWF0dXJlS2luZC5TdG9yZSwgW1xuICAgIHsgcHJvdmlkZTogREFfU1RPUkVfVE9LRU4sIHVzZUNsYXNzOiBDb29raWVTdG9yYWdlU3RvcmUsIGRlcHM6IFtDb29raWVTZXJ2aWNlXSB9XG4gIF0pO1xufVxuXG4vKiogYGxvY2FsU3RvcmFnZWAgc3RvcmFnZSwgKipub3QgbG9zdCBhZnRlciBjbG9zaW5nIHRoZSBicm93c2VyKiouICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aExvY2FsU3RvcmFnZSgpOiBBdXRoRmVhdHVyZTxBdXRoRmVhdHVyZUtpbmQuU3RvcmU+IHtcbiAgcmV0dXJuIG1ha2VBdXRoRmVhdHVyZShBdXRoRmVhdHVyZUtpbmQuU3RvcmUsIFt7IHByb3ZpZGU6IERBX1NUT1JFX1RPS0VOLCB1c2VDbGFzczogTG9jYWxTdG9yYWdlU3RvcmUgfV0pO1xufVxuXG4vKiogYHNlc3Npb25TdG9yYWdlYCBzdG9yYWdlLCAqKmxvc3QgYWZ0ZXIgY2xvc2luZyB0aGUgYnJvd3NlcioqLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTZXNzaW9uU3RvcmFnZSgpOiBBdXRoRmVhdHVyZTxBdXRoRmVhdHVyZUtpbmQuU3RvcmU+IHtcbiAgcmV0dXJuIG1ha2VBdXRoRmVhdHVyZShBdXRoRmVhdHVyZUtpbmQuU3RvcmUsIFt7IHByb3ZpZGU6IERBX1NUT1JFX1RPS0VOLCB1c2VDbGFzczogU2Vzc2lvblN0b3JhZ2VTdG9yZSB9XSk7XG59XG5cbi8qKiBNZW1vcnkgc3RvcmFnZSwgKipsb3N0IGFmdGVyIGNsb3NpbmcgdGhlIGJyb3dzZXIgdGFiKiouICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aE1lbW9yeVN0b3JhZ2UoKTogQXV0aEZlYXR1cmU8QXV0aEZlYXR1cmVLaW5kLlN0b3JlPiB7XG4gIHJldHVybiBtYWtlQXV0aEZlYXR1cmUoQXV0aEZlYXR1cmVLaW5kLlN0b3JlLCBbeyBwcm92aWRlOiBEQV9TVE9SRV9UT0tFTiwgdXNlQ2xhc3M6IE1lbW9yeVN0b3JlIH1dKTtcbn1cbiJdfQ==