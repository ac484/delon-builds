import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { AlainConfigService } from '@delon/util/config';
import { of } from 'rxjs';
import { finalize, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@delon/util/config";
/**
 * 封装HttpClient，主要解决：
 * + 优化HttpClient在参数上便利性
 * + 统一实现 loading
 * + 统一处理时间格式问题
 */
// tslint:disable-next-line:class-name
export class _HttpClient {
    constructor(http, cogSrv) {
        this.http = http;
        this.lc = 0;
        this.cog = cogSrv.merge('themeHttp', {
            nullValueHandling: 'include',
            dateValueHandling: 'timestamp',
        });
    }
    /**
     * Get whether it's loading
     *
     * 获取是否正在加载中
     */
    get loading() {
        return this.lc > 0;
    }
    /**
     * Get the currently loading count
     *
     * 获取当前加载中的数量
     */
    get loadingCount() {
        return this.lc;
    }
    parseParams(params) {
        const newParams = {};
        if (params instanceof HttpParams) {
            return params;
        }
        Object.keys(params).forEach(key => {
            let _data = params[key];
            // 忽略空值
            if (this.cog.nullValueHandling === 'ignore' && _data == null)
                return;
            // 将时间转化为：时间戳 (秒)
            if (this.cog.dateValueHandling === 'timestamp' && _data instanceof Date) {
                _data = _data.valueOf();
            }
            newParams[key] = _data;
        });
        return new HttpParams({ fromObject: newParams });
    }
    appliedUrl(url, params) {
        if (!params)
            return url;
        url += ~url.indexOf('?') ? '' : '?';
        const arr = [];
        // tslint:disable-next-line: forin
        for (const key in params) {
            arr.push(`${key}=${params[key]}`);
        }
        return url + arr.join('&');
    }
    setCount(count) {
        Promise.resolve(null).then(() => (this.lc = count <= 0 ? 0 : count));
    }
    push() {
        this.setCount(++this.lc);
    }
    pop() {
        this.setCount(--this.lc);
    }
    /**
     * @deprecated Will be removed in 12.0.0, Pls used `cleanLoading` instead
     */
    end() {
        this.cleanLoading();
    }
    /**
     * Clean loading count
     *
     * 清空加载中
     */
    cleanLoading() {
        this.setCount(0);
    }
    get(url, params, options = {}) {
        return this.request('GET', url, Object.assign({ params }, options));
    }
    post(url, body, params, options = {}) {
        return this.request('POST', url, Object.assign({ body,
            params }, options));
    }
    delete(url, params, options = {}) {
        return this.request('DELETE', url, Object.assign({ params }, options));
    }
    // #endregion
    // #region jsonp
    /**
     * **JSONP Request**
     *
     * @param callbackParam CALLBACK值，默认：JSONP_CALLBACK
     */
    jsonp(url, params, callbackParam = 'JSONP_CALLBACK') {
        this.push();
        return this.http.jsonp(this.appliedUrl(url, params), callbackParam).pipe(finalize(() => this.pop()));
    }
    patch(url, body, params, options = {}) {
        return this.request('PATCH', url, Object.assign({ body,
            params }, options));
    }
    put(url, body, params, options = {}) {
        return this.request('PUT', url, Object.assign({ body,
            params }, options));
    }
    form(url, body, params, options = {}) {
        return this.request('POST', url, Object.assign(Object.assign({ body,
            params }, options), { headers: {
                'content-type': `application/x-www-form-urlencoded`,
            } }));
    }
    request(method, url, options = {}) {
        if (options.params)
            options.params = this.parseParams(options.params);
        return of(null).pipe(tap(() => this.push()), switchMap(() => this.http.request(method, url, options)), finalize(() => this.pop()));
    }
}
/** @nocollapse */ _HttpClient.ɵprov = i0.ɵɵdefineInjectable({ factory: function _HttpClient_Factory() { return new _HttpClient(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlainConfigService)); }, token: _HttpClient, providedIn: "root" });
_HttpClient.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
_HttpClient.ctorParameters = () => [
    { type: HttpClient },
    { type: AlainConfigService }
];
//# sourceMappingURL=data:application/json;base64,