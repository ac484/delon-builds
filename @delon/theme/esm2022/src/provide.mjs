import { registerLocaleData } from '@angular/common';
import { LOCALE_ID, importProvidersFrom, makeEnvironmentProviders } from '@angular/core';
import { ALAIN_CONFIG } from '@delon/util/config';
import { NzDrawerModule } from 'ng-zorro-antd/drawer';
import { NZ_DATE_LOCALE, provideNzI18n } from 'ng-zorro-antd/i18n';
import { NzModalModule } from 'ng-zorro-antd/modal';
import { DELON_LOCALE, DELON_LOCALE_SERVICE_PROVIDER } from './locale';
import zhCN from './locale/languages/zh-CN';
import { ALAIN_I18N_TOKEN } from './services';
import { ALAIN_SETTING_DEFAULT } from './services/settings/settings.service';
export function provideAlain(options) {
    const lang = options?.defaultLang;
    const provides = [
        { provide: ALAIN_CONFIG, useValue: options?.config },
        { provide: DELON_LOCALE, useValue: lang?.delon ?? zhCN },
        DELON_LOCALE_SERVICE_PROVIDER,
        importProvidersFrom([NzDrawerModule, NzModalModule]),
        ALAIN_SETTING_DEFAULT
    ];
    if (lang) {
        registerLocaleData(lang.ng, lang.abbr);
        provides.push({ provide: LOCALE_ID, useValue: lang.abbr }, provideNzI18n(lang.zorro), {
            provide: NZ_DATE_LOCALE,
            useValue: lang.date
        });
    }
    const i18nCls = options?.i18nClass;
    if (i18nCls) {
        provides.push({ provide: ALAIN_I18N_TOKEN, useClass: i18nCls, multi: false });
    }
    return makeEnvironmentProviders(provides);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lL3NyYy9wcm92aWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFFTCxTQUFTLEVBR1QsbUJBQW1CLEVBQ25CLHdCQUF3QixFQUN6QixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sb0JBQW9CLENBQUM7QUFFL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXBELE9BQU8sRUFBRSxZQUFZLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdkUsT0FBTyxJQUFJLE1BQU0sMEJBQTBCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBcUI3RSxNQUFNLFVBQVUsWUFBWSxDQUFDLE9BQTRCO0lBQ3ZELE1BQU0sSUFBSSxHQUFHLE9BQU8sRUFBRSxXQUFXLENBQUM7SUFDbEMsTUFBTSxRQUFRLEdBQTJDO1FBQ3ZELEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtRQUNwRCxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ3hELDZCQUE2QjtRQUM3QixtQkFBbUIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNwRCxxQkFBcUI7S0FDdEIsQ0FBQztJQUNGLElBQUksSUFBSSxFQUFFO1FBQ1Isa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BGLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNwQixDQUFDLENBQUM7S0FDSjtJQUVELE1BQU0sT0FBTyxHQUFHLE9BQU8sRUFBRSxTQUFTLENBQUM7SUFDbkMsSUFBSSxPQUFPLEVBQUU7UUFDWCxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDL0U7SUFDRCxPQUFPLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWdpc3RlckxvY2FsZURhdGEgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgRW52aXJvbm1lbnRQcm92aWRlcnMsXG4gIExPQ0FMRV9JRCxcbiAgUHJvdmlkZXIsXG4gIFR5cGUsXG4gIGltcG9ydFByb3ZpZGVyc0Zyb20sXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVyc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQUxBSU5fQ09ORklHLCBBbGFpbkNvbmZpZyB9IGZyb20gJ0BkZWxvbi91dGlsL2NvbmZpZyc7XG5pbXBvcnQgdHlwZSB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBOekRyYXdlck1vZHVsZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvZHJhd2VyJztcbmltcG9ydCB7IE5aX0RBVEVfTE9DQUxFLCBwcm92aWRlTnpJMThuIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcbmltcG9ydCB7IE56TW9kYWxNb2R1bGUgfSBmcm9tICduZy16b3Jyby1hbnRkL21vZGFsJztcblxuaW1wb3J0IHsgREVMT05fTE9DQUxFLCBERUxPTl9MT0NBTEVfU0VSVklDRV9QUk9WSURFUiB9IGZyb20gJy4vbG9jYWxlJztcbmltcG9ydCB6aENOIGZyb20gJy4vbG9jYWxlL2xhbmd1YWdlcy96aC1DTic7XG5pbXBvcnQgeyBBTEFJTl9JMThOX1RPS0VOIH0gZnJvbSAnLi9zZXJ2aWNlcyc7XG5pbXBvcnQgeyBBTEFJTl9TRVRUSU5HX0RFRkFVTFQgfSBmcm9tICcuL3NlcnZpY2VzL3NldHRpbmdzL3NldHRpbmdzLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFsYWluUHJvdmlkZU9wdGlvbnMge1xuICBjb25maWc/OiBBbGFpbkNvbmZpZztcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgZGVmYXVsdCBsYW5ndWFnZVxuICAgKlxuICAgKiDliJ3lp4vljJbpu5jorqTor63oqIBcbiAgICovXG4gIGRlZmF1bHRMYW5nPzogQWxhaW5Qcm92aWRlTGFuZztcbiAgaTE4bkNsYXNzPzogVHlwZTxOelNhZmVBbnk+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFsYWluUHJvdmlkZUxhbmcge1xuICBhYmJyOiBzdHJpbmc7XG4gIG5nOiBOelNhZmVBbnk7XG4gIHpvcnJvOiBOelNhZmVBbnk7XG4gIGRhdGU6IE56U2FmZUFueTtcbiAgZGVsb246IE56U2FmZUFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVBbGFpbihvcHRpb25zOiBBbGFpblByb3ZpZGVPcHRpb25zKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICBjb25zdCBsYW5nID0gb3B0aW9ucz8uZGVmYXVsdExhbmc7XG4gIGNvbnN0IHByb3ZpZGVzOiBBcnJheTxQcm92aWRlciB8IEVudmlyb25tZW50UHJvdmlkZXJzPiA9IFtcbiAgICB7IHByb3ZpZGU6IEFMQUlOX0NPTkZJRywgdXNlVmFsdWU6IG9wdGlvbnM/LmNvbmZpZyB9LFxuICAgIHsgcHJvdmlkZTogREVMT05fTE9DQUxFLCB1c2VWYWx1ZTogbGFuZz8uZGVsb24gPz8gemhDTiB9LFxuICAgIERFTE9OX0xPQ0FMRV9TRVJWSUNFX1BST1ZJREVSLFxuICAgIGltcG9ydFByb3ZpZGVyc0Zyb20oW056RHJhd2VyTW9kdWxlLCBOek1vZGFsTW9kdWxlXSksXG4gICAgQUxBSU5fU0VUVElOR19ERUZBVUxUXG4gIF07XG4gIGlmIChsYW5nKSB7XG4gICAgcmVnaXN0ZXJMb2NhbGVEYXRhKGxhbmcubmcsIGxhbmcuYWJicik7XG4gICAgcHJvdmlkZXMucHVzaCh7IHByb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6IGxhbmcuYWJiciB9LCBwcm92aWRlTnpJMThuKGxhbmcuem9ycm8pLCB7XG4gICAgICBwcm92aWRlOiBOWl9EQVRFX0xPQ0FMRSxcbiAgICAgIHVzZVZhbHVlOiBsYW5nLmRhdGVcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGkxOG5DbHMgPSBvcHRpb25zPy5pMThuQ2xhc3M7XG4gIGlmIChpMThuQ2xzKSB7XG4gICAgcHJvdmlkZXMucHVzaCh7IHByb3ZpZGU6IEFMQUlOX0kxOE5fVE9LRU4sIHVzZUNsYXNzOiBpMThuQ2xzLCBtdWx0aTogZmFsc2UgfSk7XG4gIH1cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhwcm92aWRlcyk7XG59XG4iXX0=