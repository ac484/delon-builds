import { registerLocaleData } from '@angular/common';
import { ENVIRONMENT_INITIALIZER, LOCALE_ID, importProvidersFrom, inject, makeEnvironmentProviders } from '@angular/core';
import { BellOutline, DeleteOutline, InboxOutline, PlusOutline } from '@ant-design/icons-angular/icons';
import { ALAIN_CONFIG } from '@delon/util/config';
import { NzDrawerModule } from 'ng-zorro-antd/drawer';
import { NZ_DATE_LOCALE, provideNzI18n } from 'ng-zorro-antd/i18n';
import { NzIconService } from 'ng-zorro-antd/icon';
import { NzModalModule } from 'ng-zorro-antd/modal';
import { DELON_LOCALE, DELON_LOCALE_SERVICE_PROVIDER } from './locale';
import zhCN from './locale/languages/zh-CN';
import { ALAIN_I18N_TOKEN } from './services';
import { ALAIN_SETTING_DEFAULT } from './services/settings/settings.service';
export function provideAlain(options) {
    const lang = options?.defaultLang;
    const provides = [
        { provide: ALAIN_CONFIG, useValue: options?.config },
        { provide: DELON_LOCALE, useValue: lang?.delon ?? zhCN },
        DELON_LOCALE_SERVICE_PROVIDER,
        importProvidersFrom([NzDrawerModule, NzModalModule]),
        ALAIN_SETTING_DEFAULT
    ];
    if (lang) {
        registerLocaleData(lang.ng, lang.abbr);
        provides.push({ provide: LOCALE_ID, useValue: lang.abbr }, provideNzI18n(lang.zorro), {
            provide: NZ_DATE_LOCALE,
            useValue: lang.date
        });
    }
    const i18nCls = options?.i18nClass;
    if (i18nCls) {
        provides.push({ provide: ALAIN_I18N_TOKEN, useClass: i18nCls, multi: false });
    }
    const icons = [BellOutline, DeleteOutline, PlusOutline, InboxOutline, ...(options.icons ?? [])];
    provides.push({
        provide: ENVIRONMENT_INITIALIZER,
        multi: true,
        useValue: () => {
            inject(NzIconService, { optional: true })?.addIcon(...icons);
        }
    });
    return makeEnvironmentProviders(provides);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lL3NyYy9wcm92aWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFDTCx1QkFBdUIsRUFFdkIsU0FBUyxFQUdULG1CQUFtQixFQUNuQixNQUFNLEVBQ04sd0JBQXdCLEVBQ3pCLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUV4RyxPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sb0JBQW9CLENBQUM7QUFFL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLDZCQUE2QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3ZFLE9BQU8sSUFBSSxNQUFNLDBCQUEwQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQXNCN0UsTUFBTSxVQUFVLFlBQVksQ0FBQyxPQUE0QjtJQUN2RCxNQUFNLElBQUksR0FBRyxPQUFPLEVBQUUsV0FBVyxDQUFDO0lBQ2xDLE1BQU0sUUFBUSxHQUEyQztRQUN2RCxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7UUFDcEQsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxJQUFJLElBQUksRUFBRTtRQUN4RCw2QkFBNkI7UUFDN0IsbUJBQW1CLENBQUMsQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDcEQscUJBQXFCO0tBQ3RCLENBQUM7SUFDRixJQUFJLElBQUksRUFBRTtRQUNSLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwRixPQUFPLEVBQUUsY0FBYztZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDcEIsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsU0FBUyxDQUFDO0lBQ25DLElBQUksT0FBTyxFQUFFO1FBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQy9FO0lBRUQsTUFBTSxLQUFLLEdBQXFCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEgsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNaLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsS0FBSyxFQUFFLElBQUk7UUFDWCxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ2IsTUFBTSxDQUFDLGFBQWEsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQy9ELENBQUM7S0FDRixDQUFDLENBQUM7SUFDSCxPQUFPLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWdpc3RlckxvY2FsZURhdGEgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICBMT0NBTEVfSUQsXG4gIFByb3ZpZGVyLFxuICBUeXBlLFxuICBpbXBvcnRQcm92aWRlcnNGcm9tLFxuICBpbmplY3QsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVyc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHR5cGUgeyBJY29uRGVmaW5pdGlvbiB9IGZyb20gJ0BhbnQtZGVzaWduL2ljb25zLWFuZ3VsYXInO1xuaW1wb3J0IHsgQmVsbE91dGxpbmUsIERlbGV0ZU91dGxpbmUsIEluYm94T3V0bGluZSwgUGx1c091dGxpbmUgfSBmcm9tICdAYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyL2ljb25zJztcblxuaW1wb3J0IHsgQUxBSU5fQ09ORklHLCBBbGFpbkNvbmZpZyB9IGZyb20gJ0BkZWxvbi91dGlsL2NvbmZpZyc7XG5pbXBvcnQgdHlwZSB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBOekRyYXdlck1vZHVsZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvZHJhd2VyJztcbmltcG9ydCB7IE5aX0RBVEVfTE9DQUxFLCBwcm92aWRlTnpJMThuIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcbmltcG9ydCB7IE56SWNvblNlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2ljb24nO1xuaW1wb3J0IHsgTnpNb2RhbE1vZHVsZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvbW9kYWwnO1xuXG5pbXBvcnQgeyBERUxPTl9MT0NBTEUsIERFTE9OX0xPQ0FMRV9TRVJWSUNFX1BST1ZJREVSIH0gZnJvbSAnLi9sb2NhbGUnO1xuaW1wb3J0IHpoQ04gZnJvbSAnLi9sb2NhbGUvbGFuZ3VhZ2VzL3poLUNOJztcbmltcG9ydCB7IEFMQUlOX0kxOE5fVE9LRU4gfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7IEFMQUlOX1NFVFRJTkdfREVGQVVMVCB9IGZyb20gJy4vc2VydmljZXMvc2V0dGluZ3Mvc2V0dGluZ3Muc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxhaW5Qcm92aWRlT3B0aW9ucyB7XG4gIGNvbmZpZz86IEFsYWluQ29uZmlnO1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSBkZWZhdWx0IGxhbmd1YWdlXG4gICAqXG4gICAqIOWIneWni+WMlum7mOiupOivreiogFxuICAgKi9cbiAgZGVmYXVsdExhbmc/OiBBbGFpblByb3ZpZGVMYW5nO1xuICBpMThuQ2xhc3M/OiBUeXBlPE56U2FmZUFueT47XG4gIGljb25zPzogSWNvbkRlZmluaXRpb25bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbGFpblByb3ZpZGVMYW5nIHtcbiAgYWJicjogc3RyaW5nO1xuICBuZzogTnpTYWZlQW55O1xuICB6b3JybzogTnpTYWZlQW55O1xuICBkYXRlOiBOelNhZmVBbnk7XG4gIGRlbG9uOiBOelNhZmVBbnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQWxhaW4ob3B0aW9uczogQWxhaW5Qcm92aWRlT3B0aW9ucyk6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgY29uc3QgbGFuZyA9IG9wdGlvbnM/LmRlZmF1bHRMYW5nO1xuICBjb25zdCBwcm92aWRlczogQXJyYXk8UHJvdmlkZXIgfCBFbnZpcm9ubWVudFByb3ZpZGVycz4gPSBbXG4gICAgeyBwcm92aWRlOiBBTEFJTl9DT05GSUcsIHVzZVZhbHVlOiBvcHRpb25zPy5jb25maWcgfSxcbiAgICB7IHByb3ZpZGU6IERFTE9OX0xPQ0FMRSwgdXNlVmFsdWU6IGxhbmc/LmRlbG9uID8/IHpoQ04gfSxcbiAgICBERUxPTl9MT0NBTEVfU0VSVklDRV9QUk9WSURFUixcbiAgICBpbXBvcnRQcm92aWRlcnNGcm9tKFtOekRyYXdlck1vZHVsZSwgTnpNb2RhbE1vZHVsZV0pLFxuICAgIEFMQUlOX1NFVFRJTkdfREVGQVVMVFxuICBdO1xuICBpZiAobGFuZykge1xuICAgIHJlZ2lzdGVyTG9jYWxlRGF0YShsYW5nLm5nLCBsYW5nLmFiYnIpO1xuICAgIHByb3ZpZGVzLnB1c2goeyBwcm92aWRlOiBMT0NBTEVfSUQsIHVzZVZhbHVlOiBsYW5nLmFiYnIgfSwgcHJvdmlkZU56STE4bihsYW5nLnpvcnJvKSwge1xuICAgICAgcHJvdmlkZTogTlpfREFURV9MT0NBTEUsXG4gICAgICB1c2VWYWx1ZTogbGFuZy5kYXRlXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBpMThuQ2xzID0gb3B0aW9ucz8uaTE4bkNsYXNzO1xuICBpZiAoaTE4bkNscykge1xuICAgIHByb3ZpZGVzLnB1c2goeyBwcm92aWRlOiBBTEFJTl9JMThOX1RPS0VOLCB1c2VDbGFzczogaTE4bkNscywgbXVsdGk6IGZhbHNlIH0pO1xuICB9XG5cbiAgY29uc3QgaWNvbnM6IEljb25EZWZpbml0aW9uW10gPSBbQmVsbE91dGxpbmUsIERlbGV0ZU91dGxpbmUsIFBsdXNPdXRsaW5lLCBJbmJveE91dGxpbmUsIC4uLihvcHRpb25zLmljb25zID8/IFtdKV07XG4gIHByb3ZpZGVzLnB1c2goe1xuICAgIHByb3ZpZGU6IEVOVklST05NRU5UX0lOSVRJQUxJWkVSLFxuICAgIG11bHRpOiB0cnVlLFxuICAgIHVzZVZhbHVlOiAoKSA9PiB7XG4gICAgICBpbmplY3QoTnpJY29uU2VydmljZSwgeyBvcHRpb25hbDogdHJ1ZSB9KT8uYWRkSWNvbiguLi5pY29ucyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhwcm92aWRlcyk7XG59XG4iXX0=