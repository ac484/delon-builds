{"version":3,"sources":["../../../../packages/chart/core/g2.servicce.ts"],"names":["G2Service","cogSrv","lazySrv","this","loading","loaded","notify$","Subject","cog","theme","Object","defineProperty","prototype","_cog","val","merge","libs","libLoad","_this","next","load","then","asObservable","ngOnDestroy","unsubscribe","Injectable","args","providedIn","AlainConfigService","LazyService"],"mappings":"odA4BE,SAAAA,EAAoBC,EAAoCC,GAApCC,KAAAF,OAAAA,EAAoCE,KAAAD,QAAAA,EArBhDC,KAAAC,SAAU,EACVD,KAAAE,QAAS,EACTF,KAAAG,QAAU,IAAIC,EAAAA,QAoBpBJ,KAAKK,IAAM,CAAEC,MAAO,WAlBtBC,OAAAC,eAAIX,EAAAY,UAAA,MAAG,KAAP,WACE,OAAOT,KAAKU,UAEd,SAAQC,GACNX,KAAKU,KAAOV,KAAKF,OAAOc,MACtB,QAAO,CAELN,MAAO,GACPO,KAAM,CACJ,mEACA,8EAGJF,oCAQJd,EAAAY,UAAAK,QAAA,WAAA,IAAAC,EAAAf,KACE,OAAI,KAAKC,SACH,KAAKC,QACP,KAAKC,QAAQa,OAEf,OAEF,KAAKf,SAAU,EACf,KAAKF,QAAQkB,KAAK,KAAKZ,IAAQ,MAAGa,MAAI,WACpC,EAAKhB,QAAS,EACd,EAAKC,QAAQa,UAEf,OAGFT,OAAAC,eAAIX,EAAAY,UAAA,SAAM,KAAV,WACE,OAAOT,KAAKG,QAAQgB,gDAGtBtB,EAAAY,UAAAW,YAAA,WACEpB,KAAKG,QAAQkB,wCAhDhBC,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAHCC,EAAAA,0BAAoBC,EAAAA","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { AlainChartConfig, AlainConfigService, LazyService } from '@delon/util';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class G2Service implements OnDestroy {\n  private _cog: AlainChartConfig;\n  private loading = false;\n  private loaded = false;\n  private notify$ = new Subject<void>();\n\n  get cog(): AlainChartConfig {\n    return this._cog;\n  }\n  set cog(val: AlainChartConfig) {\n    this._cog = this.cogSrv.merge(\n      'chart',\n      {\n        theme: '',\n        libs: [\n          'https://gw.alipayobjects.com/os/lib/antv/g2/4.1.4/dist/g2.min.js',\n          'https://gw.alipayobjects.com/os/lib/antv/data-set/0.11.7/dist/data-set.js',\n        ],\n      } as AlainChartConfig,\n      val,\n    )!;\n  }\n\n  constructor(private cogSrv: AlainConfigService, private lazySrv: LazyService) {\n    this.cog = { theme: '' };\n  }\n\n  libLoad(): this {\n    if (this.loading) {\n      if (this.loaded) {\n        this.notify$.next();\n      }\n      return this;\n    }\n    this.loading = true;\n    this.lazySrv.load(this.cog.libs!).then(() => {\n      this.loaded = true;\n      this.notify$.next();\n    });\n    return this;\n  }\n\n  get notify(): Observable<void> {\n    return this.notify$.asObservable();\n  }\n\n  ngOnDestroy(): void {\n    this.notify$.unsubscribe();\n  }\n}\n"]}