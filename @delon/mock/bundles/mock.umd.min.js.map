{"version":3,"sources":["ng://@delon/mock/src/status.error.ts","ng://@delon/mock/src/mock.config.ts","ng://@delon/mock/src/mock.service.ts","ng://@delon/mock/src/mock.interceptor.ts","ng://@delon/mock/src/mock.module.ts"],"names":["MockStatusError","status","error","this","DelonMockConfig","delay","force","log","MockService","config","cached","applyMock","data","prototype","realApplyMock","e","outputError","_this","Object","keys","forEach","key","rules","ruleKey","value","Error","rule","genRule","indexOf","method","item","find","w","url","callback","push","sort","a","b","martcher","toString","length","splited","split","toLowerCase","segments","filter","segment","startsWith","map","v","substring","reStr","join","RegExp","test","toUpperCase","filePath","message","errors","stack","line","trim","replace","splice","console","group","warn","groupEnd","getRule","params","list","ret","exec","slice","index","clearCache","defineProperty","ngOnDestroy","Injectable","MockInterceptor","injector","intercept","req","next","res","src","get","assign","handle","mockRequest_1","original","body","queryString","headers","urlParams","itemArr","includes","Array","isArray","call","errRes_1","HttpErrorResponse","statusText","Observable","observer","response","HttpResponse","of","pipe","Injector","DelonMockModule","forRoot","ngModule","providers","provide","useValue","HTTP_INTERCEPTORS","useClass","multi","forChild","NgModule","args"],"mappings":"8bAAA,IAAAA,EAEE,SAAAA,EAAmBC,EAAuBC,GAAvBC,KAAAF,OAAAA,EAAuBE,KAAAD,MAAAA,GCF5CE,EAAA,SAAAA,IAIED,KAAAE,MAAS,IAETF,KAAAG,OAAS,EAETH,KAAAI,KAAO,GCRTC,EAAA,WAQE,SAAAA,EAAoBC,GAAAN,KAAAM,OAAAA,EAFZN,KAAAO,OAA2B,GAGjCP,KAAKQ,mBACER,KAAKM,OAAOG,KAoJvB,OA/IUJ,EAAAK,UAAAF,UAAR,WACER,KAAKO,OAAS,GACd,IACEP,KAAKW,gBACL,MAAOC,GACPZ,KAAKa,YAAYD,KAIbP,EAAAK,UAAAC,cAAR,WAAA,IAAAG,EAAAd,KACQS,EAAOT,KAAKM,OAAOG,KACpBA,IACLM,OAAOC,KAAKP,GAAMQ,QAAQ,SAACC,OACnBC,EAAQV,EAAKS,GACdC,GACLJ,OAAOC,KAAKG,GAAOF,QAAQ,SAACG,OACpBC,EAAQF,EAAMC,GACpB,GAEqB,mBAAVC,GACU,iBAAVA,GACU,iBAAVA,EAGT,MAAMC,MACJ,kBAAkBJ,EAAG,IAAIE,EAAO,4DAA4DC,OAG1FE,EAAOT,EAAKU,QAAQJ,EAASC,GACnC,IAGS,IAFP,CAAC,MAAO,OAAQ,MAAO,OAAQ,SAAU,QAAS,WAAWI,QAC3DF,EAAKG,QAGP,MAAMJ,MAAM,aAAaJ,EAAG,IAAIE,EAAO,qBAEnCO,EAAOb,EAAKP,OAAOqB,KACvB,SAAAC,GAAK,OAAAA,EAAEC,MAAQP,EAAKO,KAAOD,EAAEH,SAAWH,EAAKG,SAE3CC,EACFA,EAAKI,SAAWR,EAAKQ,SAErBjB,EAAKP,OAAOyB,KAAKT,OAKvBvB,KAAKO,OAAO0B,KACV,SAACC,EAAGC,GACF,OAACA,EAAEC,UAAY,IAAIC,WAAWC,QAC7BJ,EAAEE,UAAY,IAAIC,WAAWC,WAI5BjC,EAAAK,UAAAc,QAAR,SAAgBN,EAAaa,OACvBL,EAAS,MACTI,EAAMZ,EAEV,IAAwB,EAApBA,EAAIO,QAAQ,KAAW,KACnBc,EAAUrB,EAAIsB,MAAM,KAC1Bd,EAASa,EAAQ,GAAGE,cACpBX,EAAMS,EAAQ,OAGZH,EAAmB,KACnBM,EAAqB,GACzB,IAAKZ,EAAIL,QAAQ,KAAM,CACrBiB,EAAW,EACRF,MAAM,KACNG,OAAO,SAAAC,GAAW,OAAAA,EAAQC,WAAW,OACrCC,IAAI,SAAAC,GAAK,OAAAA,EAAEC,UAAU,SAClBC,EAAQ,EACXT,MAAM,KACNM,IAAI,SAAAF,GAAW,OAACA,EAAQC,WAAW,KAAO,UAAYD,IACtDM,KAAK,KACRd,EAAW,IAAIe,OAAOF,EAAO,SACpB,eAAeG,KAAKtB,KAC7BM,EAAW,IAAIe,OAAOrB,EAAK,MAG7B,MAAO,CACLA,IAAGA,EACHM,SAAQA,EACRM,SAAQA,EACRX,SAAQA,EACRL,OAAQA,EAAO2B,gBAIXhD,EAAAK,UAAAG,YAAR,SAAoBd,OACZuD,EAAWvD,EAAMwD,QAAQf,MAAM,MAAM,GACrCgB,EAASzD,EAAM0D,MAClBjB,MAAM,MACNG,OAAO,SAAAe,GAAQ,OAA+B,IAA/BA,EAAKC,OAAOlC,QAAQ,SACnCqB,IAAI,SAAAY,GAAQ,OAAAA,EAAKE,QAAWN,EAAQ,KAAM,MAQ7C,MAPAE,EAAOK,OAAO,EAAG,EAAG,CAAC,KAErBC,QAAQC,QACRD,QAAQE,KAAK,oDACbF,QAAQ1D,IAAIoD,EAAON,KAAK,OACxBY,QAAQG,WAEFlE,GAKRM,EAAAK,UAAAwD,QAAA,SAAQxC,EAAgBI,GACtBJ,GAAUA,GAAU,OAAO2B,kBACrBc,EAAc,GACdC,EACJpE,KAAKO,OAAOoC,OACV,SAAAd,GACE,OAAAA,EAAEH,SAAWA,IACZG,EAAEO,SAAWP,EAAEO,SAASgB,KAAKtB,GAAOD,EAAEC,MAAQA,KAErD,GAAoB,IAAhBsC,EAAK9B,OAAc,OAAO,SACxB+B,EAAMD,EAAKxC,KAAK,SAAAC,GAAK,OAAAA,EAAEC,MAAQA,KAAQsC,EAAK,GAC9CC,EAAIjC,UACUiC,EAAIjC,SAASkC,KAAKxC,GAC1ByC,MAAM,GAAGzB,IAAI,SAACzB,EAAemD,GACnCL,EAAOE,EAAI3B,SAAS8B,IAAUnD,IAGlC,MAAO,CACLS,IAAGA,EACHJ,OAAQ2C,EAAI3C,OACZyC,OAAMA,EACNpC,SAAUsC,EAAItC,WAIlB1B,EAAAK,UAAA+D,WAAA,WACEzE,KAAKO,OAAS,IAGhBQ,OAAA2D,eAAIrE,EAAAK,UAAA,QAAK,KAAT,WACE,OAAOV,KAAKO,wCAGdF,EAAAK,UAAAiE,YAAA,WACE3E,KAAKyE,kCAxJRG,EAAAA,sDAHQ3E,KA6JTI,EA9JA,GCAAwE,EAAA,WAuBE,SAAAA,EAAoBC,GAAA9E,KAAA8E,SAAAA,EAqHtB,OAnHED,EAAAnE,UAAAqE,UAAA,SACEC,EACAC,OAsBIC,EAdEC,EAAMnF,KAAK8E,SAASM,IAAI/E,GACxBC,EAASS,OAAOsE,OACpB,CACEnF,MAAO,IACPC,OAAO,EACPC,KAAK,GAEPJ,KAAK8E,SAASM,IAAInF,EAAiB,OAE/BsB,EAAO4D,EAAIjB,QAAQc,EAAItD,OAAQsD,EAAIlD,IAAIU,MAAM,KAAK,IACxD,IAAKjB,IAASjB,EAAOH,MACnB,OAAO8E,EAAKK,OAAON,GAIrB,cAAezD,EAAKQ,UAClB,IAAK,eACGwD,EAA2B,CAC/BC,SAAUR,EACVS,KAAMT,EAAIS,KACVC,YAAa,GACbC,QAAS,GACTxB,OAAQ5C,EAAK4C,QAETyB,EAAYZ,EAAIlD,IAAIU,MAAM,KACT,EAAnBoD,EAAUtD,QACZsD,EAAU,GAAGpD,MAAM,KAAKvB,QAAQ,SAAAU,OACxBkE,EAAUlE,EAAKa,MAAM,KACrBtB,EAAM2E,EAAQ,GACdxE,EAAQwE,EAAQ,GAElB9E,OAAOC,KAAKuE,EAAYG,aAAaI,SAAS5E,IAC3C6E,MAAMC,QAAQT,EAAYG,YAAYxE,MACzCqE,EAAYG,YAAYxE,GAAO,CAACqE,EAAYG,YAAYxE,KAE1DqE,EAAYG,YAAYxE,GAAKc,KAAKX,IAElCkE,EAAYG,YAAYxE,GAAOG,IAIrC2D,EAAIb,OACDnD,OACAC,QAAQ,SAAAC,GAAO,OAACqE,EAAYG,YAAYxE,GAAO8D,EAAIb,OAAOiB,IAAIlE,KACjE8D,EAAIW,QACD3E,OACAC,QAAQ,SAAAC,GAAO,OAACqE,EAAYI,QAAQzE,GAAO8D,EAAIW,QAAQP,IAAIlE,KAE9D,IACEgE,EAAM3D,EAAKQ,SAASkE,KAAKjG,KAAMuF,GAC/B,MAAO3E,OACHsF,EAwBJ,OAvBItF,aAAaf,GACfqG,EAAS,IAAIC,EAAAA,kBAAkB,CAC7BrE,IAAKkD,EAAIlD,IACT6D,QAASX,EAAIW,QACb7F,OAAQc,EAAEd,OACVsG,WAAYxF,EAAEwF,YAAc,gBAC5BrG,MAAOa,EAAEb,QAEPO,EAAOF,KACT0D,QAAQ1D,IACN,aAAaQ,EAAEd,OAAM,WACrB,gCACAkF,EAAIlD,IACJoE,EACAlB,IAGJlB,QAAQ/D,MACN,mDACAa,EACAoE,GAGG,IAAIqB,EAAAA,WAAW,SAACC,GACrBA,EAASvG,MAAMmG,KAGnB,MACF,QACEhB,EAAM3D,EAAKQ,aAITwE,EAA8B,IAAIC,EAAAA,aAAa,CACnD1G,OAAQ,IACR2F,KAAMP,EACNpD,IAAKkD,EAAIlD,MAeX,OAZIxB,EAAOF,MACT0D,QAAQ1D,IACN,OAAO4E,EAAItD,OAAM,KAAKsD,EAAIlD,IAAG,YAC7B,gCACAkD,GAEFlB,QAAQ1D,IACN,OAAO4E,EAAItD,OAAM,KAAKsD,EAAIlD,IAAG,aAC7B,gCACAyE,IAGGE,EAAAA,GAAGF,GAAUG,KAAKxG,EAAAA,MAAMI,EAAOJ,6BArHzC0E,EAAAA,sDArBoB+B,EAAAA,YA4IrB9B,EA5IA,GCAA+B,EAAA,WAOA,SAAAA,KAqBA,OAnBSA,EAAAC,QAAP,SAAevG,GACb,MAAO,CACLwG,SAAUF,EACVG,UAAW,CACT1G,EACA,CAAE2G,QAAS/G,EAAiBgH,SAAU3G,GACtC,CAAE0G,QAASE,EAAAA,kBAAmBC,SAAUtC,EAAiBuC,OAAO,MAK/DR,EAAAS,SAAP,WACE,MAAO,CACLP,SAAUF,EACVG,UAAW,CACT,CAAEC,QAASE,EAAAA,kBAAmBC,SAAUtC,EAAiBuC,OAAO,0BAjBvEE,EAAAA,SAAQC,KAAA,CAAC,MAqBVX,EA5BA","sourcesContent":["export class MockStatusError {\n  statusText: string;\n  constructor(public status: number, public error?: any) {}\n}\n","export class DelonMockConfig {\n  /** è§åå®ä¹æ°æ® */\n  data: any;\n  /** è¯·æ±å»¶è¿ï¼åä½ï¼æ¯«ç§ï¼é»è®¤ï¼`300` */\n  delay? = 300;\n  /** æ¯å¦å¼ºå¶ææè¯·æ±é½Mockï¼`true` è¡¨ç¤ºå½è¯·æ±çURLä¸å­å¨æ¶ç´æ¥è¿å 404 éè¯¯ï¼`false` è¡¨ç¤ºæªå½ä¸­æ¶åéçå®HTTPè¯·æ± */\n  force? = false;\n  /** æ¯å¦æå° Mock è¯·æ±ä¿¡æ¯ï¼å¼¥è¡¥æµè§å¨æ Networkä¿¡æ¯ */\n  log? = true;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { DelonMockConfig } from './mock.config';\nimport { MockCachedRule, MockRule } from './interface';\n\n@Injectable()\nexport class MockService implements OnDestroy {\n  private cached: MockCachedRule[] = [];\n\n  constructor(private config: DelonMockConfig) {\n    this.applyMock();\n    delete this.config.data;\n  }\n\n  // #region parse rule\n\n  private applyMock() {\n    this.cached = [];\n    try {\n      this.realApplyMock();\n    } catch (e) {\n      this.outputError(e);\n    }\n  }\n\n  private realApplyMock() {\n    const data = this.config.data;\n    if (!data) return;\n    Object.keys(data).forEach((key: string) => {\n      const rules = data[key];\n      if (!rules) return;\n      Object.keys(rules).forEach((ruleKey: string) => {\n        const value = rules[ruleKey];\n        if (\n          !(\n            typeof value === 'function' ||\n            typeof value === 'object' ||\n            typeof value === 'string'\n          )\n        ) {\n          throw Error(\n            `mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`,\n          );\n        }\n        const rule = this.genRule(ruleKey, value);\n        if (\n          ['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(\n            rule.method,\n          ) === -1\n        ) {\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\n        }\n        const item = this.cached.find(\n          w => w.url === rule.url && w.method === rule.method,\n        );\n        if (item) {\n          item.callback = rule.callback;\n        } else {\n          this.cached.push(rule);\n        }\n      });\n    });\n    // regular ordering\n    this.cached.sort(\n      (a, b) =>\n        (b.martcher || '').toString().length -\n        (a.martcher || '').toString().length,\n    );\n  }\n\n  private genRule(key: string, callback: any): MockCachedRule {\n    let method = 'GET';\n    let url = key;\n\n    if (key.indexOf(' ') > -1) {\n      const splited = key.split(' ');\n      method = splited[0].toLowerCase();\n      url = splited[1];\n    }\n\n    let martcher: RegExp = null;\n    let segments: string[] = [];\n    if (~url.indexOf(':')) {\n      segments = url!\n        .split('/')\n        .filter(segment => segment.startsWith(':'))\n        .map(v => v.substring(1));\n      const reStr = url!\n        .split('/')\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\n        .join('/');\n      martcher = new RegExp(reStr, 'i');\n    } else if (/(\\([^)]+\\))/i.test(url)) {\n      martcher = new RegExp(url, 'i');\n    }\n\n    return {\n      url,\n      martcher,\n      segments,\n      callback,\n      method: method.toUpperCase(),\n    };\n  }\n\n  private outputError(error: any) {\n    const filePath = error.message.split(': ')[0];\n    const errors = error.stack\n      .split('\\n')\n      .filter(line => line.trim().indexOf('at ') !== 0)\n      .map(line => line.replace(`${filePath}: `, ''));\n    errors.splice(1, 0, ['']);\n\n    console.group();\n    console.warn(`==========Failed to parse mock config.==========`);\n    console.log(errors.join('\\n'));\n    console.groupEnd();\n\n    throw error;\n  }\n\n  // #endregion\n\n  getRule(method: string, url: string): MockRule {\n    method = (method || 'GET').toUpperCase();\n    const params: any = {};\n    const list =\n      this.cached.filter(\n        w =>\n          w.method === method &&\n          (w.martcher ? w.martcher.test(url) : w.url === url),\n      );\n    if (list.length === 0) return null;\n    const ret = list.find(w => w.url === url) || list[0];\n    if (ret.martcher) {\n      const execArr = ret.martcher.exec(url);\n      execArr.slice(1).map((value: string, index: number) => {\n        params[ret.segments[index]] = value;\n      });\n    }\n    return {\n      url,\n      method: ret.method,\n      params,\n      callback: ret.callback,\n    };\n  }\n\n  clearCache() {\n    this.cached = [];\n  }\n\n  get rules() {\n    return this.cached;\n  }\n\n  ngOnDestroy(): void {\n    this.clearCache();\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpSentEvent,\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpUserEvent,\n  HttpErrorResponse,\n  HttpEvent,\n} from '@angular/common/http';\nimport { Observable, Observer, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { DelonMockConfig } from './mock.config';\nimport { MockService } from './mock.service';\nimport { MockStatusError } from './status.error';\nimport { MockRequest } from './interface';\n\n@Injectable()\nexport class MockInterceptor implements HttpInterceptor {\n  constructor(private injector: Injector) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler,\n  ): Observable<\n    | HttpSentEvent\n    | HttpHeaderResponse\n    | HttpProgressEvent\n    | HttpResponse<any>\n    | HttpUserEvent<any>\n  > {\n    const src = this.injector.get(MockService);\n    const config = Object.assign(\n      {\n        delay: 300,\n        force: false,\n        log: true,\n      },\n      this.injector.get(DelonMockConfig, null),\n    );\n    const rule = src.getRule(req.method, req.url.split('?')[0]);\n    if (!rule && !config.force) {\n      return next.handle(req);\n    }\n\n    let res: any;\n    switch (typeof rule.callback) {\n      case 'function':\n        const mockRequest: MockRequest = {\n          original: req,\n          body: req.body,\n          queryString: {},\n          headers: {},\n          params: rule.params,\n        };\n        const urlParams = req.url.split('?');\n        if (urlParams.length > 1) {\n          urlParams[1].split('&').forEach(item => {\n            const itemArr = item.split('=');\n            const key = itemArr[0];\n            const value = itemArr[1];\n            // is array\n            if (Object.keys(mockRequest.queryString).includes(key)) {\n              if (!Array.isArray(mockRequest.queryString[key])) {\n                mockRequest.queryString[key] = [mockRequest.queryString[key]];\n              }\n              mockRequest.queryString[key].push(value);\n            } else {\n              mockRequest.queryString[key] = value;\n            }\n          });\n        }\n        req.params\n          .keys()\n          .forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\n        req.headers\n          .keys()\n          .forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\n\n        try {\n          res = rule.callback.call(this, mockRequest);\n        } catch (e) {\n          let errRes: HttpErrorResponse;\n          if (e instanceof MockStatusError) {\n            errRes = new HttpErrorResponse({\n              url: req.url,\n              headers: req.headers,\n              status: e.status,\n              statusText: e.statusText || 'Unknown Error',\n              error: e.error,\n            });\n            if (config.log)\n              console.log(\n                `%c ð½MOCK ${e.status} STATUS `,\n                'background:#000;color:#bada55',\n                req.url,\n                errRes,\n                req,\n              );\n          } else {\n            console.error(\n              `Please use MockStatusError to throw status error`,\n              e,\n              req,\n            );\n          }\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\n            observer.error(errRes);\n          });\n        }\n        break;\n      default:\n        res = rule.callback;\n        break;\n    }\n\n    const response: HttpResponse<any> = new HttpResponse({\n      status: 200,\n      body: res,\n      url: req.url,\n    });\n\n    if (config.log) {\n      console.log(\n        `%cð½${req.method}->${req.url}->request`,\n        'background:#000;color:#bada55',\n        req,\n      );\n      console.log(\n        `%cð½${req.method}->${req.url}->response`,\n        'background:#000;color:#bada55',\n        response,\n      );\n    }\n    return of(response).pipe(delay(config.delay));\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { DelonMockConfig } from './mock.config';\nimport { MockService } from './mock.service';\nimport { MockInterceptor } from './mock.interceptor';\n\n@NgModule({})\nexport class DelonMockModule {\n  static forRoot(config: DelonMockConfig): ModuleWithProviders {\n    return {\n      ngModule: DelonMockModule,\n      providers: [\n        MockService,\n        { provide: DelonMockConfig, useValue: config },\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\n      ],\n    };\n  }\n\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: DelonMockModule,\n      providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\n      ],\n    };\n  }\n}\n"]}