{"version":3,"sources":["../../../../packages/mock/src/status.error.ts","../../../../packages/mock/src/mock.config.ts","../../../../packages/mock/src/mock.service.ts","../../../../packages/mock/src/mock.interceptor.ts","../../../../packages/mock/src/mock.module.ts"],"names":["status","error","this","MOCK_DEFULAT_CONFIG","data","delay","force","log","executeOtherInterceptors","MockService","cogSrv","cached","config","merge","applyMock","prototype","realApplyMock","e","outputError","_this","Object","keys","forEach","key","rules","ruleKey","value","Error","rule","genRule","indexOf","method","item","find","w","url","callback","push","sort","a","b","martcher","toString","length","splited","split","toLowerCase","segments","filter","segment","startsWith","map","v","substring","reStr","join","RegExp","test","toUpperCase","filePath","message","errors","stack","line","trim","replace","splice","console","group","warn","groupEnd","getRule","params","list","ret","exec","slice","index","clearCache","defineProperty","ngOnDestroy","i0","ɵɵinject","i1","AlainConfigService","factory","ɵfac","providedIn","Injectable","HttpMockInterceptorHandler","next","interceptor","handle","req","intercept","MockInterceptor","injector","res","src","get","mockRequest_1","original","body","queryString","headers","urlParams","itemArr","includes","Array","isArray","call","HttpErrorResponse","MockStatusError","statusText","HttpResponseBase","HttpResponse","deepCopy","urlWithParams","res$","throwError","of","interceptors","HTTP_INTERCEPTORS","lastInterceptors","reduceRight","_next","_interceptor","pipe","Injector","DelonMockModule","forRoot","ngModule","providers","provide","useClass","multi","forChild","NgModule"],"mappings":"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","sourcesContent":["export class MockStatusError {\n  statusText: string;\n  constructor(public status: number, public error?: any) {}\n}\n","import { AlainMockConfig } from '@delon/util';\n\nexport const MOCK_DEFULAT_CONFIG: AlainMockConfig = {\n  data: null,\n  delay: 300,\n  force: false,\n  log: true,\n  executeOtherInterceptors: true,\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { AlainConfigService, AlainMockConfig } from '@delon/util';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { MockCachedRule, MockRule } from './interface';\nimport { MOCK_DEFULAT_CONFIG } from './mock.config';\n\n@Injectable({ providedIn: 'root' })\nexport class MockService implements OnDestroy {\n  private cached: MockCachedRule[] = [];\n  readonly config: AlainMockConfig;\n\n  constructor(cogSrv: AlainConfigService) {\n    this.config = cogSrv.merge('mock', MOCK_DEFULAT_CONFIG)!;\n    this.applyMock();\n    delete this.config.data;\n  }\n\n  // #region parse rule\n\n  private applyMock(): void {\n    this.cached = [];\n    try {\n      this.realApplyMock();\n    } catch (e) {\n      this.outputError(e);\n    }\n  }\n\n  private realApplyMock(): void {\n    const data = this.config.data;\n    if (!data) return;\n    Object.keys(data).forEach((key: string) => {\n      const rules = data[key];\n      if (!rules) return;\n      Object.keys(rules).forEach((ruleKey: string) => {\n        const value = rules[ruleKey];\n        if (!(typeof value === 'function' || typeof value === 'object' || typeof value === 'string')) {\n          throw Error(`mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`);\n        }\n        const rule = this.genRule(ruleKey, value);\n        if (['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(rule.method) === -1) {\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\n        }\n        const item = this.cached.find(w => w.url === rule.url && w.method === rule.method);\n        if (item) {\n          item.callback = rule.callback;\n        } else {\n          this.cached.push(rule);\n        }\n      });\n    });\n    // regular ordering\n    this.cached.sort((a, b) => (b.martcher || '').toString().length - (a.martcher || '').toString().length);\n  }\n\n  private genRule(key: string, callback: any): MockCachedRule {\n    let method = 'GET';\n    let url = key;\n\n    if (key.indexOf(' ') > -1) {\n      const splited = key.split(' ');\n      method = splited[0].toLowerCase();\n      url = splited[1];\n    }\n\n    let martcher: RegExp | null = null;\n    let segments: string[] = [];\n    if (~url.indexOf(':')) {\n      segments = url!\n        .split('/')\n        .filter(segment => segment.startsWith(':'))\n        .map(v => v.substring(1));\n      const reStr = url!\n        .split('/')\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\n        .join('/');\n      martcher = new RegExp(`^${reStr}`, 'i');\n    } else if (/(\\([^)]+\\))/i.test(url)) {\n      martcher = new RegExp(url, 'i');\n    }\n\n    return {\n      url,\n      martcher,\n      segments,\n      callback,\n      method: method.toUpperCase(),\n    };\n  }\n\n  private outputError(error: NzSafeAny): void {\n    const filePath = error.message.split(': ')[0];\n    const errors = (error.stack as string)\n      .split('\\n')\n      .filter(line => line.trim().indexOf('at ') !== 0)\n      .map(line => line.replace(`${filePath}: `, ''));\n    errors.splice(1, 0, '');\n\n    console.group();\n    console.warn(`==========Failed to parse mock config.==========`);\n    console.log(errors.join('\\n'));\n    console.groupEnd();\n\n    throw error;\n  }\n\n  // #endregion\n\n  getRule(method: string, url: string): MockRule | null {\n    method = (method || 'GET').toUpperCase();\n    const params: NzSafeAny = {};\n    const list = this.cached.filter(w => w.method === method && (w.martcher ? w.martcher.test(url) : w.url === url));\n    if (list.length === 0) return null;\n    const ret = list.find(w => w.url === url) || list[0];\n    if (ret.martcher) {\n      const execArr = ret.martcher.exec(url);\n      execArr!.slice(1).map((value: string, index: number) => {\n        params[ret.segments[index]] = value;\n      });\n    }\n    return {\n      url,\n      method: ret.method,\n      params,\n      callback: ret.callback,\n    };\n  }\n\n  clearCache(): void {\n    this.cached = [];\n  }\n\n  get rules(): MockCachedRule[] {\n    return this.cached;\n  }\n\n  ngOnDestroy(): void {\n    this.clearCache();\n  }\n}\n","import {\n  HttpBackend,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n  HttpResponseBase,\n  HTTP_INTERCEPTORS,\n} from '@angular/common/http';\nimport { Injectable, Injector } from '@angular/core';\nimport { deepCopy } from '@delon/util';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { MockRequest } from './interface';\nimport { MockService } from './mock.service';\nimport { MockStatusError } from './status.error';\n\nclass HttpMockInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n@Injectable()\nexport class MockInterceptor implements HttpInterceptor {\n  constructor(private injector: Injector) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const src = this.injector.get(MockService);\n    const config = src.config;\n    const rule = src.getRule(req.method, req.url.split('?')[0]);\n    if (!rule && !config.force) {\n      return next.handle(req);\n    }\n\n    let res: any;\n    switch (typeof rule!.callback) {\n      case 'function':\n        const mockRequest: MockRequest = {\n          original: req,\n          body: req.body,\n          queryString: {},\n          headers: {},\n          params: rule!.params,\n        };\n        const urlParams = req.url.split('?');\n        if (urlParams.length > 1) {\n          urlParams[1].split('&').forEach(item => {\n            const itemArr = item.split('=');\n            const key = itemArr[0];\n            const value = itemArr[1];\n            // is array\n            if (Object.keys(mockRequest.queryString).includes(key)) {\n              if (!Array.isArray(mockRequest.queryString[key])) {\n                mockRequest.queryString[key] = [mockRequest.queryString[key]];\n              }\n              mockRequest.queryString[key].push(value);\n            } else {\n              mockRequest.queryString[key] = value;\n            }\n          });\n        }\n        req.params.keys().forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\n        req.headers.keys().forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\n\n        try {\n          res = rule!.callback.call(this, mockRequest);\n        } catch (e) {\n          res = new HttpErrorResponse({\n            url: req.url,\n            headers: req.headers,\n            status: e instanceof MockStatusError ? e.status : 400,\n            statusText: e.statusText || 'Unknown Error',\n            error: e.error,\n          });\n        }\n        break;\n      default:\n        res = rule!.callback;\n        break;\n    }\n\n    if (!(res instanceof HttpResponseBase)) {\n      res = new HttpResponse({\n        status: 200,\n        url: req.url,\n        body: res,\n      });\n    }\n\n    if (res.body) {\n      res.body = deepCopy(res.body);\n    }\n\n    if (config.log) {\n      console.log(`%c👽${req.method}->${req.urlWithParams}->request`, 'background:#000;color:#bada55', req);\n      console.log(`%c👽${req.method}->${req.urlWithParams}->response`, 'background:#000;color:#bada55', res);\n    }\n\n    const res$ = res instanceof HttpErrorResponse ? throwError(res) : of(res);\n\n    if (config.executeOtherInterceptors) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      const lastInterceptors = interceptors.slice(interceptors.indexOf(this) + 1);\n      if (lastInterceptors.length > 0) {\n        const chain = lastInterceptors.reduceRight((_next, _interceptor) => new HttpMockInterceptorHandler(_next, _interceptor), {\n          handle: () => res$,\n        } as HttpBackend);\n        return chain.handle(req).pipe(delay(config.delay!));\n      }\n    }\n\n    return res$.pipe(delay(config.delay!));\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MockInterceptor } from './mock.interceptor';\n\n@NgModule({})\nexport class DelonMockModule {\n  static forRoot(): ModuleWithProviders<DelonMockModule> {\n    return {\n      ngModule: DelonMockModule,\n      providers: [{ provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true }],\n    };\n  }\n\n  static forChild(): ModuleWithProviders<DelonMockModule> {\n    return {\n      ngModule: DelonMockModule,\n      providers: [{ provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true }],\n    };\n  }\n}\n"]}