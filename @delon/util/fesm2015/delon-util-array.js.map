{"version":3,"file":"delon-util-array.js","sources":["../../../../packages/util/array/array.service.ts","../../../../packages/util/array/array-type.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AlainConfigService, AlainUtilArrayConfig } from '@delon/util/config';\nimport { NzTreeNode } from 'ng-zorro-antd/core/tree';\nimport {\n  ArrayServiceArrToTreeNodeOptions,\n  ArrayServiceArrToTreeOptions,\n  ArrayServiceGetKeysByTreeNodeOptions,\n  ArrayServiceGroupByResult,\n  ArrayServiceTreeToArrOptions,\n} from './array-type.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ArrayService {\n  private c: AlainUtilArrayConfig;\n\n  constructor(cog: AlainConfigService) {\n    this.c = cog.merge('utilArray', {\n      deepMapName: 'deep',\n      parentMapName: 'parent',\n      idMapName: 'id',\n      parentIdMapName: 'parent_id',\n      childrenMapName: 'children',\n      titleMapName: 'title',\n      checkedMapname: 'checked',\n      selectedMapname: 'selected',\n      expandedMapname: 'expanded',\n      disabledMapname: 'disabled',\n    })!;\n  }\n\n  /**\n   * 将树结构转换成数组结构\n   */\n  treeToArr(tree: any[], options?: ArrayServiceTreeToArrOptions): any[] {\n    const opt = {\n      deepMapName: this.c.deepMapName,\n      parentMapName: this.c.parentMapName,\n      childrenMapName: this.c.childrenMapName,\n      clearChildren: true,\n      cb: null,\n      ...options,\n    } as ArrayServiceTreeToArrOptions;\n    const result: any[] = [];\n    const inFn = (list: any[], parent: any, deep: number = 0) => {\n      for (const i of list) {\n        i[opt.deepMapName!] = deep;\n        i[opt.parentMapName!] = parent;\n        if (opt.cb) {\n          opt.cb(i, parent, deep);\n        }\n        result.push(i);\n        const children = i[opt.childrenMapName!];\n        if (children != null && Array.isArray(children) && children.length > 0) {\n          inFn(children, i, deep + 1);\n        }\n        if (opt.clearChildren) {\n          delete i[opt.childrenMapName!];\n        }\n      }\n    };\n    inFn(tree, 1);\n    return result;\n  }\n\n  /**\n   * 数组转换成树数据\n   */\n  arrToTree(arr: any[], options?: ArrayServiceArrToTreeOptions): any[] {\n    const opt = {\n      idMapName: this.c.idMapName,\n      parentIdMapName: this.c.parentIdMapName,\n      childrenMapName: this.c.childrenMapName,\n      cb: null,\n      ...options,\n    } as ArrayServiceArrToTreeOptions;\n    if (arr.length === 0) {\n      return [];\n    }\n    const tree: any[] = [];\n    const childrenOf: any = {};\n    let rootPid = opt.rootParentIdValue;\n    if (!rootPid) {\n      const pids = arr.map(i => i[opt.parentIdMapName!]);\n      const emptyPid = pids.findIndex(w => w == null);\n      rootPid = emptyPid !== -1 ? pids[emptyPid] : pids.sort()[0];\n    }\n    for (const item of arr) {\n      const id = item[opt.idMapName!];\n      const pid = item[opt.parentIdMapName!];\n      childrenOf[id] = childrenOf[id] || [];\n      item[opt.childrenMapName!] = childrenOf[id];\n      if (opt.cb) {\n        opt.cb(item);\n      }\n      if (pid !== rootPid) {\n        childrenOf[pid] = childrenOf[pid] || [];\n        childrenOf[pid].push(item);\n      } else {\n        tree.push(item);\n      }\n    }\n    return tree;\n  }\n\n  /**\n   * 数组转换成 `nz-tree` 数据源，通过 `options` 转化项名，也可以使用 `options.cb` 更高级决定数据项\n   */\n  arrToTreeNode(arr: any[], options?: ArrayServiceArrToTreeNodeOptions): NzTreeNode[] {\n    const opt = {\n      idMapName: this.c.idMapName,\n      parentIdMapName: this.c.parentIdMapName,\n      titleMapName: this.c.titleMapName,\n      isLeafMapName: 'isLeaf',\n      checkedMapname: this.c.checkedMapname,\n      selectedMapname: this.c.selectedMapname,\n      expandedMapname: this.c.expandedMapname,\n      disabledMapname: this.c.disabledMapname,\n      cb: null,\n      ...options,\n    } as ArrayServiceArrToTreeNodeOptions;\n    const tree = this.arrToTree(arr, {\n      idMapName: opt.idMapName,\n      parentIdMapName: opt.parentIdMapName,\n      childrenMapName: 'children',\n    });\n    this.visitTree(tree, (item: any, parent: any, deep: number) => {\n      item.key = item[opt.idMapName!];\n      item.title = item[opt.titleMapName!];\n      item.checked = item[opt.checkedMapname!];\n      item.selected = item[opt.selectedMapname!];\n      item.expanded = item[opt.expandedMapname!];\n      item.disabled = item[opt.disabledMapname!];\n      if (item[opt.isLeafMapName!] == null) {\n        item.isLeaf = item.children.length === 0;\n      } else {\n        item.isLeaf = item[opt.isLeafMapName!];\n      }\n      if (opt.cb) {\n        opt.cb(item, parent, deep);\n      }\n    });\n    return tree.map(node => new NzTreeNode(node));\n  }\n\n  /**\n   * 递归访问整个树\n   */\n  visitTree(\n    tree: any[],\n    cb: (item: any, parent: any, deep: number) => void,\n    options?: {\n      /** 子项名，默认：`'children'` */\n      childrenMapName?: string;\n    },\n  ): void {\n    options = {\n      childrenMapName: this.c.childrenMapName,\n      ...options,\n    };\n    const inFn = (data: any[], parent: any, deep: number) => {\n      for (const item of data) {\n        cb(item, parent, deep);\n        const childrenVal = item[options!.childrenMapName!];\n        if (childrenVal && childrenVal.length > 0) {\n          inFn(childrenVal, item, deep + 1);\n        }\n      }\n    };\n    inFn(tree, null, 1);\n  }\n\n  /**\n   * 获取所有已经选中的 `key` 值\n   */\n  getKeysByTreeNode(tree: NzTreeNode[], options?: ArrayServiceGetKeysByTreeNodeOptions): any[] {\n    const opt = {\n      includeHalfChecked: true,\n      ...options,\n    } as ArrayServiceGetKeysByTreeNodeOptions;\n    const keys: any[] = [];\n    this.visitTree(tree, (item: NzTreeNode, parent: NzTreeNode, deep: number) => {\n      if (item.isChecked || (opt.includeHalfChecked && item.isHalfChecked)) {\n        keys.push(opt.cb ? opt.cb(item, parent, deep) : opt.keyMapName ? item.origin[opt.keyMapName] : item.key);\n      }\n    });\n    return keys;\n  }\n  private baseFlat(array: any[], depth: number, result: any[] = []): any[] {\n    let index = -1;\n    while (++index < array.length) {\n      const value = array[index];\n      if (depth > 0 && Array.isArray(value)) {\n        if (depth > 1) {\n          this.baseFlat(value, depth - 1, result);\n        } else {\n          let pushIndex = -1;\n          const offset = result.length;\n\n          while (++pushIndex < value.length) {\n            result[offset + pushIndex] = value[pushIndex];\n          }\n        }\n      } else {\n        result[result.length] = value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Recursively flattens array\n   *\n   * 递归扁平数组\n   * ```ts\n   * srv.flat([1, [2, 3, [4, 5, [6]]]]) => [1,2,3,4,5,6]\n   * srv.flat([1, [2, 3, [4, 5, [6]]]], 1) => [1,2,3,[4, 5, [6]]]\n   * ```\n   */\n  flat<T>(array: ReadonlyArray<T>, depth: number = 1 / 0): ReadonlyArray<T> {\n    return Array.isArray(array) ? this.baseFlat(array as any[], depth) : array;\n  }\n  /**\n   * Group the array\n   *\n   * 对数组进行分组\n   * ```ts\n   * srv.groupBy([6.1, 4.2, 6.3], Math.floor) => {\"4\":[4.2],\"6\":[6.1,6.3]}\n   * srv.groupBy(['one', 'two', 'three'], v => v.length) => {\"3\":[\"one\",\"two\"],\"5\":[\"three\"]}\n   * ```\n   */\n  groupBy<T>(array: ReadonlyArray<T>, iteratee: (value: T) => string | number): ArrayServiceGroupByResult {\n    if (!Array.isArray(array)) {\n      return {};\n    }\n    return array.reduce((result, value) => {\n      const key = iteratee(value);\n      if (Object.prototype.hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        result[key] = [value];\n      }\n      return result;\n    }, {} as ArrayServiceGroupByResult);\n  }\n  /**\n   * Creates a duplicate-free version of an array\n   *\n   * 创建去重后的数组\n   * ```ts\n   * uniq([1, 2, 2, 3, 1]) => [1,2,3]\n   * uniq([{ a: 1 }, { a: 1 }, { a: 2 }], 'a') => [{\"a\":1},{\"a\":2}]\n   * uniq([{ a: 1 }, { a: 1 }, { a: 2 }], i => (i.a === 1 ? 'a' : 'b')) => [{\"a\":1},{\"a\":2}]\n   * ```\n   */\n  uniq<T>(array: ReadonlyArray<T>, predicate?: string | ((value: T) => string | number | boolean)): ReadonlyArray<T> {\n    return Array.from(\n      array\n        .reduce((map, value) => {\n          const key = predicate ? (typeof predicate === 'string' ? (value as any)[predicate] : predicate!(value)) : value;\n          if (!map.has(key)) {\n            map.set(key, value);\n          }\n          return map;\n        }, new Map<string | number | boolean, T>())\n        .values(),\n    );\n  }\n}\n","import { NzTreeNode } from 'ng-zorro-antd/core/tree';\n\nexport interface ArrayServiceTreeToArrOptions {\n  /** 深度项名，默认：`'deep'` */\n  deepMapName?: string;\n  /** 扁平后数组的父数据项名，默认：`'parent'` */\n  parentMapName?: string;\n  /** 源数据子项名，默认：`'children'` */\n  childrenMapName?: string;\n  /** 是否移除 `children` 节点，默认：`true` */\n  clearChildren?: boolean;\n  /** 转换成数组结构时回调 */\n  cb?: (item: any, parent: any, deep: number) => void;\n}\n\nexport interface ArrayServiceArrToTreeOptions {\n  /** 编号项名，默认：`'id'` */\n  idMapName?: string;\n  /** 父编号项名，默认：`'parent_id'` */\n  parentIdMapName?: string;\n  /**\n   * 根父编号值，默认会自动计算得到最合适的根父编号值，例如：\n   * @example\n   * ```ts\n   * const res = srv.arrToTree([\n   *    { id: 2, parent_id: 'a', title: 'c1' },\n   *    { id: 4, parent_id: 2, title: 't1' },\n   *  ],\n   *  { rootParentValue: 'a' });\n   * ```\n   */\n  rootParentIdValue?: any;\n  /** 子项名，默认：`'children'` */\n  childrenMapName?: string;\n  /** 转换成树数据时回调 */\n  cb?: (item: any) => void;\n}\n\nexport interface ArrayServiceArrToTreeNodeOptions {\n  /** 编号项名，默认：`'id'` */\n  idMapName?: string;\n  /** 父编号项名，默认：`'parent_id'` */\n  parentIdMapName?: string;\n  /** 标题项名，默认：`'title'` */\n  titleMapName?: string;\n  /** 设置为叶子节点项名，若数据源不存在时自动根据 `children` 值决定是否为叶子节点，默认：`'isLeaf'` */\n  isLeafMapName?: string;\n  /** 节点 Checkbox 是否选中项名，默认：`'checked'` */\n  checkedMapname?: string;\n  /** 节点本身是否选中项名，默认：`'selected'` */\n  selectedMapname?: string;\n  /** 节点是否展开(叶子节点无效)项名，默认：`'expanded'` */\n  expandedMapname?: string;\n  /** 设置是否禁用节点(不可进行任何操作)项名，默认：`'disabled'` */\n  disabledMapname?: string;\n  /** 转换成树数据后，执行的递归回调 */\n  cb?: (item: any, parent: any, deep: number) => void;\n}\n\nexport interface ArrayServiceGetKeysByTreeNodeOptions {\n  /** 是否包含半选状态的值，默认：`true` */\n  includeHalfChecked?: boolean;\n  /** 是否重新指定 `key` 键名，若不指定表示使用 `NzTreeNode.key` 值 */\n  keyMapName?: string;\n  /** 回调，返回一个值 `key` 值，优先级高于其他 */\n  cb?: (item: NzTreeNode, parent: NzTreeNode, deep: number) => any;\n}\n\nexport interface ArrayServiceGroupByResult {\n  [key: string]: any;\n  [key: number]: any;\n}\n"],"names":[],"mappings":";;;;;;;;;MAYa,YAAY;;;;IAGvB,YAAY,GAAuB;QACjC,IAAI,CAAC,CAAC,sBAAG,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE;YAC9B,WAAW,EAAE,MAAM;YACnB,aAAa,EAAE,QAAQ;YACvB,SAAS,EAAE,IAAI;YACf,eAAe,EAAE,WAAW;YAC5B,eAAe,EAAE,UAAU;YAC3B,YAAY,EAAE,OAAO;YACrB,cAAc,EAAE,SAAS;YACzB,eAAe,EAAE,UAAU;YAC3B,eAAe,EAAE,UAAU;YAC3B,eAAe,EAAE,UAAU;SAC5B,CAAC,EAAC,CAAC;KACL;;;;;;;IAKD,SAAS,CAAC,IAAW,EAAE,OAAsC;;cACrD,GAAG,sCACP,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,WAAW,EAC/B,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,aAAa,EACnC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,EACvC,aAAa,EAAE,IAAI,EACnB,EAAE,EAAE,IAAI,IACL,OAAO,GACqB;;cAC3B,MAAM,GAAU,EAAE;;cAClB,IAAI;;;;;;QAAG,CAAC,IAAW,EAAE,MAAW,EAAE,OAAe,CAAC;YACtD,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;gBACpB,CAAC,oBAAC,GAAG,CAAC,WAAW,GAAE,GAAG,IAAI,CAAC;gBAC3B,CAAC,oBAAC,GAAG,CAAC,aAAa,GAAE,GAAG,MAAM,CAAC;gBAC/B,IAAI,GAAG,CAAC,EAAE,EAAE;oBACV,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;iBACzB;gBACD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;sBACT,QAAQ,GAAG,CAAC,oBAAC,GAAG,CAAC,eAAe,GAAE;gBACxC,IAAI,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;oBACtE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;iBAC7B;gBACD,IAAI,GAAG,CAAC,aAAa,EAAE;oBACrB,OAAO,CAAC,oBAAC,GAAG,CAAC,eAAe,GAAE,CAAC;iBAChC;aACF;SACF,CAAA;QACD,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACd,OAAO,MAAM,CAAC;KACf;;;;;;;IAKD,SAAS,CAAC,GAAU,EAAE,OAAsC;;cACpD,GAAG,sCACP,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,SAAS,EAC3B,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,EACvC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,EACvC,EAAE,EAAE,IAAI,IACL,OAAO,GACqB;QACjC,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,OAAO,EAAE,CAAC;SACX;;cACK,IAAI,GAAU,EAAE;;cAChB,UAAU,GAAQ,EAAE;;YACtB,OAAO,GAAG,GAAG,CAAC,iBAAiB;QACnC,IAAI,CAAC,OAAO,EAAE;;kBACN,IAAI,GAAG,GAAG,CAAC,GAAG;;;;YAAC,CAAC,IAAI,CAAC,oBAAC,GAAG,CAAC,eAAe,GAAE,EAAC;;kBAC5C,QAAQ,GAAG,IAAI,CAAC,SAAS;;;;YAAC,CAAC,IAAI,CAAC,IAAI,IAAI,EAAC;YAC/C,OAAO,GAAG,QAAQ,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC7D;QACD,KAAK,MAAM,IAAI,IAAI,GAAG,EAAE;;kBAChB,EAAE,GAAG,IAAI,oBAAC,GAAG,CAAC,SAAS,GAAE;;kBACzB,GAAG,GAAG,IAAI,oBAAC,GAAG,CAAC,eAAe,GAAE;YACtC,UAAU,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;YACtC,IAAI,oBAAC,GAAG,CAAC,eAAe,GAAE,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;YAC5C,IAAI,GAAG,CAAC,EAAE,EAAE;gBACV,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;aACd;YACD,IAAI,GAAG,KAAK,OAAO,EAAE;gBACnB,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBACxC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5B;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACjB;SACF;QACD,OAAO,IAAI,CAAC;KACb;;;;;;;IAKD,aAAa,CAAC,GAAU,EAAE,OAA0C;;cAC5D,GAAG,sCACP,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,SAAS,EAC3B,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,EACvC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,YAAY,EACjC,aAAa,EAAE,QAAQ,EACvB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC,cAAc,EACrC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,EACvC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,EACvC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,EACvC,EAAE,EAAE,IAAI,IACL,OAAO,GACyB;;cAC/B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE;YAC/B,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,eAAe,EAAE,GAAG,CAAC,eAAe;YACpC,eAAe,EAAE,UAAU;SAC5B,CAAC;QACF,IAAI,CAAC,SAAS,CAAC,IAAI;;;;;;QAAE,CAAC,IAAS,EAAE,MAAW,EAAE,IAAY;YACxD,IAAI,CAAC,GAAG,GAAG,IAAI,oBAAC,GAAG,CAAC,SAAS,GAAE,CAAC;YAChC,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAC,GAAG,CAAC,YAAY,GAAE,CAAC;YACrC,IAAI,CAAC,OAAO,GAAG,IAAI,oBAAC,GAAG,CAAC,cAAc,GAAE,CAAC;YACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAC,GAAG,CAAC,eAAe,GAAE,CAAC;YAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAC,GAAG,CAAC,eAAe,GAAE,CAAC;YAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAC,GAAG,CAAC,eAAe,GAAE,CAAC;YAC3C,IAAI,IAAI,oBAAC,GAAG,CAAC,aAAa,GAAE,IAAI,IAAI,EAAE;gBACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;aAC1C;iBAAM;gBACL,IAAI,CAAC,MAAM,GAAG,IAAI,oBAAC,GAAG,CAAC,aAAa,GAAE,CAAC;aACxC;YACD,IAAI,GAAG,CAAC,EAAE,EAAE;gBACV,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aAC5B;SACF,EAAC,CAAC;QACH,OAAO,IAAI,CAAC,GAAG;;;;QAAC,IAAI,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,EAAC,CAAC;KAC/C;;;;;;;;IAKD,SAAS,CACP,IAAW,EACX,EAAkD,EAClD,OAGC;QAED,OAAO,mBACL,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,eAAe,IACpC,OAAO,CACX,CAAC;;cACI,IAAI;;;;;;QAAG,CAAC,IAAW,EAAE,MAAW,EAAE,IAAY;YAClD,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;gBACvB,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;;sBACjB,WAAW,GAAG,IAAI,oBAAC,mBAAA,OAAO,GAAE,eAAe,GAAE;gBACnD,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;iBACnC;aACF;SACF,CAAA;QACD,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;KACrB;;;;;;;IAKD,iBAAiB,CAAC,IAAkB,EAAE,OAA8C;;cAC5E,GAAG,sCACP,kBAAkB,EAAE,IAAI,IACrB,OAAO,GAC6B;;cACnC,IAAI,GAAU,EAAE;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI;;;;;;QAAE,CAAC,IAAgB,EAAE,MAAkB,EAAE,IAAY;YACtE,IAAI,IAAI,CAAC,SAAS,KAAK,GAAG,CAAC,kBAAkB,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;gBACpE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;aAC1G;SACF,EAAC,CAAC;QACH,OAAO,IAAI,CAAC;KACb;;;;;;;;IACO,QAAQ,CAAC,KAAY,EAAE,KAAa,EAAE,SAAgB,EAAE;;YAC1D,KAAK,GAAG,CAAC,CAAC;QACd,OAAO,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE;;kBACvB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YAC1B,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrC,IAAI,KAAK,GAAG,CAAC,EAAE;oBACb,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;iBACzC;qBAAM;;wBACD,SAAS,GAAG,CAAC,CAAC;;0BACZ,MAAM,GAAG,MAAM,CAAC,MAAM;oBAE5B,OAAO,EAAE,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE;wBACjC,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;qBAC/C;iBACF;aACF;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;aAC/B;SACF;QACD,OAAO,MAAM,CAAC;KACf;;;;;;;;;;;;;;IAUD,IAAI,CAAI,KAAuB,EAAE,QAAgB,CAAC,GAAG,CAAC;QACpD,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,oBAAC,KAAK,IAAW,KAAK,CAAC,GAAG,KAAK,CAAC;KAC5E;;;;;;;;;;;;;;IAUD,OAAO,CAAI,KAAuB,EAAE,QAAuC;QACzE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzB,OAAO,EAAE,CAAC;SACX;QACD,OAAO,KAAK,CAAC,MAAM;;;;;QAAC,CAAC,MAAM,EAAE,KAAK;;kBAC1B,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC;YAC3B,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;gBACrD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzB;iBAAM;gBACL,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACvB;YACD,OAAO,MAAM,CAAC;SACf,sBAAE,EAAE,GAA8B,CAAC;KACrC;;;;;;;;;;;;;;;IAWD,IAAI,CAAI,KAAuB,EAAE,SAA8D;QAC7F,OAAO,KAAK,CAAC,IAAI,CACf,KAAK;aACF,MAAM;;;;;QAAC,CAAC,GAAG,EAAE,KAAK;;kBACX,GAAG,GAAG,SAAS,IAAI,OAAO,SAAS,KAAK,QAAQ,GAAG,oBAAC,KAAK,IAAS,SAAS,CAAC,GAAG,mBAAA,SAAS,GAAE,KAAK,CAAC,IAAI,KAAK;YAC/G,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACjB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACrB;YACD,OAAO,GAAG,CAAC;SACZ,GAAE,IAAI,GAAG,EAAgC,CAAC;aAC1C,MAAM,EAAE,CACZ,CAAC;KACH;;;YA9PF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;YAVzB,kBAAkB;;;;;;;;IAYzB,yBAAgC;;;;;;;;;;;2CCAjC;;;;;;IATC,mDAAqB;;;;;IAErB,qDAAuB;;;;;IAEvB,uDAAyB;;;;;IAEzB,qDAAwB;;;;;IAExB,0CAAoD;;;;;2CAwBrD;;;;;;IAnBC,iDAAmB;;;;;IAEnB,uDAAyB;;;;;;;;;;;;;IAYzB,yDAAwB;;;;;IAExB,uDAAyB;;;;;IAEzB,0CAAyB;;;;;+CAsB1B;;;;;;IAjBC,qDAAmB;;;;;IAEnB,2DAAyB;;;;;IAEzB,wDAAsB;;;;;IAEtB,yDAAuB;;;;;IAEvB,0DAAwB;;;;;IAExB,2DAAyB;;;;;IAEzB,2DAAyB;;;;;IAEzB,2DAAyB;;;;;IAEzB,8CAAoD;;;;;mDAUrD;;;;;;IALC,kEAA6B;;;;;IAE7B,0DAAoB;;;;;IAEpB,kDAAiE;;;;;;;;;;;;;;;;;;;;;"}