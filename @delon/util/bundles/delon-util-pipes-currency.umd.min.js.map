{"version":3,"sources":["../../../../packages/util/pipes/currency/mega.pipe.ts","../../../../packages/util/pipes/currency/price.pipe.ts","../../../../packages/util/pipes/currency/cny.pipe.ts","../../../../packages/util/pipes/currency/module.ts"],"names":["CurrencyMegaPipe","srv","locale","this","isCN","startsWith","prototype","transform","value","options","res","mega","unitI18n","unit","i0","ɵɵdirectiveInject","i1","CurrencyService","LOCALE_ID","pure","Pipe","name","Inject","CurrencyPricePipe","format","CurrencyCNYPipe","cny","PIPES","CurrencyPipeModule","declarations","exports","NgModule"],"mappings":"2gBAME,SAAAA,EAAoBC,EAAyCC,GAAzCC,KAAAF,IAAAA,EADZE,KAAAC,MAAO,EAEbD,KAAKC,KAAOF,EAAOG,WAAW,aAQhCL,EAAAM,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,IAAMC,EAAMP,KAAKF,IAAIU,KAAKH,EAAOC,GACjC,OAAOC,EAAIF,OAASL,KAAKC,KAAOM,EAAIE,SAAWF,EAAIG,6CAb1Cb,GAAgBc,EAAAC,kBAAAC,EAAAC,iBAAAH,EAAAC,kBAEuBG,EAAAA,sDAFvClB,EAAgBmB,MAAA,oEAAhBnB,EAAgB,CAAA,MAD5BoB,EAAAA,WAAK,CAAEC,KAAM,sFAG+BC,EAAAA,aAAOJ,EAAAA,wCCDlD,SAAAK,EAAoBtB,GAAAE,KAAAF,IAAAA,SAUpBsB,EAAAjB,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,OAAON,KAAKF,IAAIuB,OAAOhB,EAAOC,0CAZrBc,GAAiBT,EAAAC,kBAAAC,EAAAC,6DAAjBM,EAAiBJ,MAAA,oEAAjBI,EAAiB,CAAA,MAD7BH,EAAAA,WAAK,CAAEC,KAAM,kFCEZ,SAAAI,EAAoBxB,GAAAE,KAAAF,IAAAA,SAOpBwB,EAAAnB,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,OAAON,KAAKF,IAAIyB,IAAIlB,EAAOC,0CATlBgB,GAAeX,EAAAC,kBAAAC,EAAAC,2DAAfQ,EAAeN,MAAA,oEAAfM,EAAe,CAAA,MAD3BL,EAAAA,WAAK,CAAEC,KAAM,+DCEd,IAAMM,EAAQ,CAAC3B,EAAkBuB,EAAmBE,KAMpD,6CAAaG,iEAAAA,uEAAAA,EAAkB,CAAAC,aAAA,CANhB7B,EAAkBuB,EAAmBE,GAAeK,QAAA,CAApD9B,EAAkBuB,EAAmBE,qEAMvCG,EAAkB,CAAA,MAJ9BG,EAAAA,eAAS,CACRF,aAAcF,EACdG,QAASH","sourcesContent":["import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyMegaOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'mega' })\nexport class CurrencyMegaPipe implements PipeTransform {\n  private isCN = false;\n  constructor(private srv: CurrencyService, @Inject(LOCALE_ID) locale: string) {\n    this.isCN = locale.startsWith('zh');\n  }\n\n  /**\n   * Large number format filter\n   *\n   * 大数据格式化\n   */\n  transform(value: number | string, options?: CurrencyMegaOptions): string {\n    const res = this.srv.mega(value, options);\n    return res.value + (this.isCN ? res.unitI18n : res.unit);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyFormatOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'price' })\nexport class CurrencyPricePipe implements PipeTransform {\n  constructor(private srv: CurrencyService) {}\n  /**\n   * Format a number with commas as thousands separators\n   *\n   * 格式化货币，用逗号将数字格式化为千位分隔符\n   * ```ts\n   * 10000 => `10,000`\n   * 10000.567 => `10,000.57`\n   * ```\n   */\n  transform(value: number | string, options?: CurrencyFormatOptions): string {\n    return this.srv.format(value, options);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyCNYOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'cny' })\nexport class CurrencyCNYPipe implements PipeTransform {\n  constructor(private srv: CurrencyService) {}\n\n  /**\n   * Converted into RMB notation.\n   *\n   * 转化成人民币表示法\n   */\n  transform(value: number | string, options?: CurrencyCNYOptions): string {\n    return this.srv.cny(value, options);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CurrencyCNYPipe } from './cny.pipe';\nimport { CurrencyMegaPipe } from './mega.pipe';\nimport { CurrencyPricePipe } from './price.pipe';\n\nconst PIPES = [CurrencyMegaPipe, CurrencyPricePipe, CurrencyCNYPipe];\n\n@NgModule({\n  declarations: PIPES,\n  exports: PIPES,\n})\nexport class CurrencyPipeModule {}\n"]}