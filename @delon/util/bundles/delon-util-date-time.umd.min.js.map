{"version":3,"sources":["../../../../packages/util/date-time/time.ts","../../../../packages/util/date-time/picker.ts"],"names":["fixEndTimeOfRange","dates","startOfDay","endOfDay","DateTimePickerUtil","Object","defineProperty","prototype","Date","this","removeTime","now","d","toDateString","format","formatString","genTick","count","Array","fill","map","_","idx","getDiffDays","dateLeft","dateRight","differenceInCalendarDays","addDays","date","disabledBeforeDate","options","_this","offsetDays","disabledAfterDate","baseDisabledTime","type","offsetSeconds","tick24","tick60","current","cur","addSeconds","nowHours","getHours","nowMinutes","getMinutes","curHours","isToday","nzDisabledHours","slice","nzDisabledMinutes","nzDisabledSeconds","nowSeconds","getSeconds","disabledBeforeTime","disabledAfterTime","dateTimePickerUtil","time","parse","res","weekStartsOn","startOfWeek","endOfWeek","subWeeks","startOfMonth","endOfMonth","subMonths","startOfYear","endOfYear","subYears","value","_a","assign","defaultValue","NaN","test","tryDate","parseISO","isNaN"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  endOfDay,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  parse,\n  parseISO,\n  startOfDay,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  subMonths,\n  subWeeks,\n  subYears,\n} from 'date-fns';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n/**\n * Get the time range, return `[ Date, Date]` for the start and end dates\n *\n * 获取时间范围\n * @param type 类型，带 `-` 表示过去一个时间，若指定 `number` 表示天数\n * @param time 开始时间\n */\nexport function getTimeDistance(\n  type: 'today' | '-today' | 'yesterday' | 'week' | '-week' | 'month' | '-month' | 'year' | '-year' | number,\n  time?: Date | string | number,\n): [Date, Date] {\n  time = time ? (typeof time === 'string' ? parse(time, 'yyyy-MM-dd HH:mm:ss', new Date()) : new Date(time)) : new Date();\n  const options: { weekStartsOn: 1 } = { weekStartsOn: 1 };\n\n  let res: [Date, Date];\n  switch (type) {\n    case 'today':\n      res = [time, time];\n      break;\n    case '-today':\n      res = [addDays(time, -1), time];\n      break;\n    case 'yesterday':\n      res = [addDays(time, -1), addDays(time, -1)];\n      break;\n    case 'week':\n      res = [startOfWeek(time, options), endOfWeek(time, options)];\n      break;\n    case '-week':\n      res = [startOfWeek(subWeeks(time, 1), options), endOfWeek(subWeeks(time, 1), options)];\n      break;\n    case 'month':\n      res = [startOfMonth(time), endOfMonth(time)];\n      break;\n    case '-month':\n      res = [startOfMonth(subMonths(time, 1)), endOfMonth(subMonths(time, 1))];\n      break;\n    case 'year':\n      res = [startOfYear(time), endOfYear(time)];\n      break;\n    case '-year':\n      res = [startOfYear(subYears(time, 1)), endOfYear(subYears(time, 1))];\n      break;\n    default:\n      res = type > 0 ? [time, addDays(time, type)] : [addDays(time, type), time];\n      break;\n  }\n  return fixEndTimeOfRange(res);\n}\n\n/**\n * fix time is the most, big value\n */\nexport function fixEndTimeOfRange(dates: [Date, Date]): [Date, Date] {\n  return [startOfDay(dates[0]), endOfDay(dates[1])];\n}\n\nexport type ToDateOptions = string | { formatString?: string; defaultValue?: NzSafeAny };\n\n/**\n * Return the date parsed from string using the given format string\n * - If the argument is a number, it is treated as a timestamp.\n * @param formatString If parsing fails try to parse the date by pressing `formatString`\n * @param defaultValue If parsing fails returned default value, default: `new Date(NaN)`\n */\nexport function toDate(value: Date | string | number, options?: ToDateOptions): Date {\n  if (typeof options === 'string') options = { formatString: options };\n  const { formatString, defaultValue } = { formatString: 'yyyy-MM-dd HH:mm:ss', defaultValue: new Date(NaN), ...options };\n  if (value == null) {\n    return defaultValue;\n  }\n  if (value instanceof Date) {\n    return value;\n  }\n  if (typeof value === 'number' || (typeof value === 'string' && /[0-9]{10,13}/.test(value))) {\n    return new Date(+value);\n  }\n  let tryDate = parseISO(value);\n  if (isNaN(tryDate as NzSafeAny)) {\n    tryDate = parse(value, formatString!, new Date());\n  }\n\n  return isNaN(tryDate as NzSafeAny) ? defaultValue : tryDate;\n}\n","import { addDays, addSeconds, differenceInCalendarDays, format } from 'date-fns';\nimport { DisabledDateFn, DisabledTimeConfig, DisabledTimeFn } from 'ng-zorro-antd/date-picker';\n\n// TODO: timezone process\nexport class DateTimePickerUtil {\n  /**\n   * Current local time\n   *\n   * 当前本地时间\n   */\n  get now(): Date {\n    return new Date();\n  }\n  /**\n   * Current local date (not including time part)\n   *\n   * 当前本地日期（不包含时间部分）\n   */\n  get date(): Date {\n    return this.removeTime(this.now);\n  }\n  /**\n   * Remove the time part of the date\n   *\n   * 移除日期的时间部分\n   */\n  removeTime(d: Date): Date {\n    return new Date(d.toDateString());\n  }\n  /**\n   * Format date-time\n   *\n   * 格式化日期\n   */\n  format(d: number | Date, formatString: string = 'yyyy-MM-dd HH:mm:ss'): string {\n    return format(d, formatString);\n  }\n  private genTick(count: number): number[] {\n    return new Array(count).fill(0).map((_, idx) => idx);\n  }\n  /**\n   * Calculate the number of days between two dates, `0` means the same day\n   *\n   * 计算两个日期相差天数，`0` 表示同一天\n   */\n  getDiffDays(dateLeft: Date | number, dateRight?: Date | number): number {\n    return differenceInCalendarDays(dateLeft, typeof dateRight === 'number' ? addDays(this.date, dateRight) : dateRight || this.date);\n  }\n  /**\n   * Disabled Before date (Default: today), Generally serves `nzDisabledDate`\n   *\n   * 禁用之前日期（默认：今天），一般服务于 `nzDisabledDate`\n   */\n  disabledBeforeDate(options?: { offsetDays?: Date | number }): DisabledDateFn {\n    return (d): boolean => this.getDiffDays(d, options?.offsetDays) < 0;\n  }\n  /**\n   * Disabled After date (Default: today), Generally serves `nzDisabledDate`\n   *\n   * 禁用之后日期（默认：今天），一般服务于 `nzDisabledDate`\n   */\n  disabledAfterDate(options?: { offsetDays?: Date | number }): DisabledDateFn {\n    return (d): boolean => this.getDiffDays(d, options?.offsetDays) > 0;\n  }\n  private baseDisabledTime(type: 'before' | 'after', offsetSeconds?: number): DisabledTimeFn {\n    const tick24 = this.genTick(24);\n    const tick60 = this.genTick(60);\n    return (current): DisabledTimeConfig => {\n      const cur = current as Date;\n      if (cur == null) {\n        return {} as any;\n      }\n      const now = addSeconds(this.now, offsetSeconds || 0);\n      const nowHours = now.getHours();\n      const nowMinutes = now.getMinutes();\n      const curHours = cur.getHours();\n      const isToday = this.getDiffDays(this.removeTime(cur)) === 0;\n      return {\n        nzDisabledHours: () => {\n          if (!isToday) return [];\n          return type === 'before' ? tick24.slice(0, nowHours) : tick24.slice(nowHours + 1);\n        },\n        nzDisabledMinutes: () => {\n          if (isToday && curHours === nowHours) {\n            return type === 'before' ? tick60.slice(0, nowMinutes) : tick60.slice(nowMinutes + 1);\n          }\n          return [];\n        },\n        nzDisabledSeconds: () => {\n          if (isToday && curHours === nowHours && cur.getMinutes() === nowMinutes) {\n            const nowSeconds = now.getSeconds();\n            return type === 'before' ? tick60.slice(0, nowSeconds) : tick60.slice(nowSeconds + 1);\n          }\n          return [];\n        },\n      };\n    };\n  }\n  /**\n   * Disabled Before time (Default: now), Generally serves `nzDisabledTime`\n   *\n   * 禁用之前时间（默认：现在），一般服务于 `nzDisabledTime`\n   */\n  disabledBeforeTime(options?: { offsetSeconds?: number }): DisabledTimeFn {\n    return this.baseDisabledTime('before', options?.offsetSeconds);\n  }\n  /**\n   * Disabled After time (Default: now), Generally serves `nzDisabledTime`\n   *\n   * 禁用之后时间（默认：现在），一般服务于 `nzDisabledTime`\n   */\n  disabledAfterTime(options?: { offsetSeconds?: number }): DisabledTimeFn {\n    return this.baseDisabledTime('after', options?.offsetSeconds);\n  }\n}\n\nexport const dateTimePickerUtil = new DateTimePickerUtil();\n"]}