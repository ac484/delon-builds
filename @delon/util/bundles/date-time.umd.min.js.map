{"version":3,"sources":["../../../../packages/util/date-time/time.ts"],"names":["fixEndTimeOfRange","dates","startOfDay","endOfDay","type","time","parse","Date","res","options","weekStartsOn","addDays","startOfWeek","endOfWeek","subWeeks","startOfMonth","endOfMonth","subMonths","startOfYear","endOfYear","subYears","value","formatString","_a","Object","assign","defaultValue","NaN","test","tryDate","parseISO","isNaN"],"mappings":"64CAmEgBA,EAAkBC,GAChC,MAAO,CAACC,EAAAA,QAAWD,EAAM,IAAKE,EAAAA,QAASF,EAAM,sDA9C7CG,EACAC,GAEAA,EAAOA,EAAwB,iBAATA,EAAoBC,EAAAA,QAAMD,EAAM,sBAAuB,IAAIE,MAAU,IAAIA,KAAKF,GAAS,IAAIE,SAG7GC,EAFEC,EAA+B,CAAEC,aAAc,GAGrD,OAAQN,GACN,IAAK,QACHI,EAAM,CAACH,EAAMA,GACb,MACF,IAAK,SACHG,EAAM,CAACG,EAAAA,QAAQN,GAAO,GAAIA,GAC1B,MACF,IAAK,YACHG,EAAM,CAACG,EAAAA,QAAQN,GAAO,GAAIM,EAAAA,QAAQN,GAAO,IACzC,MACF,IAAK,OACHG,EAAM,CAACI,EAAAA,QAAYP,EAAMI,GAAUI,EAAAA,QAAUR,EAAMI,IACnD,MACF,IAAK,QACHD,EAAM,CAACI,EAAAA,QAAYE,EAAAA,QAAST,EAAM,GAAII,GAAUI,EAAAA,QAAUC,EAAAA,QAAST,EAAM,GAAII,IAC7E,MACF,IAAK,QACHD,EAAM,CAACO,EAAAA,QAAaV,GAAOW,EAAAA,QAAWX,IACtC,MACF,IAAK,SACHG,EAAM,CAACO,EAAAA,QAAaE,EAAAA,QAAUZ,EAAM,IAAKW,EAAAA,QAAWC,EAAAA,QAAUZ,EAAM,KACpE,MACF,IAAK,OACHG,EAAM,CAACU,EAAAA,QAAYb,GAAOc,EAAAA,QAAUd,IACpC,MACF,IAAK,QACHG,EAAM,CAACU,EAAAA,QAAYE,EAAAA,QAASf,EAAM,IAAKc,EAAAA,QAAUC,EAAAA,QAASf,EAAM,KAChE,MACF,QACEG,EAAMJ,EAAO,EAAI,CAACC,EAAMM,EAAAA,QAAQN,EAAMD,IAAS,CAACO,EAAAA,QAAQN,EAAMD,GAAOC,GAGzE,OAAOL,EAAkBQ,sBAkBJa,EAA+BZ,GAC7B,iBAAZA,IAAsBA,EAAU,CAAEa,aAAcb,IACrD,IAAAc,EAAAC,OAAAC,OAAA,CAAmCH,aAAc,sBAAuBI,aAAc,IAAInB,KAAKoB,MAASlB,GAAtGa,EAAYC,EAAAD,aAAEI,EAAYH,EAAAG,aAClC,GAAa,MAATL,EACF,OAAOK,EAET,GAAIL,aAAiBd,KACnB,OAAOc,EAET,GAAqB,iBAAVA,GAAwC,iBAAVA,GAAsB,eAAeO,KAAKP,GACjF,OAAO,IAAId,MAAMc,OAEfQ,EAAUC,EAAAA,QAAST,GAKvB,OAJIU,MAAK,KACPF,EAAUvB,EAAAA,QAAMe,EAAK,EAAiB,IAAId,OAGrCwB,MAAK,GAAyBL,EAAeG","sourcesContent":["import addDays from 'date-fns/addDays';\nimport endOfDay from 'date-fns/endOfDay';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport endOfYear from 'date-fns/endOfYear';\nimport parse from 'date-fns/parse';\nimport parseISO from 'date-fns/parseISO';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport startOfYear from 'date-fns/startOfYear';\nimport subMonths from 'date-fns/subMonths';\nimport subWeeks from 'date-fns/subWeeks';\nimport subYears from 'date-fns/subYears';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n/**\n * 获取时间范围\n * @param type 类型，带 `-` 表示过去一个时间，若指定 `number` 表示天数\n * @param time 开始时间\n */\nexport function getTimeDistance(\n  type: 'today' | '-today' | 'yesterday' | 'week' | '-week' | 'month' | '-month' | 'year' | '-year' | number,\n  time?: Date | string | number,\n): [Date, Date] {\n  time = time ? (typeof time === 'string' ? parse(time, 'yyyy-MM-dd HH:mm:ss', new Date()) : new Date(time)) : new Date();\n  const options: { weekStartsOn: 1 } = { weekStartsOn: 1 };\n\n  let res: [Date, Date];\n  switch (type) {\n    case 'today':\n      res = [time, time];\n      break;\n    case '-today':\n      res = [addDays(time, -1), time];\n      break;\n    case 'yesterday':\n      res = [addDays(time, -1), addDays(time, -1)];\n      break;\n    case 'week':\n      res = [startOfWeek(time, options), endOfWeek(time, options)];\n      break;\n    case '-week':\n      res = [startOfWeek(subWeeks(time, 1), options), endOfWeek(subWeeks(time, 1), options)];\n      break;\n    case 'month':\n      res = [startOfMonth(time), endOfMonth(time)];\n      break;\n    case '-month':\n      res = [startOfMonth(subMonths(time, 1)), endOfMonth(subMonths(time, 1))];\n      break;\n    case 'year':\n      res = [startOfYear(time), endOfYear(time)];\n      break;\n    case '-year':\n      res = [startOfYear(subYears(time, 1)), endOfYear(subYears(time, 1))];\n      break;\n    default:\n      res = type > 0 ? [time, addDays(time, type)] : [addDays(time, type), time];\n      break;\n  }\n  return fixEndTimeOfRange(res);\n}\n\n/**\n * fix time is the most, big value\n */\nexport function fixEndTimeOfRange(dates: [Date, Date]): [Date, Date] {\n  return [startOfDay(dates[0]), endOfDay(dates[1])];\n}\n\nexport type ToDateOptions = string | { formatString?: string; defaultValue?: NzSafeAny };\n\n/**\n * Return the date parsed from string using the given format string\n * - If the argument is a number, it is treated as a timestamp.\n * @param formatString If parsing fails try to parse the date by pressing `formatString`\n * @param defaultValue If parsing fails returned default value, default: `new Date(NaN)`\n */\nexport function toDate(value: Date | string | number, options?: ToDateOptions): Date {\n  if (typeof options === 'string') options = { formatString: options };\n  const { formatString, defaultValue } = { formatString: 'yyyy-MM-dd HH:mm:ss', defaultValue: new Date(NaN), ...options };\n  if (value == null) {\n    return defaultValue;\n  }\n  if (value instanceof Date) {\n    return value;\n  }\n  if (typeof value === 'number' || (typeof value === 'string' && /[0-9]{10,13}/.test(value))) {\n    return new Date(+value);\n  }\n  let tryDate = parseISO(value);\n  if (isNaN(tryDate as NzSafeAny)) {\n    tryDate = parse(value, formatString!, new Date());\n  }\n\n  return isNaN(tryDate as NzSafeAny) ? defaultValue : tryDate;\n}\n"]}