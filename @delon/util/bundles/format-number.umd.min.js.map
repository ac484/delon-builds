{"version":3,"sources":["../../../../packages/util/pipes/currency/mega.pipe.ts","../../../../packages/util/pipes/currency/commas.pipe.ts","../../../../packages/util/pipes/currency/cny.pipe.ts","../../../../packages/util/pipes/currency/module.ts"],"names":["CurrencyMegaPipe","srv","locale","this","isCN","startsWith","prototype","transform","value","options","res","mega","unitI18n","unit","Pipe","args","name","CurrencyService","Inject","LOCALE_ID","CurrencyCommasPipe","commas","CurrencyCNYPipe","cny","PIPES","NgModule","declarations","exports"],"mappings":"2gBAME,SAAAA,EAAoBC,EAAyCC,GAAzCC,KAAAF,IAAAA,EADZE,KAAAC,MAAO,EAEbD,KAAKC,KAAOF,EAAOG,WAAW,aAQhCL,EAAAM,UAAAC,UAAA,SAAUC,EAAwBC,OAC1BC,EAAMP,KAAKF,IAAIU,KAAKH,EAAOC,GACjC,OAAOC,EAAIF,OAASL,KAAKC,KAAOM,EAAIE,SAAWF,EAAIG,gCAdtDC,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,4DAFgBC,EAAAA,gDAKeC,EAAAA,OAAMH,KAAA,CAACI,EAAAA,iCCDlD,SAAAC,EAAoBnB,GAAAE,KAAAF,IAAAA,SAMpBmB,EAAAd,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,OAAON,KAAKF,IAAIoB,OAAOb,EAAOC,6BATjCK,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,8DAFkBC,EAAAA,oCCI9B,SAAAK,EAAoBrB,GAAAE,KAAAF,IAAAA,SAOpBqB,EAAAhB,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,OAAON,KAAKF,IAAIsB,IAAIf,EAAOC,6BAV9BK,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,2DAFeC,EAAAA,uBCIvBO,EAAQ,CAACxB,EAAkBoB,EAAoBE,KAMrD,iCAJCG,EAAAA,SAAQV,KAAA,CAAC,CACRW,aAAcF,EACdG,QAASH","sourcesContent":["import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyMegaOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'currencyMega' })\nexport class CurrencyMegaPipe implements PipeTransform {\n  private isCN = false;\n  constructor(private srv: CurrencyService, @Inject(LOCALE_ID) locale: string) {\n    this.isCN = locale.startsWith('zh');\n  }\n\n  /**\n   * Large number format filter\n   *\n   * 大数据格式化\n   */\n  transform(value: number | string, options?: CurrencyMegaOptions): string {\n    const res = this.srv.mega(value, options);\n    return res.value + (this.isCN ? res.unitI18n : res.unit);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyCommasOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'currencyCommas' })\nexport class CurrencyCommasPipe implements PipeTransform {\n  constructor(private srv: CurrencyService) {}\n  /**\n   * Format a number with commas as thousands separators\n   *\n   * 用逗号将数字格式化为千位分隔符\n   */\n  transform(value: number | string, options?: CurrencyCommasOptions): string {\n    return this.srv.commas(value, options);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyCNYOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'currencyCNY' })\nexport class CurrencyCNYPipe implements PipeTransform {\n  constructor(private srv: CurrencyService) {}\n\n  /**\n   * Converted into RMB notation.\n   *\n   * 转化成人民币表示法\n   */\n  transform(value: number | string, options?: CurrencyCNYOptions): string {\n    return this.srv.cny(value, options);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CurrencyCNYPipe } from './cny.pipe';\nimport { CurrencyCommasPipe } from './commas.pipe';\nimport { CurrencyMegaPipe } from './mega.pipe';\n\nconst PIPES = [CurrencyMegaPipe, CurrencyCommasPipe, CurrencyCNYPipe];\n\n@NgModule({\n  declarations: PIPES,\n  exports: PIPES,\n})\nexport class CurrencyPipeModule {}\n"]}