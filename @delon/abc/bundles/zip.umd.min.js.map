{"version":3,"sources":["ng://@delon/abc/zip/zip.config.ts","ng://@delon/abc/zip/zip.service.ts","ng://@delon/abc/zip/zip.module.ts"],"names":["ZipConfig","ZipService","cog","http","lazy","this","prototype","init","load","url","concat","utils","check","zip","Error","read","fileOrUrl","options","_this","Promise","resolve","reject","then","reader","FileReader","onload","e","JSZip","loadAsync","target","result","ret","readAsBinaryString","request","responseType","subscribe","res","err","create","zipFile","pushUrl","path","file","error","save","opt","Object","assign","generateAsync","type","update","data","callback","saveAs","filename","Injectable","HttpClient","LazyService","ZipModule","forRoot","ngModule","providers","NgModule","args","imports","CommonModule","DelonUtilModule"],"mappings":"+hBAAA,IAAAA,wBAIS,wDAIY,ICRrBC,EAAA,WAYE,SAAAA,EACUC,EACAC,EACAC,GAFAC,KAAAH,IAAAA,EACAG,KAAAF,KAAAA,EACAE,KAAAD,KAAAA,SAGFH,EAAAK,UAAAC,gBACN,OAAOF,KAAKD,KAAKI,KAAK,CAACH,KAAKH,IAAIO,KAAKC,OAAOL,KAAKH,IAAIS,SAG/CV,EAAAK,UAAAM,eAAMC,GACZ,IAAKA,EAAK,MAAM,IAAIC,MAAM,2CAI5Bb,EAAAK,UAAAS,KAAA,SAAKC,EAA0BC,GAA/B,IAAAC,EAAAb,KACE,OAAO,IAAIc,QAAa,SAACC,EAASC,GAChCH,EAAKX,OAAOe,KAAK,WAEf,GAAyB,iBAAdN,EAAX,CAcA,IAAMO,EAAqB,IAAIC,WAC/BD,EAAOE,OAAS,SAACC,GACfC,MAAMC,UAAUF,EAAEG,OAAOC,OAAQb,GAASK,KAAK,SAAAS,GAAO,OAAAX,EAAQW,MAEhER,EAAOS,mBAAkB,QAjBvBd,EAAKf,KACF8B,QAAQ,MAAOjB,EAAW,CAAEkB,aAAc,gBAC1CC,UACC,SAACC,GACCT,MAAMC,UAAUQ,EAAKnB,GAASK,KAAK,SAAAS,GAAO,OAAAX,EAAQW,MAEpD,SAACM,GACChB,EAAOgB,UAgBrBpC,EAAAK,UAAAgC,OAAA,WAAA,IAAApB,EAAAb,KACE,OAAO,IAAIc,QAAa,SAAAC,GACtBF,EAAKX,OAAOe,KAAK,WACf,IAAMiB,EAAe,IAAIZ,MACzBP,EAAQmB,QAWdtC,EAAAK,UAAAkC,QAAA,SAAQ3B,EAAU4B,EAAchC,GAAhC,IAAAS,EAAAb,KAEE,OADAA,KAAKO,MAAMC,GACJ,IAAIM,QAAc,SAACC,EAASC,GACjCH,EAAKf,KAAK8B,QAAQ,MAAOxB,EAAK,CAAEyB,aAAc,gBAAiBC,UAC7D,SAACC,GACCvB,EAAI6B,KAAKD,EAAML,GACfhB,KAEF,SAACuB,GACCtB,EAAO,CAAEZ,IAAGA,EAAEkC,MAAKA,SAY3B1C,EAAAK,UAAAsC,KAAA,SAAK/B,EAAUI,GACbZ,KAAKO,MAAMC,GACX,IAAMgC,EAAMC,OAAOC,OAAO,GAAI9B,GAC9B,OAAO,IAAIE,QAAc,SAACC,EAASC,GACjCR,EACGmC,cAAcF,OAAOC,OAAO,CAAEE,KAAM,QAAUJ,EAAI5B,SAAU4B,EAAIK,QAChE5B,KACC,SAAC6B,GACKN,EAAIO,UAAUP,EAAIO,SAASD,GAC/BE,EAAAA,OAAOF,EAAMN,EAAIS,UAAY,gBAC7BlC,KAEF,SAAAiB,GACEhB,EAAOgB,4BA9FlBkB,EAAAA,sDAJQvD,SALAwD,EAAAA,kBAEAC,EAAAA,iBAHT,GCAAC,EAAA,gCAWSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAAC7D,EAAWC,yBAP5B6D,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAACC,EAAAA,aAAcC,EAAAA,uBAR1B","sourcesContent":["export class ZipConfig {\r\n  /**\r\n   * Zip library path\r\n   */\r\n  url? = '//cdn.bootcss.com/jszip/3.1.5/jszip.min.js';\r\n  /**\r\n   * Defines which zip optional utils should get loaded\r\n   */\r\n  utils?: string[] = [];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { saveAs } from 'file-saver';\r\nimport { LazyService, LazyResult } from '@delon/util';\r\n\r\nimport { ZipSaveOptions } from './zip.types';\r\nimport { ZipConfig } from './zip.config';\r\n\r\ndeclare var JSZip: any;\r\n\r\n@Injectable()\r\nexport class ZipService {\r\n  constructor(\r\n    private cog: ZipConfig,\r\n    private http: HttpClient,\r\n    private lazy: LazyService,\r\n  ) {}\r\n\r\n  private init(): Promise<LazyResult[]> {\r\n    return this.lazy.load([this.cog.url].concat(this.cog.utils));\r\n  }\r\n\r\n  private check(zip: any) {\r\n    if (!zip) throw new Error('get instance via `ZipService.create()`');\r\n  }\r\n\r\n  /** è§£å */\r\n  read(fileOrUrl: File | string, options?: any): Promise<any> {\r\n    return new Promise<any>((resolve, reject) => {\r\n      this.init().then(() => {\r\n        // from url\r\n        if (typeof fileOrUrl === 'string') {\r\n          this.http\r\n            .request('GET', fileOrUrl, { responseType: 'arraybuffer' })\r\n            .subscribe(\r\n              (res: ArrayBuffer) => {\r\n                JSZip.loadAsync(res, options).then(ret => resolve(ret));\r\n              },\r\n              (err: any) => {\r\n                reject(err);\r\n              },\r\n            );\r\n          return;\r\n        }\r\n        // from file\r\n        const reader: FileReader = new FileReader();\r\n        reader.onload = (e: any) => {\r\n          JSZip.loadAsync(e.target.result, options).then(ret => resolve(ret));\r\n        };\r\n        reader.readAsBinaryString(<File>fileOrUrl);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** åå»º Zip å®ä¾ï¼ç¨äºåå»ºåç¼©æä»¶ */\r\n  create(): Promise<any> {\r\n    return new Promise<any>(resolve => {\r\n      this.init().then(() => {\r\n        const zipFile: any = new JSZip();\r\n        resolve(zipFile);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ä¸è½½URLèµæºå¹¶åå¥ zip\r\n   * @param zip Zip å®ä¾\r\n   * @param path Zip è·¯å¾ï¼ä¾å¦ï¼ `text.txt`ã`txt/hi.txt`\r\n   * @param url URL å°å\r\n   */\r\n  pushUrl(zip: any, path: string, url: string): Promise<void> {\r\n    this.check(zip);\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(\r\n        (res: ArrayBuffer) => {\r\n          zip.file(path, res);\r\n          resolve();\r\n        },\r\n        (error: any) => {\r\n          reject({ url, error });\r\n        },\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ä¿å­Zipå¹¶æ§è¡æå¼ä¿å­å¯¹è¯æ¡\r\n   *\r\n   * @param zip zip å¯¹è±¡ï¼å¡å¿éè¿ `create()` æå»º\r\n   * @param options é¢å¤åæ°ï¼\r\n   */\r\n  save(zip: any, options?: ZipSaveOptions): Promise<void> {\r\n    this.check(zip);\r\n    const opt = Object.assign({}, options);\r\n    return new Promise<void>((resolve, reject) => {\r\n      zip\r\n        .generateAsync(Object.assign({ type: 'blob' }, opt.options), opt.update)\r\n        .then(\r\n          (data: Blob) => {\r\n            if (opt.callback) opt.callback(data);\r\n            saveAs(data, opt.filename || 'download.zip');\r\n            resolve();\r\n          },\r\n          err => {\r\n            reject(err);\r\n          },\r\n        );\r\n    });\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DelonUtilModule } from '@delon/util';\r\n\r\nimport { ZipService } from './zip.service';\r\nimport { ZipConfig } from './zip.config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, DelonUtilModule],\r\n})\r\nexport class ZipModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ZipModule,\r\n      providers: [ZipConfig, ZipService],\r\n    };\r\n  }\r\n}\r\n"]}