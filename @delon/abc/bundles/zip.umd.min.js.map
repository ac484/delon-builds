{"version":3,"sources":["../../../../packages/abc/zip/zip.service.ts","../../../../packages/abc/zip/zip.module.ts"],"names":["ZipService","http","lazy","configSrv","ngZone","this","cog","merge","url","utils","prototype","init","load","concat","check","zip","Error","read","fileOrUrl","options","_this","Promise","resolve","reject","resolveCallback","data","run","then","runOutsideAngular","reader","FileReader","onload","e","JSZip","loadAsync","target","result","ret","readAsBinaryString","request","responseType","subscribe","res","err","create","zipFile","pushUrl","path","file","error","save","opt","Object","assign","generateAsync","type","update","callback","saveAs","filename","Injectable","args","providedIn","HttpClient","LazyService","AlainConfigService","NgZone","NgModule","imports","CommonModule"],"mappings":"mqBAcE,SAAAA,EAAoBC,EAA0BC,EAAmBC,EAAuCC,GAApFC,KAAAJ,KAAAA,EAA0BI,KAAAH,KAAAA,EAA0DG,KAAAD,OAAAA,EACtGC,KAAKC,IAAMH,EAAUI,MAAM,MAAO,CAChCC,IAAK,6CACLC,MAAO,YAIHT,EAAAU,UAAAC,KAAA,WACN,OAAON,KAAKH,KAAKU,KAAK,CAACP,KAAKC,IAAO,KAAGO,OAAOR,KAAKC,IAAS,SAGrDN,EAAAU,UAAAI,MAAA,SAAMC,GACZ,IAAKA,EAAK,MAAM,IAAIC,MAAM,2CAI5BhB,EAAAU,UAAAO,KAAA,SAAKC,EAA0BC,GAA/B,IAAAC,EAAAf,KACE,OAAO,IAAIgB,SAAO,SAAOC,EAASC,OAC1BC,EAAe,SAAIC,GACvBL,EAAKhB,OAAOsB,KAAG,WAAO,OAAAJ,EAAQG,OAEhCL,EAAKT,OAAOgB,MAAI,WACdP,EAAKhB,OAAOwB,mBAAiB,WAE3B,GAAyB,iBAAdV,EAAX,KAYMW,EAAqB,IAAIC,WAC/BD,EAAOE,OAAM,SAAIC,GACfC,MAAMC,UAAUF,EAAEG,OAAOC,OAAQjB,GAASQ,MAAI,SAAEU,GAAmB,OAAAb,EAAgBa,OAErFR,EAAOS,mBAAkB,QAfvBlB,EAAKnB,KAAKsC,QAAQ,MAAOrB,EAAW,CAAEsB,aAAc,gBAAiBC,WAAS,SAC3EC,GACCT,MAAMC,UAAUQ,EAAKvB,GAASQ,MAAI,SAAEU,GAAmB,OAAAb,EAAgBa,SACxE,SACAM,GACCpB,EAAOoB,gBAiBrB3C,EAAAU,UAAAkC,OAAA,WAAA,IAAAxB,EAAAf,KACE,OAAO,IAAIgB,SAAO,SAAMC,GACtBF,EAAKT,OAAOgB,MAAI,eACRkB,EAAe,IAAIZ,MACzBX,EAAQuB,UAWd7C,EAAAU,UAAAoC,QAAA,SAAQ/B,EAAUgC,EAAcvC,GAAhC,IAAAY,EAAAf,KAEE,OADAA,KAAKS,MAAMC,GACJ,IAAIM,SAAO,SAAQC,EAASC,GACjCH,EAAKnB,KAAKsC,QAAQ,MAAO/B,EAAK,CAAEgC,aAAc,gBAAiBC,WAAS,SACrEC,GACC3B,EAAIiC,KAAKD,EAAML,GACfpB,OACD,SACA2B,GACC1B,EAAO,CAAEf,IAAGA,EAAEyC,MAAKA,WAY3BjD,EAAAU,UAAAwC,KAAA,SAAKnC,EAAUI,GACbd,KAAKS,MAAMC,OACLoC,EAAGC,OAAAC,OAAA,GAAQlC,GACjB,OAAO,IAAIE,SAAO,SAAQC,EAASC,GACjCR,EAAIuC,cAAaF,OAAAC,OAAA,CAAGE,KAAM,QAAWJ,EAAIhC,SAAWgC,EAAIK,QAAQ7B,MAAI,SACjEF,GACK0B,EAAIM,UAAUN,EAAIM,SAAShC,GAC/BiC,EAAAA,OAAOjC,EAAM0B,EAAIQ,UAAY,gBAC7BrC,OACD,SACAqB,GACCpB,EAAOoB,mCAlGhBiB,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAVjBC,EAAAA,kBAGYC,EAAAA,mBADZC,EAAAA,0BADYC,EAAAA,qNCKrB,iCAHCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,CAACC,EAAAA","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\nimport { AlainConfigService, AlainZipConfig } from '@delon/util/config';\nimport { LazyResult, LazyService } from '@delon/util/other';\nimport { saveAs } from 'file-saver';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { ZipSaveOptions } from './zip.types';\n\ndeclare var JSZip: any;\n\n@Injectable({ providedIn: 'root' })\nexport class ZipService {\n  private cog: AlainZipConfig;\n\n  constructor(private http: HttpClient, private lazy: LazyService, configSrv: AlainConfigService, private ngZone: NgZone) {\n    this.cog = configSrv.merge('zip', {\n      url: '//cdn.bootcss.com/jszip/3.3.0/jszip.min.js',\n      utils: [],\n    })!;\n  }\n\n  private init(): Promise<LazyResult[]> {\n    return this.lazy.load([this.cog.url!].concat(this.cog.utils!));\n  }\n\n  private check(zip: any): void {\n    if (!zip) throw new Error('get instance via `ZipService.create()`');\n  }\n\n  /** 解压 */\n  read(fileOrUrl: File | string, options?: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      const resolveCallback = (data: NzSafeAny) => {\n        this.ngZone.run(() => resolve(data));\n      };\n      this.init().then(() => {\n        this.ngZone.runOutsideAngular(() => {\n          // from url\n          if (typeof fileOrUrl === 'string') {\n            this.http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(\n              (res: ArrayBuffer) => {\n                JSZip.loadAsync(res, options).then((ret: NzSafeAny) => resolveCallback(ret));\n              },\n              (err: any) => {\n                reject(err);\n              },\n            );\n            return;\n          }\n          // from file\n          const reader: FileReader = new FileReader();\n          reader.onload = (e: any) => {\n            JSZip.loadAsync(e.target.result, options).then((ret: NzSafeAny) => resolveCallback(ret));\n          };\n          reader.readAsBinaryString(fileOrUrl as File);\n        });\n      });\n    });\n  }\n\n  /** 创建 Zip 实例，用于创建压缩文件 */\n  create(): Promise<any> {\n    return new Promise<any>(resolve => {\n      this.init().then(() => {\n        const zipFile: any = new JSZip();\n        resolve(zipFile);\n      });\n    });\n  }\n\n  /**\n   * 下载URL资源并写入 zip\n   * @param zip Zip 实例\n   * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`\n   * @param url URL 地址\n   */\n  pushUrl(zip: any, path: string, url: string): Promise<void> {\n    this.check(zip);\n    return new Promise<void>((resolve, reject) => {\n      this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(\n        (res: ArrayBuffer) => {\n          zip.file(path, res);\n          resolve();\n        },\n        (error: any) => {\n          reject({ url, error });\n        },\n      );\n    });\n  }\n\n  /**\n   * 保存Zip并执行打开保存对话框\n   *\n   * @param zip zip 对象，务必通过 `create()` 构建\n   * @param options 额外参数，\n   */\n  save(zip: any, options?: ZipSaveOptions): Promise<void> {\n    this.check(zip);\n    const opt = { ...options } as ZipSaveOptions;\n    return new Promise<void>((resolve, reject) => {\n      zip.generateAsync({ type: 'blob', ...opt.options }, opt.update).then(\n        (data: Blob) => {\n          if (opt.callback) opt.callback(data);\n          saveAs(data, opt.filename || 'download.zip');\n          resolve();\n        },\n        (err: NzSafeAny) => {\n          reject(err);\n        },\n      );\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class ZipModule {}\n"]}