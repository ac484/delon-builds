{"version":3,"sources":["ng://@delon/abc/zip/zip.config.ts","ng://@delon/abc/zip/zip.service.ts","ng://@delon/abc/zip/zip.module.ts"],"names":["ZipConfig","this","url","utils","ZipService","cog","http","lazy","prototype","init","load","concat","check","zip","Error","read","fileOrUrl","options","_this","Promise","resolve","reject","then","reader","FileReader","onload","e","JSZip","loadAsync","target","result","ret","readAsBinaryString","request","responseType","subscribe","res","err","create","zipFile","pushUrl","path","file","error","save","opt","Object","assign","generateAsync","type","update","data","callback","saveAs","filename","Injectable","HttpClient","LazyService","ZipModule","forRoot","ngModule","providers","NgModule","args","imports","CommonModule","DelonUtilModule"],"mappings":"+hBAAA,IAAAA,EAAA,SAAAA,IAIEC,KAAAC,IAAO,6CAIPD,KAAAE,MAAmB,ICRrBC,EAAA,WAYE,SAAAA,EACUC,EACAC,EACAC,GAFAN,KAAAI,IAAAA,EACAJ,KAAAK,KAAAA,EACAL,KAAAM,KAAAA,EA8FZ,OA3FUH,EAAAI,UAAAC,KAAR,WACE,OAAOR,KAAKM,KAAKG,KAAK,CAACT,KAAKI,IAAIH,KAAKS,OAAOV,KAAKI,IAAIF,SAG/CC,EAAAI,UAAAI,MAAR,SAAcC,GACZ,IAAKA,EAAK,MAAM,IAAIC,MAAM,2CAI5BV,EAAAI,UAAAO,KAAA,SAAKC,EAA0BC,GAA/B,IAAAC,EAAAjB,KACE,OAAO,IAAIkB,QAAa,SAACC,EAASC,GAChCH,EAAKT,OAAOa,KAAK,WAEf,GAAyB,iBAAdN,EAAX,KAcMO,EAAqB,IAAIC,WAC/BD,EAAOE,OAAS,SAACC,GACfC,MAAMC,UAAUF,EAAEG,OAAOC,OAAQb,GAASK,KAAK,SAAAS,GAAO,OAAAX,EAAQW,MAEhER,EAAOS,mBAAkB,QAjBvBd,EAAKZ,KACF2B,QAAQ,MAAOjB,EAAW,CAAEkB,aAAc,gBAC1CC,UACC,SAACC,GACCT,MAAMC,UAAUQ,EAAKnB,GAASK,KAAK,SAAAS,GAAO,OAAAX,EAAQW,MAEpD,SAACM,GACChB,EAAOgB,UAgBrBjC,EAAAI,UAAA8B,OAAA,WAAA,IAAApB,EAAAjB,KACE,OAAO,IAAIkB,QAAa,SAAAC,GACtBF,EAAKT,OAAOa,KAAK,eACTiB,EAAe,IAAIZ,MACzBP,EAAQmB,QAWdnC,EAAAI,UAAAgC,QAAA,SAAQ3B,EAAU4B,EAAcvC,GAAhC,IAAAgB,EAAAjB,KAEE,OADAA,KAAKW,MAAMC,GACJ,IAAIM,QAAc,SAACC,EAASC,GACjCH,EAAKZ,KAAK2B,QAAQ,MAAO/B,EAAK,CAAEgC,aAAc,gBAAiBC,UAC7D,SAACC,GACCvB,EAAI6B,KAAKD,EAAML,GACfhB,KAEF,SAACuB,GACCtB,EAAO,CAAEnB,IAAGA,EAAEyC,MAAKA,SAY3BvC,EAAAI,UAAAoC,KAAA,SAAK/B,EAAUI,GACbhB,KAAKW,MAAMC,OACLgC,EAAMC,OAAOC,OAAO,GAAI9B,GAC9B,OAAO,IAAIE,QAAc,SAACC,EAASC,GACjCR,EACGmC,cAAcF,OAAOC,OAAO,CAAEE,KAAM,QAAUJ,EAAI5B,SAAU4B,EAAIK,QAChE5B,KACC,SAAC6B,GACKN,EAAIO,UAAUP,EAAIO,SAASD,GAC/BE,EAAAA,OAAOF,EAAMN,EAAIS,UAAY,gBAC7BlC,KAEF,SAAAiB,GACEhB,EAAOgB,4BA9FlBkB,EAAAA,sDAJQvD,SALAwD,EAAAA,kBAEAC,EAAAA,eA0GTrD,EA7GA,GCAAsD,EAAA,WAOA,SAAAA,KAUA,OANSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAAC7D,EAAWI,yBAP5B0D,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAACC,EAAAA,aAAcC,EAAAA,qBAS1BR,EAjBA","sourcesContent":["export class ZipConfig {\n  /**\n   * Zip library path\n   */\n  url? = '//cdn.bootcss.com/jszip/3.1.5/jszip.min.js';\n  /**\n   * Defines which zip optional utils should get loaded\n   */\n  utils?: string[] = [];\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { saveAs } from 'file-saver';\nimport { LazyService, LazyResult } from '@delon/util';\n\nimport { ZipSaveOptions } from './zip.types';\nimport { ZipConfig } from './zip.config';\n\ndeclare var JSZip: any;\n\n@Injectable()\nexport class ZipService {\n  constructor(\n    private cog: ZipConfig,\n    private http: HttpClient,\n    private lazy: LazyService,\n  ) {}\n\n  private init(): Promise<LazyResult[]> {\n    return this.lazy.load([this.cog.url].concat(this.cog.utils));\n  }\n\n  private check(zip: any) {\n    if (!zip) throw new Error('get instance via `ZipService.create()`');\n  }\n\n  /** è§£å */\n  read(fileOrUrl: File | string, options?: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this.init().then(() => {\n        // from url\n        if (typeof fileOrUrl === 'string') {\n          this.http\n            .request('GET', fileOrUrl, { responseType: 'arraybuffer' })\n            .subscribe(\n              (res: ArrayBuffer) => {\n                JSZip.loadAsync(res, options).then(ret => resolve(ret));\n              },\n              (err: any) => {\n                reject(err);\n              },\n            );\n          return;\n        }\n        // from file\n        const reader: FileReader = new FileReader();\n        reader.onload = (e: any) => {\n          JSZip.loadAsync(e.target.result, options).then(ret => resolve(ret));\n        };\n        reader.readAsBinaryString(<File>fileOrUrl);\n      });\n    });\n  }\n\n  /** åå»º Zip å®ä¾ï¼ç¨äºåå»ºåç¼©æä»¶ */\n  create(): Promise<any> {\n    return new Promise<any>(resolve => {\n      this.init().then(() => {\n        const zipFile: any = new JSZip();\n        resolve(zipFile);\n      });\n    });\n  }\n\n  /**\n   * ä¸è½½URLèµæºå¹¶åå¥ zip\n   * @param zip Zip å®ä¾\n   * @param path Zip è·¯å¾ï¼ä¾å¦ï¼ `text.txt`ã`txt/hi.txt`\n   * @param url URL å°å\n   */\n  pushUrl(zip: any, path: string, url: string): Promise<void> {\n    this.check(zip);\n    return new Promise<void>((resolve, reject) => {\n      this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(\n        (res: ArrayBuffer) => {\n          zip.file(path, res);\n          resolve();\n        },\n        (error: any) => {\n          reject({ url, error });\n        },\n      );\n    });\n  }\n\n  /**\n   * ä¿å­Zipå¹¶æ§è¡æå¼ä¿å­å¯¹è¯æ¡\n   *\n   * @param zip zip å¯¹è±¡ï¼å¡å¿éè¿ `create()` æå»º\n   * @param options é¢å¤åæ°ï¼\n   */\n  save(zip: any, options?: ZipSaveOptions): Promise<void> {\n    this.check(zip);\n    const opt = Object.assign({}, options);\n    return new Promise<void>((resolve, reject) => {\n      zip\n        .generateAsync(Object.assign({ type: 'blob' }, opt.options), opt.update)\n        .then(\n          (data: Blob) => {\n            if (opt.callback) opt.callback(data);\n            saveAs(data, opt.filename || 'download.zip');\n            resolve();\n          },\n          err => {\n            reject(err);\n          },\n        );\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DelonUtilModule } from '@delon/util';\n\nimport { ZipService } from './zip.service';\nimport { ZipConfig } from './zip.config';\n\n@NgModule({\n  imports: [CommonModule, DelonUtilModule],\n})\nexport class ZipModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ZipModule,\n      providers: [ZipConfig, ZipService],\n    };\n  }\n}\n"]}