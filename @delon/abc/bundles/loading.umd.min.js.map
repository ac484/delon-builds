{"version":3,"sources":["../../../../packages/abc/loading/loading.component.ts","../../../../packages/abc/loading/loading.component.html","../../../../packages/abc/loading/loading.service.ts","../../../../packages/abc/loading/loading.module.ts"],"names":["LoadingDefaultComponent","this","dir","Object","defineProperty","prototype","options","icon","custom","selector","host","properties","class.loading-default","class.loading-default-rtl","ngImport","i0__namespace","template","directives","type","i1","NgIf","inputs","NgSwitch","NgSwitchCase","i2","NzSpinComponent","exportAs","i3","NzIconDirective","NgSwitchDefault","NgStyle","changeDetection","i0","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Component","templateUrl","[class.loading-default]","[class.loading-default-rtl]","preserveWhitespaces","LoadingService","overlay","configSrv","directionality","_this","compRef","opt","n$","Subject","cog","merge","text","theme","spin","delay","loading$","asObservable","pipe","debounce","timer","subscribe","create","instance","_close","_overlayRef","positionStrategy","position","global","centerHorizontally","centerVertically","scrollStrategy","scrollStrategies","block","hasBackdrop","backdropClass","attach","ComponentPortal","get","direction","value","assign","changeDetectorRef","markForCheck","open","next","cleanOpt","detach","close","ngOnDestroy","unsubscribe","ɵɵinject","i1$1","Overlay","i2$1","AlainConfigService","i3$1","Directionality","factory","ɵfac","providedIn","Injectable","Optional","COMPONENTS","LoadingModule","imports","CommonModule","OverlayModule","PortalModule","NzIconModule","NzSpinModule","declarations","exports","NgModule","entryComponents"],"mappings":"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","sourcesContent":["import { Direction } from '@angular/cdk/bidi';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { LoadingCustom, LoadingIcon, LoadingShowOptions } from './loading.types';\n\n@Component({\n  selector: 'loading-default',\n  templateUrl: './loading.component.html',\n  host: {\n    '[class.loading-default]': 'true',\n    '[class.loading-default-rtl]': `dir === 'rtl'`,\n  },\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class LoadingDefaultComponent {\n  options: LoadingShowOptions;\n  dir: Direction = 'ltr';\n\n  get icon(): LoadingIcon {\n    return this.options.icon!;\n  }\n\n  get custom(): LoadingCustom {\n    return this.options.custom!;\n  }\n}\n","<div class=\"loading-default__icon\" *ngIf=\"options.type !== 'text'\">\n  <ng-container [ngSwitch]=\"options.type\">\n    <nz-spin *ngSwitchCase=\"'spin'\" nzSimple></nz-spin>\n    <i *ngSwitchCase=\"'icon'\" nz-icon [nzType]=\"icon.type\" [nzTheme]=\"icon.theme\" [nzSpin]=\"icon.spin\"></i>\n    <div *ngSwitchDefault class=\"loading-default__custom\" [ngStyle]=\"custom.style\" [innerHTML]=\"custom.html\"></div>\n  </ng-container>\n</div>\n<div *ngIf=\"options.text\" class=\"loading-default__text\">{{ options.text }}</div>\n","import { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { AlainConfigService, AlainLoadingConfig } from '@delon/util';\nimport { Subject, Subscription, timer } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { LoadingDefaultComponent } from './loading.component';\nimport { LoadingShowOptions } from './loading.types';\n\n@Injectable({ providedIn: 'root' })\nexport class LoadingService implements OnDestroy {\n  private _overlayRef: OverlayRef;\n  private compRef: ComponentRef<LoadingDefaultComponent> | null = null;\n  private opt: LoadingShowOptions | null = null;\n  private cog: AlainLoadingConfig;\n  private n$ = new Subject();\n  private loading$: Subscription;\n\n  get instance(): LoadingDefaultComponent | null {\n    return this.compRef != null ? this.compRef.instance : null;\n  }\n\n  constructor(private overlay: Overlay, private configSrv: AlainConfigService, @Optional() private directionality: Directionality) {\n    this.cog = configSrv.merge('loading', {\n      type: 'spin',\n      text: '加载中...',\n      icon: {\n        type: 'loading',\n        theme: 'outline',\n        spin: true,\n      },\n      delay: 0,\n    })!;\n    this.loading$ = this.n$\n      .asObservable()\n      .pipe(debounce(() => timer(this.opt!.delay)))\n      .subscribe(() => this.create());\n  }\n\n  private create(): void {\n    if (this.opt == null) return;\n\n    this._close(false);\n\n    this._overlayRef = this.overlay.create({\n      positionStrategy: this.overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      hasBackdrop: true,\n      backdropClass: 'loading-backdrop',\n    });\n    this.compRef = this._overlayRef.attach(new ComponentPortal(LoadingDefaultComponent));\n    const dir = this.configSrv.get('loading')!.direction || this.directionality.value;\n    Object.assign(this.instance, { options: this.opt, dir });\n    this.compRef.changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Open a new loading indicator\n   *\n   * 打开一个新加载指示符\n   */\n  open(options?: LoadingShowOptions): void {\n    this.opt = { ...this.cog, ...options };\n    this.n$.next();\n  }\n\n  private _close(cleanOpt: boolean): void {\n    if (cleanOpt) this.opt = null;\n    if (!this._overlayRef) return;\n    this._overlayRef.detach();\n    this.compRef = null;\n  }\n\n  /**\n   * Turn off a loading indicator\n   *\n   * 关闭一个加载指示符\n   */\n  close(): void {\n    this._close(true);\n  }\n\n  ngOnDestroy(): void {\n    this.loading$.unsubscribe();\n  }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\nimport { LoadingDefaultComponent } from './loading.component';\n\nconst COMPONENTS = [LoadingDefaultComponent];\n\n@NgModule({\n  imports: [CommonModule, OverlayModule, PortalModule, NzIconModule, NzSpinModule],\n  declarations: COMPONENTS,\n  entryComponents: COMPONENTS,\n  exports: COMPONENTS,\n})\nexport class LoadingModule {}\n"]}