{"version":3,"sources":["../../../../packages/abc/loading/loading.component.ts","../../../../packages/abc/loading/loading.service.ts","../../../../packages/abc/loading/loading.module.ts"],"names":["LoadingDefaultComponent","Object","defineProperty","prototype","this","options","Component","args","selector","template","host","[class.loading-default]","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","LoadingService","overlay","configSrv","_this","compRef","opt","n$","Subject","cog","merge","type","text","icon","theme","spin","delay","loading$","asObservable","pipe","debounce","timer","subscribe","create","instance","_close","_overlayRef","positionStrategy","position","global","centerHorizontally","centerVertically","scrollStrategy","scrollStrategies","block","hasBackdrop","backdropClass","attach","ComponentPortal","assign","changeDetectorRef","markForCheck","open","next","cleanOpt","detach","close","ngOnDestroy","unsubscribe","Injectable","providedIn","Overlay","AlainConfigService","COMPONENTS","NgModule","imports","CommonModule","OverlayModule","PortalModule","NzIconModule","NzSpinModule","declarations","entryComponents","exports"],"mappings":"o1BAaA,SAAAA,YAGEC,OAAAC,eAAIF,EAAAG,UAAA,OAAI,KAAR,WACE,OAAOC,KAAKC,QAAY,sCAG1BJ,OAAAC,eAAIF,EAAAG,UAAA,SAAM,KAAV,WACE,OAAOC,KAAKC,QAAc,iEAlB7BC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAA,kgBACAC,KAAM,CACJC,0BAA2B,QAE7BC,qBAAqB,EACrBC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,0BCWjC,SAAAC,EAAoBC,EAAkBC,GAAtC,IAAAC,EAAAlB,KAAoBA,KAAAgB,QAAAA,EAVZhB,KAAAmB,QAAwD,KACxDnB,KAAAoB,IAAiC,KAEjCpB,KAAAqB,GAAK,IAAIC,EAAAA,QAQftB,KAAKuB,IAAMN,EAAUO,MAAM,UAAW,CACpCC,KAAM,OACNC,KAAM,SACNC,KAAM,CACJF,KAAM,UACNG,MAAO,UACPC,MAAM,GAERC,MAAO,IAET9B,KAAK+B,SAAW/B,KAAKqB,GAClBW,eACAC,KAAKC,EAAAA,UAAQ,WAAO,OAAAC,EAAAA,MAAMjB,EAAQ,IAAEY,WACpCM,WAAS,WAAO,OAAAlB,EAAKmB,mBAlB1BxC,OAAAC,eAAIiB,EAAAhB,UAAA,WAAQ,KAAZ,WACE,OAAuB,MAAhBC,KAAKmB,QAAkBnB,KAAKmB,QAAQmB,SAAW,sCAoBhDvB,EAAAhB,UAAAsC,OAAA,WACU,MAAZrC,KAAKoB,MAETpB,KAAKuC,QAAO,GAEZvC,KAAKwC,YAAcxC,KAAKgB,QAAQqB,OAAO,CACrCI,iBAAkBzC,KAAKgB,QAAQ0B,WAAWC,SAASC,qBAAqBC,mBACxEC,eAAgB9C,KAAKgB,QAAQ+B,iBAAiBC,QAC9CC,aAAa,EACbC,cAAe,qBAEjBlD,KAAKmB,QAAUnB,KAAKwC,YAAYW,OAAO,IAAIC,EAAAA,gBAAgBxD,IAC3DC,OAAOwD,OAAOrD,KAAKsC,SAAU,CAAErC,QAASD,KAAKoB,MAC7CpB,KAAKmB,QAAQmC,kBAAkBC,iBAGjCxC,EAAAhB,UAAAyD,KAAA,SAAKvD,GACHD,KAAKoB,IAAGvB,OAAAwD,OAAAxD,OAAAwD,OAAA,GAAQrD,KAAKuB,KAAQtB,GAC7BD,KAAKqB,GAAGoC,QAGF1C,EAAAhB,UAAAwC,OAAA,SAAOmB,GACTA,IAAU1D,KAAKoB,IAAM,MACpBpB,KAAKwC,cACVxC,KAAKwC,YAAYmB,SACjB3D,KAAKmB,QAAU,OAGjBJ,EAAAhB,UAAA6D,MAAA,WACE5D,KAAKuC,QAAO,IAGdxB,EAAAhB,UAAA8D,YAAA,WACE7D,KAAK+B,SAAS+B,wCA/DjBC,EAAAA,WAAU5D,KAAA,CAAC,CAAE6D,WAAY,oDATjBC,EAAAA,eAGAC,EAAAA,6KCKHC,EAAa,CAACvE,KAQpB,iCANCwE,EAAAA,SAAQjE,KAAA,CAAC,CACRkE,QAAS,CAACC,EAAAA,aAAcC,EAAAA,cAAeC,EAAAA,aAAcC,EAAAA,aAAcC,EAAAA,cACnEC,aAAcR,EACdS,gBAAiBT,EACjBU,QAASV","sourcesContent":["import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { LoadingCustom, LoadingIcon, LoadingShowOptions } from './loading.types';\n\n@Component({\n  selector: 'loading-default',\n  templateUrl: './loading.component.html',\n  host: {\n    '[class.loading-default]': 'true',\n  },\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class LoadingDefaultComponent {\n  options: LoadingShowOptions;\n\n  get icon(): LoadingIcon {\n    return this.options.icon!;\n  }\n\n  get custom(): LoadingCustom {\n    return this.options.custom!;\n  }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef, Injectable, OnDestroy } from '@angular/core';\nimport { AlainConfigService, AlainLoadingConfig } from '@delon/util';\nimport { Subject, Subscription, timer } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { LoadingDefaultComponent } from './loading.component';\nimport { LoadingShowOptions } from './loading.types';\n\n@Injectable({ providedIn: 'root' })\nexport class LoadingService implements OnDestroy {\n  private _overlayRef: OverlayRef;\n  private compRef: ComponentRef<LoadingDefaultComponent> | null = null;\n  private opt: LoadingShowOptions | null = null;\n  private cog: AlainLoadingConfig;\n  private n$ = new Subject();\n  private loading$: Subscription;\n\n  get instance(): LoadingDefaultComponent | null {\n    return this.compRef != null ? this.compRef.instance : null;\n  }\n\n  constructor(private overlay: Overlay, configSrv: AlainConfigService) {\n    this.cog = configSrv.merge('loading', {\n      type: 'spin',\n      text: '加载中...',\n      icon: {\n        type: 'loading',\n        theme: 'outline',\n        spin: true,\n      },\n      delay: 0,\n    })!;\n    this.loading$ = this.n$\n      .asObservable()\n      .pipe(debounce(() => timer(this.opt!.delay)))\n      .subscribe(() => this.create());\n  }\n\n  private create(): void {\n    if (this.opt == null) return;\n\n    this._close(false);\n\n    this._overlayRef = this.overlay.create({\n      positionStrategy: this.overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      hasBackdrop: true,\n      backdropClass: 'loading-backdrop',\n    });\n    this.compRef = this._overlayRef.attach(new ComponentPortal(LoadingDefaultComponent));\n    Object.assign(this.instance, { options: this.opt });\n    this.compRef.changeDetectorRef.markForCheck();\n  }\n\n  open(options?: LoadingShowOptions): void {\n    this.opt = { ...this.cog, ...options };\n    this.n$.next();\n  }\n\n  private _close(cleanOpt: boolean): void {\n    if (cleanOpt) this.opt = null;\n    if (!this._overlayRef) return;\n    this._overlayRef.detach();\n    this.compRef = null;\n  }\n\n  close(): void {\n    this._close(true);\n  }\n\n  ngOnDestroy(): void {\n    this.loading$.unsubscribe();\n  }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\nimport { LoadingDefaultComponent } from './loading.component';\n\nconst COMPONENTS = [LoadingDefaultComponent];\n\n@NgModule({\n  imports: [CommonModule, OverlayModule, PortalModule, NzIconModule, NzSpinModule],\n  declarations: COMPONENTS,\n  entryComponents: COMPONENTS,\n  exports: COMPONENTS,\n})\nexport class LoadingModule {}\n"]}