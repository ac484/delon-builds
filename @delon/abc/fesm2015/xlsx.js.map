{"version":3,"file":"xlsx.js","sources":["../../../../packages/abc/xlsx/xlsx.types.ts","../../../../packages/abc/xlsx/xlsx.service.ts","../../../../packages/abc/xlsx/xlsx.directive.ts","../../../../packages/abc/xlsx/xlsx.module.ts"],"sourcesContent":["export interface XlsxExportOptions {\n  /**\n   * worksheets in the workbook, e.g:\n   * - `{ Sheet1: { A1: { t:\"n\", v:10000 } } }`\n   * - `[['1'], [1]]`\n   */\n  sheets: { [sheet: string]: any } | XlsxExportSheet[];\n  /** save file name, default: `export.xlsx` */\n  filename?: string;\n  opts?: any;\n  /** triggers when saveas */\n  callback?: (wb: any) => void;\n}\n\nexport interface XlsxExportSheet {\n  /** arrays to a worksheet */\n  data: any[][];\n  /** sheet name */\n  name?: string;\n}\n\nexport interface XlsxExportResult {\n  filename: string;\n  wb: any;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\nimport { AlainConfigService, AlainXlsxConfig, LazyResult, LazyService } from '@delon/util';\nimport { saveAs } from 'file-saver';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { XlsxExportOptions, XlsxExportResult, XlsxExportSheet } from './xlsx.types';\n\ndeclare var XLSX: any;\n\n@Injectable({ providedIn: 'root' })\nexport class XlsxService {\n  private cog: AlainXlsxConfig;\n  constructor(private http: HttpClient, private lazy: LazyService, configSrv: AlainConfigService, private ngZone: NgZone) {\n    this.cog = configSrv.merge('xlsx', {\n      url: '//cdn.bootcss.com/xlsx/0.15.6/xlsx.full.min.js',\n      modules: [],\n    })!;\n  }\n\n  private init(): Promise<LazyResult[]> {\n    return typeof XLSX !== 'undefined' ? Promise.resolve([]) : this.lazy.load([this.cog.url!].concat(this.cog.modules!));\n  }\n\n  private read(data: NzSafeAny, options: { type: 'array' | 'binary' }): { [key: string]: NzSafeAny[][] } {\n    const ret: NzSafeAny = {};\n    this.ngZone.runOutsideAngular(() => {\n      const wb = XLSX.read(data, options);\n      wb.SheetNames.forEach((name: string) => {\n        const sheet: NzSafeAny = wb.Sheets[name];\n        ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n      });\n    });\n    return ret;\n  }\n\n  /**\n   * 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式\n   * @param rABS 加载数据方式 `readAsBinaryString` （默认） 或 `readAsArrayBuffer`，[更多细节](http://t.cn/R3n63A0)\n   */\n  import(\n    fileOrUrl: File | string,\n    rABS: 'readAsBinaryString' | 'readAsArrayBuffer' = 'readAsBinaryString',\n  ): Promise<{ [key: string]: any[][] }> {\n    return new Promise<{ [key: string]: any[][] }>((resolve, reject) => {\n      this.init()\n        .then(() => {\n          // from url\n          if (typeof fileOrUrl === 'string') {\n            this.http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(\n              (res: ArrayBuffer) => {\n                this.ngZone.run(() => resolve(this.read(new Uint8Array(res), { type: 'array' })));\n              },\n              (err: any) => {\n                reject(err);\n              },\n            );\n            return;\n          }\n          // from file\n          const reader: FileReader = new FileReader();\n          reader.onload = (e: any) => {\n            this.ngZone.run(() => resolve(this.read(e.target.result, { type: 'binary' })));\n          };\n          reader[rABS](fileOrUrl);\n        })\n        .catch(() => reject(`Unable to load xlsx.js`));\n    });\n  }\n\n  async export(options: XlsxExportOptions): Promise<XlsxExportResult> {\n    return new Promise<XlsxExportResult>((resolve, reject) => {\n      this.init()\n        .then(() => {\n          this.ngZone.runOutsideAngular(() => {\n            const wb: any = XLSX.utils.book_new();\n            if (Array.isArray(options.sheets)) {\n              (options.sheets as XlsxExportSheet[]).forEach((value: XlsxExportSheet, index: number) => {\n                const ws: any = XLSX.utils.aoa_to_sheet(value.data);\n                XLSX.utils.book_append_sheet(wb, ws, value.name || `Sheet${index + 1}`);\n              });\n            } else {\n              wb.SheetNames = Object.keys(options.sheets);\n              wb.Sheets = options.sheets;\n            }\n\n            if (options.callback) options.callback(wb);\n\n            const wbout: ArrayBuffer = XLSX.write(wb, {\n              bookType: 'xlsx',\n              bookSST: false,\n              type: 'array',\n              ...options.opts,\n            });\n            const filename = options.filename || 'export.xlsx';\n            saveAs(new Blob([wbout], { type: 'application/octet-stream' }), filename);\n\n            resolve({ filename, wb });\n          });\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  /**\n   * 数据转符号名\n   * - `1` => `A`\n   * - `27` => `AA`\n   * - `703` => `AAA`\n   */\n  numberToSchema(val: number): string {\n    const startCode = 'A'.charCodeAt(0);\n    let res = '';\n\n    do {\n      --val;\n      res = String.fromCharCode(startCode + (val % 26)) + res;\n      val = (val / 26) >> 0;\n    } while (val > 0);\n\n    return res;\n  }\n}\n","import { Directive, Input } from '@angular/core';\nimport { XlsxService } from './xlsx.service';\nimport { XlsxExportOptions } from './xlsx.types';\n\n@Directive({\n  selector: '[xlsx]',\n  exportAs: 'xlsx',\n  host: {\n    '(click)': '_click()',\n  },\n})\nexport class XlsxDirective {\n  @Input('xlsx') data: XlsxExportOptions;\n\n  constructor(private srv: XlsxService) {}\n\n  _click(): void {\n    this.srv.export(this.data);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DelonUtilModule } from '@delon/util';\nimport { XlsxDirective } from './xlsx.directive';\n\nconst COMPONENTS = [XlsxDirective];\n\n@NgModule({\n  imports: [CommonModule, DelonUtilModule],\n  declarations: [...COMPONENTS],\n  exports: [...COMPONENTS],\n})\nexport class XlsxModule {}\n"],"names":[],"mappings":"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"}