{"version":3,"file":"zip.js","sources":["ng://@delon/abc/zip/zip.types.ts","ng://@delon/abc/zip/zip.service.ts","ng://@delon/abc/zip/zip.module.ts"],"sourcesContent":["export interface ZipWriteOptions {\n  /** save file name, default: `download.zip` */\n  filename?: string;\n  options?: any;\n  /** The optional function called on each internal update with the metadata. */\n  update?: (metadata: any) => void;\n  /** triggers when saveas */\n  callback?: () => void;\n}\n\nexport interface ZipSaveOptions {\n  /**\n   * 指定保存文件名，默认 `download.zip`\n   */\n  filename?: string;\n  /**\n   * JSZip `generateAsync` 方法的 `options` 选项\n   * @see https://stuk.github.io/jszip/documentation/api_jszip/generate_async.html\n   */\n  options?: any;\n  /**\n   * JSZip `generateAsync` 方法的 `onUpdate` 回调\n   * @see https://stuk.github.io/jszip/documentation/api_jszip/generate_async.html\n   */\n  update?: (percent: number, currentFile: string) => void;\n  /**\n   * 保存前回调方法\n   */\n  callback?: (blob: Blob) => void;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\nimport { AlainConfigService, AlainZipConfig, LazyResult, LazyService } from '@delon/util';\nimport { saveAs } from 'file-saver';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { ZipSaveOptions } from './zip.types';\n\ndeclare var JSZip: any;\n\n@Injectable({ providedIn: 'root' })\nexport class ZipService {\n  private cog: AlainZipConfig;\n\n  constructor(private http: HttpClient, private lazy: LazyService, configSrv: AlainConfigService, private ngZone: NgZone) {\n    this.cog = configSrv.merge('zip', {\n      url: '//cdn.bootcss.com/jszip/3.3.0/jszip.min.js',\n      utils: [],\n    })!;\n  }\n\n  private init(): Promise<LazyResult[]> {\n    return this.lazy.load([this.cog.url!].concat(this.cog.utils!));\n  }\n\n  private check(zip: any) {\n    if (!zip) throw new Error('get instance via `ZipService.create()`');\n  }\n\n  /** 解压 */\n  read(fileOrUrl: File | string, options?: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      const resolveCallback = (data: NzSafeAny) => {\n        this.ngZone.run(() => resolve(data));\n      };\n      this.init().then(() => {\n        this.ngZone.runOutsideAngular(() => {\n          // from url\n          if (typeof fileOrUrl === 'string') {\n            this.http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(\n              (res: ArrayBuffer) => {\n                JSZip.loadAsync(res, options).then((ret: NzSafeAny) => resolveCallback(ret));\n              },\n              (err: any) => {\n                reject(err);\n              },\n            );\n            return;\n          }\n          // from file\n          const reader: FileReader = new FileReader();\n          reader.onload = (e: any) => {\n            JSZip.loadAsync(e.target.result, options).then((ret: NzSafeAny) => resolveCallback(ret));\n          };\n          reader.readAsBinaryString(fileOrUrl as File);\n        });\n      });\n    });\n  }\n\n  /** 创建 Zip 实例，用于创建压缩文件 */\n  create(): Promise<any> {\n    return new Promise<any>(resolve => {\n      this.init().then(() => {\n        const zipFile: any = new JSZip();\n        resolve(zipFile);\n      });\n    });\n  }\n\n  /**\n   * 下载URL资源并写入 zip\n   * @param zip Zip 实例\n   * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`\n   * @param url URL 地址\n   */\n  pushUrl(zip: any, path: string, url: string): Promise<void> {\n    this.check(zip);\n    return new Promise<void>((resolve, reject) => {\n      this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(\n        (res: ArrayBuffer) => {\n          zip.file(path, res);\n          resolve();\n        },\n        (error: any) => {\n          reject({ url, error });\n        },\n      );\n    });\n  }\n\n  /**\n   * 保存Zip并执行打开保存对话框\n   *\n   * @param zip zip 对象，务必通过 `create()` 构建\n   * @param options 额外参数，\n   */\n  save(zip: any, options?: ZipSaveOptions): Promise<void> {\n    this.check(zip);\n    const opt = { ...options } as ZipSaveOptions;\n    return new Promise<void>((resolve, reject) => {\n      zip.generateAsync({ type: 'blob', ...opt.options }, opt.update).then(\n        (data: Blob) => {\n          if (opt.callback) opt.callback(data);\n          saveAs(data, opt.filename || 'download.zip');\n          resolve();\n        },\n        (err: NzSafeAny) => {\n          reject(err);\n        },\n      );\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DelonUtilModule } from '@delon/util';\n\n@NgModule({\n  imports: [CommonModule, DelonUtilModule],\n})\nexport class ZipModule {}\n"],"names":[],"mappings":"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"}