{"version":3,"file":"media.js","sources":["ng://@delon/abc/media/media.service.ts","ng://@delon/abc/media/media.component.ts","ng://@delon/abc/media/media.module.ts","ng://@delon/abc/media/plyr.types.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AlainConfigService, AlainMediaConfig, LazyService } from '@delon/util';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class MediaService {\n  private _cog: AlainMediaConfig;\n  private loaded = false;\n  private notify$ = new Subject<void>();\n\n  get cog(): AlainMediaConfig {\n    return this._cog;\n  }\n  set cog(val: AlainMediaConfig) {\n    this._cog = this.cogSrv.merge<AlainMediaConfig, 'media'>(\n      'media',\n      {\n        urls: ['https://cdn.bootcdn.net/ajax/libs/plyr/3.5.10/plyr.min.js', 'https://cdn.bootcdn.net/ajax/libs/plyr/3.5.10/plyr.css'],\n      },\n      val,\n    );\n  }\n\n  constructor(private cogSrv: AlainConfigService, private lazySrv: LazyService) {}\n\n  load(): this {\n    if (this.loaded) {\n      this.notify$.next();\n      return this;\n    }\n    this.loaded = true;\n    this.lazySrv.load(this.cog.urls!).then(() => this.notify$.next());\n    return this;\n  }\n\n  notify(): Observable<void> {\n    return this.notify$.asObservable();\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  Renderer2,\n  SimpleChange,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { InputNumber } from '@delon/util';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { MediaService } from './media.service';\nimport { PlyrMediaSource, PlyrMediaType } from './plyr.types';\n\ndeclare const Plyr: NzSafeAny;\n\n@Component({\n  selector: 'media',\n  exportAs: 'mediaComponent',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[style.display]': `'block'`,\n  },\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MediaComponent implements OnChanges, AfterViewInit, OnDestroy {\n  private _p: NzSafeAny;\n  private videoEl: HTMLElement;\n\n  // #region fields\n\n  @Input() type: PlyrMediaType = 'video';\n  @Input() source: string | PlyrMediaSource;\n  @Input() options: NzSafeAny;\n  @Input() @InputNumber() delay = 0;\n  @Output() readonly ready = new EventEmitter<NzSafeAny>();\n\n  // #endregion\n\n  get player(): NzSafeAny {\n    return this._p;\n  }\n\n  constructor(private el: ElementRef<HTMLElement>, private renderer: Renderer2, private srv: MediaService, private ngZone: NgZone) {}\n\n  private initDelay() {\n    this.ngZone.runOutsideAngular(() => setTimeout(() => this.init(), this.delay));\n  }\n\n  private init(): void {\n    if (!(window as any).Plyr) {\n      throw new Error(\n        `No window.Plyr found, please make sure that cdn or local path exists, the current referenced path is: ${JSON.stringify(\n          this.srv.cog.urls,\n        )}`,\n      );\n    }\n\n    this.ensureElement();\n\n    const player = (this._p = new Plyr(this.videoEl, {\n      ...this.srv.cog.options,\n    }));\n\n    player.on('ready', () => this.ready.next(player));\n\n    this.uploadSource();\n  }\n\n  private ensureElement() {\n    const { type } = this;\n    let el = this.el.nativeElement.querySelector(type) as HTMLElement;\n    if (!el) {\n      el = this.renderer.createElement(type);\n      (el as HTMLVideoElement).controls = true;\n      this.el.nativeElement.appendChild(el);\n    }\n    this.videoEl = el;\n  }\n\n  private destroy(): void {\n    if (this._p) {\n      this._p.destroy();\n    }\n  }\n\n  private uploadSource(): void {\n    const { source, type } = this;\n    this._p.source = typeof source === 'string' ? { type, sources: [{ src: source }] } : source;\n  }\n\n  ngAfterViewInit(): void {\n    this.srv\n      .load()\n      .notify()\n      .subscribe(() => this.initDelay());\n  }\n\n  ngOnChanges(changes: { [p in keyof MediaComponent]?: SimpleChange }): void {\n    this.srv.cog = { options: this.options };\n    if (changes.source && this._p) {\n      this.uploadSource();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DelonUtilModule } from '@delon/util';\nimport { MediaComponent } from './media.component';\n\nconst COMPONENTS = [MediaComponent];\n\n@NgModule({\n  imports: [CommonModule, DelonUtilModule],\n  declarations: [...COMPONENTS],\n  exports: [...COMPONENTS],\n})\nexport class MediaModule {}\n","export type PlyrMediaType = 'audio' | 'video';\nexport type PlyrProvider = 'html5' | 'youtube' | 'vimeo';\n\nexport interface PlyrMediaSource {\n  /**\n   * Note: YouTube and Vimeo are currently not supported as audio sources.\n   */\n  type: PlyrMediaType;\n\n  /**\n   * Title of the new media. Used for the aria-label attribute on the play button, and outer container. YouTube and Vimeo are populated automatically.\n   */\n  title?: string;\n\n  /**\n   * This is an array of sources. For HTML5 media, the properties of this object are mapped directly to HTML attributes so more can be added to the object if required.\n   */\n  sources: PlyrSource[];\n\n  /**\n   * The URL for the poster image (HTML5 video only).\n   */\n  poster?: string;\n\n  /**\n   * An array of track objects. Each element in the array is mapped directly to a track element and any keys mapped directly to HTML attributes so as in the example above,\n   * it will render as <track kind=\"captions\" label=\"English\" srclang=\"en\" src=\"https://cdn.selz.com/plyr/1.0/example_captions_en.vtt\" default> and similar for the French version.\n   * Booleans are converted to HTML5 value-less attributes.\n   */\n  tracks?: PlyrTrack[];\n}\n\nexport interface PlyrSource {\n  /**\n   * The URL of the media file (or YouTube/Vimeo URL).\n   */\n  src: string;\n  /**\n   * The MIME type of the media file (if HTML5).\n   */\n  type?: string;\n  provider?: PlyrProvider;\n  size?: number;\n}\n\nexport type PlyrTrackKind = 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata';\n\nexport interface PlyrTrack {\n  /**\n   * Indicates how the text track is meant to be used\n   */\n  kind: PlyrTrackKind;\n  /**\n   * Indicates a user-readable title for the track\n   */\n  label: string;\n  /**\n   * The language of the track text data. It must be a valid BCP 47 language tag. If the kind attribute is set to subtitles, then srclang must be defined.\n   */\n  srcLang?: string;\n  /**\n   * The URL of the track (.vtt file).\n   */\n  src: string;\n\n  default?: boolean;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;IAuBE,sBAAoB,MAA0B,EAAU,OAAoB;QAAxD,WAAM,GAAN,MAAM,CAAoB;QAAU,YAAO,GAAP,OAAO,CAAa;QAhBpE,WAAM,GAAG,KAAK,CAAC;QACf,YAAO,GAAG,IAAI,OAAO,EAAQ,CAAC;KAe0C;IAbhF,sBAAI,6BAAG;;;;QAAP;YACE,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;;;;;QACD,UAAQ,GAAqB;YAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAC3B,OAAO,EACP;gBACE,IAAI,EAAE,CAAC,2DAA2D,EAAE,wDAAwD,CAAC;aAC9H,EACD,GAAG,CACJ,CAAC;SACH;;;OATA;;;;;;IAaD,2BAAI;;;;;IAAJ;QAAA,iBAQC;QAPC,IAAI,mBAAA,IAAI,GAAC,MAAM,EAAE;YACf,mBAAA,IAAI,GAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,0BAAO,IAAI,GAAC;SACb;QACD,mBAAA,IAAI,GAAC,MAAM,GAAG,IAAI,CAAC;QACnB,mBAAA,IAAI,GAAC,OAAO,CAAC,IAAI,oBAAC,mBAAA,IAAI,GAAC,GAAG,CAAC,IAAI,GAAE,CAAC,IAAI;;;QAAC,cAAM,OAAA,mBAAA,KAAI,GAAC,OAAO,CAAC,IAAI,EAAE,GAAA,EAAC,CAAC;QAClE,0BAAO,IAAI,GAAC;KACb;;;;IAED,6BAAM;;;IAAN;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;KACpC;;gBAjCF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;gBAHzB,kBAAkB;gBAAoB,WAAW;;;uBAD1D;CAIA,IAkCC;;;;;;IAhCC,4BAA+B;;;;;IAC/B,8BAAuB;;;;;IACvB,+BAAsC;;;;;IAe1B,8BAAkC;;;;;IAAE,+BAA4B;;;;;;;;;IC4B5E,wBAAoB,EAA2B,EAAU,QAAmB,EAAU,GAAiB,EAAU,MAAc;QAA3G,OAAE,GAAF,EAAE,CAAyB;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAAU,QAAG,GAAH,GAAG,CAAc;QAAU,WAAM,GAAN,MAAM,CAAQ;;QAZtH,SAAI,GAAkB,OAAO,CAAC;QAGf,UAAK,GAAG,CAAC,CAAC;QACf,UAAK,GAAG,IAAI,YAAY,EAAa,CAAC;KAQ0E;IAJnI,sBAAI,kCAAM;;;;;;;QAAV;YACE,OAAO,IAAI,CAAC,EAAE,CAAC;SAChB;;;OAAA;;;;;IAIO,kCAAS;;;;IAAjB;QAAA,iBAEC;QADC,IAAI,CAAC,MAAM,CAAC,iBAAiB;;;QAAC,cAAM,OAAA,UAAU;;;QAAC,cAAM,OAAA,KAAI,CAAC,IAAI,EAAE,GAAA,GAAE,KAAI,CAAC,KAAK,CAAC,GAAA,EAAC,CAAC;KAChF;;;;;IAEO,6BAAI;;;;IAAZ;QAAA,iBAkBC;QAjBC,IAAI,CAAC,oBAAC,MAAM,IAAS,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,CACb,2GAAyG,IAAI,CAAC,SAAS,CACrH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAChB,CACJ,CAAC;SACH;QAED,IAAI,CAAC,aAAa,EAAE,CAAC;;YAEf,MAAM,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,eAC1C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EACvB,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,OAAO;;;QAAE,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAA,EAAC,CAAC;QAElD,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAEO,sCAAa;;;;IAArB;QACU,IAAA,gBAAI;;YACR,EAAE,sBAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,EAAe;QACjE,IAAI,CAAC,EAAE,EAAE;YACP,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACvC,oBAAC,EAAE,IAAsB,QAAQ,GAAG,IAAI,CAAC;YACzC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;SACvC;QACD,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;KACnB;;;;;IAEO,gCAAO;;;;IAAf;QACE,IAAI,IAAI,CAAC,EAAE,EAAE;YACX,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;SACnB;KACF;;;;;IAEO,qCAAY;;;;IAApB;QACQ,IAAA,SAAuB,EAArB,kBAAM,EAAE,cAAa;QAC7B,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,OAAO,MAAM,KAAK,QAAQ,GAAG,EAAE,IAAI,MAAA,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC;KAC7F;;;;IAED,wCAAe;;;IAAf;QAAA,iBAKC;QAJC,IAAI,CAAC,GAAG;aACL,IAAI,EAAE;aACN,MAAM,EAAE;aACR,SAAS;;;QAAC,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,GAAA,EAAC,CAAC;KACtC;;;;;IAED,oCAAW;;;;IAAX,UAAY,OAAuD;QACjE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;QACzC,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE,EAAE;YAC7B,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;KACF;;;;IAED,oCAAW;;;IAAX;QACE,IAAI,CAAC,OAAO,EAAE,CAAC;KAChB;;gBA7FF,SAAS,SAAC;oBACT,QAAQ,EAAE,OAAO;oBACjB,QAAQ,EAAE,gBAAgB;oBAC1B,QAAQ,EAAE,2BAA2B;oBACrC,IAAI,EAAE;wBACJ,iBAAiB,EAAE,SAAS;qBAC7B;oBACD,mBAAmB,EAAE,KAAK;oBAC1B,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;iBACtC;;;;gBA5BC,UAAU;gBAOV,SAAS;gBAMF,YAAY;gBAVnB,MAAM;;;uBAgCL,KAAK;yBACL,KAAK;0BACL,KAAK;wBACL,KAAK;wBACL,MAAM;;IADiB;QAAd,WAAW,EAAE;;iDAAW;IA0EpC,qBAAC;CA9FD,IA8FC;;;;;;IAlFC,4BAAsB;;;;;IACtB,iCAA6B;;IAI7B,8BAAuC;;IACvC,gCAA0C;;IAC1C,iCAA4B;;IAC5B,+BAAkC;;IAClC,+BAAyD;;;;;IAQ7C,4BAAmC;;;;;IAAE,kCAA2B;;;;;IAAE,6BAAyB;;;;;IAAE,gCAAsB;;;;;;;;;IC9C3H,UAAU,GAAG,CAAC,cAAc,CAAC;;IAEnC;KAK2B;;gBAL1B,QAAQ,SAAC;oBACR,OAAO,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC;oBACxC,YAAY,WAAM,UAAU,CAAC;oBAC7B,OAAO,WAAM,UAAU,CAAC;iBACzB;;IACyB,kBAAC;CAL3B;;;;;;;;;;8BCuBC;;;;;;IAvBC,+BAAoB;;;;;IAKpB,gCAAe;;;;;IAKf,kCAAsB;;;;;IAKtB,iCAAgB;;;;;;;IAOhB,iCAAqB;;;;;yBActB;;;;;;IAPC,yBAAY;;;;;IAIZ,0BAAc;;IACd,8BAAwB;;IACxB,0BAAc;;;;;wBAwBf;;;;;;IAfC,yBAAoB;;;;;IAIpB,0BAAc;;;;;IAId,4BAAiB;;;;;IAIjB,wBAAY;;IAEZ,4BAAkB;;;;;;;;;;;;;;;;;"}