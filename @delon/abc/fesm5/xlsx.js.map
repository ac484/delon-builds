{"version":3,"file":"xlsx.js.map","sources":["ng://@delon/abc/xlsx/xlsx.config.ts","ng://@delon/abc/xlsx/xlsx.service.ts","ng://@delon/abc/xlsx/xlsx.directive.ts","ng://@delon/abc/xlsx/xlsx.module.ts"],"sourcesContent":["export class XlsxConfig {\r\n  /**\r\n   * Xlsx library path\r\n   */\r\n  url? = '//cdn.bootcss.com/xlsx/0.12.13/xlsx.full.min.js';\r\n  /**\r\n   * Defines which Xlsx optional modules should get loaded, e.g:\r\n   *\r\n   * `[ '//cdn.bootcss.com/xlsx/0.12.13/cpexcel.js' ]`\r\n   */\r\n  modules?: string[] = [];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { saveAs } from 'file-saver';\r\nimport { LazyService, LazyResult } from '@delon/util';\r\n\r\nimport { XlsxExportOptions, XlsxExportSheet } from './xlsx.types';\r\nimport { XlsxConfig } from './xlsx.config';\r\n\r\ndeclare var XLSX: any;\r\n\r\n@Injectable()\r\nexport class XlsxService {\r\n  constructor(\r\n    private cog: XlsxConfig,\r\n    private http: HttpClient,\r\n    private lazy: LazyService,\r\n  ) {}\r\n\r\n  private init(): Promise<LazyResult[]> {\r\n    return this.lazy.load([this.cog.url].concat(this.cog.modules));\r\n  }\r\n\r\n  private read(wb: any): { [key: string]: any[][] } {\r\n    const ret: any = {};\r\n    wb.SheetNames.forEach(name => {\r\n      const sheet: any = wb.Sheets[name];\r\n      ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * å¯¼å¥Excelå¹¶è¾åºJSONï¼æ¯æ `<input type=\"file\">`ãURL å½¢å¼\r\n   * @param rABS å è½½æ°æ®æ¹å¼ `readAsBinaryString` ï¼é»è®¤ï¼ æ `readAsArrayBuffer`ï¼[æ´å¤ç»è](http://t.cn/R3n63A0)\r\n   */\r\n  import(\r\n    fileOrUrl: File | string,\r\n    rABS: 'readAsBinaryString' | 'readAsArrayBuffer' = 'readAsBinaryString',\r\n  ): Promise<{ [key: string]: any[][] }> {\r\n    return new Promise<{ [key: string]: any[][] }>((resolver, reject) => {\r\n      this.init().then(() => {\r\n        // from url\r\n        if (typeof fileOrUrl === 'string') {\r\n          this.http\r\n            .request('GET', fileOrUrl, { responseType: 'arraybuffer' })\r\n            .subscribe(\r\n              (res: ArrayBuffer) => {\r\n                const wb = XLSX.read(new Uint8Array(res), { type: 'array' });\r\n                resolver(this.read(wb));\r\n              },\r\n              (err: any) => {\r\n                reject(err);\r\n              },\r\n            );\r\n          return;\r\n        }\r\n        // from file\r\n        const reader: FileReader = new FileReader();\r\n        reader.onload = (e: any) => {\r\n          const wb: any = XLSX.read(e.target.result, { type: 'binary' });\r\n          resolver(this.read(wb));\r\n        };\r\n        reader[rABS](fileOrUrl);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** å¯¼åº */\r\n  export(options: XlsxExportOptions): Promise<void> {\r\n    return this.init().then(() => {\r\n      const wb: any = XLSX.utils.book_new();\r\n      if (Array.isArray(options.sheets)) {\r\n        (<XlsxExportSheet[]>options.sheets).forEach(\r\n          (value: XlsxExportSheet, index: number) => {\r\n            const ws: any = XLSX.utils.aoa_to_sheet(value.data);\r\n            XLSX.utils.book_append_sheet(\r\n              wb,\r\n              ws,\r\n              value.name || `Sheet${index + 1}`,\r\n            );\r\n          },\r\n        );\r\n      } else {\r\n        wb.SheetNames = Object.keys(options.sheets);\r\n        wb.Sheets = options.sheets;\r\n      }\r\n\r\n      if (options.callback) options.callback(wb);\r\n\r\n      const wbout: ArrayBuffer = XLSX.write(\r\n        wb,\r\n        Object.assign(\r\n          {\r\n            bookType: 'xlsx',\r\n            bookSST: false,\r\n            type: 'array',\r\n          },\r\n          options.opts,\r\n        ),\r\n      );\r\n      saveAs(\r\n        new Blob([wbout], { type: 'application/octet-stream' }),\r\n        options.filename || 'export.xlsx',\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { Directive, HostListener, Input } from '@angular/core';\r\nimport { XlsxService } from './xlsx.service';\r\nimport { XlsxExportOptions } from './xlsx.types';\r\n\r\n@Directive({ selector: '[xlsx]' })\r\nexport class XlsxDirective {\r\n  @Input('xlsx') data: XlsxExportOptions;\r\n\r\n  constructor(private srv: XlsxService) {}\r\n\r\n  @HostListener('click')\r\n  _click() {\r\n    this.srv.export(this.data);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DelonUtilModule } from '@delon/util';\r\n\r\nimport { XlsxService } from './xlsx.service';\r\nimport { XlsxDirective } from './xlsx.directive';\r\nimport { XlsxConfig } from './xlsx.config';\r\n\r\nconst COMPONENTS = [XlsxDirective];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, DelonUtilModule],\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n})\r\nexport class XlsxModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: XlsxModule,\r\n      providers: [XlsxService, XlsxConfig],\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
