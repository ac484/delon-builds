import { ENVIRONMENT_INITIALIZER, inject, makeEnvironmentProviders } from '@angular/core';
import { RouteReuseStrategy } from '@angular/router';
import { REUSE_TAB_CACHED_MANAGER, ReuseTabCachedManagerFactory } from './reuse-tab.cache';
import { ReuseTabService } from './reuse-tab.service';
import { REUSE_TAB_STORAGE_KEY, REUSE_TAB_STORAGE_KEY_DEFAULT, REUSE_TAB_STORAGE_STATE, ReuseTabLocalStorageState } from './reuse-tab.state';
import { ReuseTabStrategy } from './reuse-tab.strategy';
export var ReuseTabFeatureKind;
(function (ReuseTabFeatureKind) {
    ReuseTabFeatureKind[ReuseTabFeatureKind["CacheManager"] = 0] = "CacheManager";
    ReuseTabFeatureKind[ReuseTabFeatureKind["Store"] = 1] = "Store";
})(ReuseTabFeatureKind || (ReuseTabFeatureKind = {}));
function makeFeature(kind, providers) {
    return {
        ɵkind: kind,
        ɵproviders: providers
    };
}
/**
 * Configures reuse-tab to be available for injection.
 *
 * @see {@link withLocalStorage}
 * @see {@link withCacheManager}
 */
export function provideReuseTabConfig(options) {
    const providers = [
        ReuseTabService,
        {
            provide: REUSE_TAB_STORAGE_KEY,
            useValue: options?.storeKey ?? REUSE_TAB_STORAGE_KEY_DEFAULT
        },
        (options?.cacheManager ?? withCacheManager()).ɵproviders,
        (options?.store ?? withLocalStorage()).ɵproviders,
        {
            provide: RouteReuseStrategy,
            useClass: ReuseTabStrategy,
            deps: [ReuseTabService]
        },
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useValue: () => {
                const srv = inject(ReuseTabService);
                if (options?.debug)
                    srv.debug = options.debug;
                if (options?.mode)
                    srv.mode = options.mode;
                if (options?.routeParamMatchMode)
                    srv.routeParamMatchMode = options.routeParamMatchMode;
                if (options?.max)
                    srv.max = options.max;
                if (options?.excludes)
                    srv.excludes = options.excludes;
            }
        }
    ];
    return makeEnvironmentProviders(providers);
}
export function withCacheManager() {
    return makeFeature(ReuseTabFeatureKind.CacheManager, [
        {
            provide: REUSE_TAB_CACHED_MANAGER,
            useFactory: () => new ReuseTabCachedManagerFactory()
        }
    ]);
}
export function withLocalStorage() {
    return makeFeature(ReuseTabFeatureKind.Store, [
        {
            provide: REUSE_TAB_STORAGE_STATE,
            useFactory: () => new ReuseTabLocalStorageState()
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FiYy9yZXVzZS10YWIvcHJvdmlkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBR3ZCLE1BQU0sRUFDTix3QkFBd0IsRUFDekIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFckQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFM0YsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsNkJBQTZCLEVBQzdCLHVCQUF1QixFQUN2Qix5QkFBeUIsRUFDMUIsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxNQUFNLENBQU4sSUFBWSxtQkFHWDtBQUhELFdBQVksbUJBQW1CO0lBQzdCLDZFQUFZLENBQUE7SUFDWiwrREFBSyxDQUFBO0FBQ1AsQ0FBQyxFQUhXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFHOUI7QUFPRCxTQUFTLFdBQVcsQ0FBb0MsSUFBVyxFQUFFLFNBQXFCO0lBQ3hGLE9BQU87UUFDTCxLQUFLLEVBQUUsSUFBSTtRQUNYLFVBQVUsRUFBRSxTQUFTO0tBQ3RCLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQUMsT0FTckM7SUFDQyxNQUFNLFNBQVMsR0FBZTtRQUM1QixlQUFlO1FBQ2Y7WUFDRSxPQUFPLEVBQUUscUJBQXFCO1lBQzlCLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxJQUFJLDZCQUE2QjtTQUM3RDtRQUNELENBQUMsT0FBTyxFQUFFLFlBQVksSUFBSSxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsVUFBVTtRQUN4RCxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLFVBQVU7UUFDakQ7WUFDRSxPQUFPLEVBQUUsa0JBQWtCO1lBQzNCLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDO1NBQ3hCO1FBQ0Q7WUFDRSxPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLEtBQUssRUFBRSxJQUFJO1lBQ1gsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDYixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ3BDLElBQUksT0FBTyxFQUFFLEtBQUs7b0JBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUM5QyxJQUFJLE9BQU8sRUFBRSxJQUFJO29CQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDM0MsSUFBSSxPQUFPLEVBQUUsbUJBQW1CO29CQUFFLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUM7Z0JBQ3hGLElBQUksT0FBTyxFQUFFLEdBQUc7b0JBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO2dCQUN4QyxJQUFJLE9BQU8sRUFBRSxRQUFRO29CQUFFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUN6RCxDQUFDO1NBQ0Y7S0FDRixDQUFDO0lBRUYsT0FBTyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQjtJQUM5QixPQUFPLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUU7UUFDbkQ7WUFDRSxPQUFPLEVBQUUsd0JBQXdCO1lBQ2pDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLDRCQUE0QixFQUFFO1NBQ3JEO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0I7SUFDOUIsT0FBTyxXQUFXLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFO1FBQzVDO1lBQ0UsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSx5QkFBeUIsRUFBRTtTQUNsRDtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFTlZJUk9OTUVOVF9JTklUSUFMSVpFUixcbiAgRW52aXJvbm1lbnRQcm92aWRlcnMsXG4gIFByb3ZpZGVyLFxuICBpbmplY3QsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVyc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlUmV1c2VTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IFJFVVNFX1RBQl9DQUNIRURfTUFOQUdFUiwgUmV1c2VUYWJDYWNoZWRNYW5hZ2VyRmFjdG9yeSB9IGZyb20gJy4vcmV1c2UtdGFiLmNhY2hlJztcbmltcG9ydCB7IFJldXNlVGFiTWF0Y2hNb2RlLCBSZXVzZVRhYlJvdXRlUGFyYW1NYXRjaE1vZGUgfSBmcm9tICcuL3JldXNlLXRhYi5pbnRlcmZhY2VzJztcbmltcG9ydCB7IFJldXNlVGFiU2VydmljZSB9IGZyb20gJy4vcmV1c2UtdGFiLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgUkVVU0VfVEFCX1NUT1JBR0VfS0VZLFxuICBSRVVTRV9UQUJfU1RPUkFHRV9LRVlfREVGQVVMVCxcbiAgUkVVU0VfVEFCX1NUT1JBR0VfU1RBVEUsXG4gIFJldXNlVGFiTG9jYWxTdG9yYWdlU3RhdGVcbn0gZnJvbSAnLi9yZXVzZS10YWIuc3RhdGUnO1xuaW1wb3J0IHsgUmV1c2VUYWJTdHJhdGVneSB9IGZyb20gJy4vcmV1c2UtdGFiLnN0cmF0ZWd5JztcblxuZXhwb3J0IGVudW0gUmV1c2VUYWJGZWF0dXJlS2luZCB7XG4gIENhY2hlTWFuYWdlcixcbiAgU3RvcmVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXVzZVRhYkZlYXR1cmU8S2luZFQgZXh0ZW5kcyBSZXVzZVRhYkZlYXR1cmVLaW5kPiB7XG4gIMm1a2luZDogS2luZFQ7XG4gIMm1cHJvdmlkZXJzOiBQcm92aWRlcltdO1xufVxuXG5mdW5jdGlvbiBtYWtlRmVhdHVyZTxLaW5kVCBleHRlbmRzIFJldXNlVGFiRmVhdHVyZUtpbmQ+KGtpbmQ6IEtpbmRULCBwcm92aWRlcnM6IFByb3ZpZGVyW10pOiBSZXVzZVRhYkZlYXR1cmU8S2luZFQ+IHtcbiAgcmV0dXJuIHtcbiAgICDJtWtpbmQ6IGtpbmQsXG4gICAgybVwcm92aWRlcnM6IHByb3ZpZGVyc1xuICB9O1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZXMgcmV1c2UtdGFiIHRvIGJlIGF2YWlsYWJsZSBmb3IgaW5qZWN0aW9uLlxuICpcbiAqIEBzZWUge0BsaW5rIHdpdGhMb2NhbFN0b3JhZ2V9XG4gKiBAc2VlIHtAbGluayB3aXRoQ2FjaGVNYW5hZ2VyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVJldXNlVGFiQ29uZmlnKG9wdGlvbnM/OiB7XG4gIGRlYnVnPzogYm9vbGVhbjtcbiAgbW9kZT86IFJldXNlVGFiTWF0Y2hNb2RlO1xuICByb3V0ZVBhcmFtTWF0Y2hNb2RlPzogUmV1c2VUYWJSb3V0ZVBhcmFtTWF0Y2hNb2RlO1xuICBtYXg/OiBudW1iZXI7XG4gIGV4Y2x1ZGVzPzogUmVnRXhwW107XG4gIHN0b3JlS2V5Pzogc3RyaW5nO1xuICBjYWNoZU1hbmFnZXI/OiBSZXVzZVRhYkZlYXR1cmU8UmV1c2VUYWJGZWF0dXJlS2luZC5DYWNoZU1hbmFnZXI+O1xuICBzdG9yZT86IFJldXNlVGFiRmVhdHVyZTxSZXVzZVRhYkZlYXR1cmVLaW5kLlN0b3JlPjtcbn0pOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG4gIGNvbnN0IHByb3ZpZGVyczogUHJvdmlkZXJbXSA9IFtcbiAgICBSZXVzZVRhYlNlcnZpY2UsXG4gICAge1xuICAgICAgcHJvdmlkZTogUkVVU0VfVEFCX1NUT1JBR0VfS0VZLFxuICAgICAgdXNlVmFsdWU6IG9wdGlvbnM/LnN0b3JlS2V5ID8/IFJFVVNFX1RBQl9TVE9SQUdFX0tFWV9ERUZBVUxUXG4gICAgfSxcbiAgICAob3B0aW9ucz8uY2FjaGVNYW5hZ2VyID8/IHdpdGhDYWNoZU1hbmFnZXIoKSkuybVwcm92aWRlcnMsXG4gICAgKG9wdGlvbnM/LnN0b3JlID8/IHdpdGhMb2NhbFN0b3JhZ2UoKSkuybVwcm92aWRlcnMsXG4gICAge1xuICAgICAgcHJvdmlkZTogUm91dGVSZXVzZVN0cmF0ZWd5LFxuICAgICAgdXNlQ2xhc3M6IFJldXNlVGFiU3RyYXRlZ3ksXG4gICAgICBkZXBzOiBbUmV1c2VUYWJTZXJ2aWNlXVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVzZVZhbHVlOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNydiA9IGluamVjdChSZXVzZVRhYlNlcnZpY2UpO1xuICAgICAgICBpZiAob3B0aW9ucz8uZGVidWcpIHNydi5kZWJ1ZyA9IG9wdGlvbnMuZGVidWc7XG4gICAgICAgIGlmIChvcHRpb25zPy5tb2RlKSBzcnYubW9kZSA9IG9wdGlvbnMubW9kZTtcbiAgICAgICAgaWYgKG9wdGlvbnM/LnJvdXRlUGFyYW1NYXRjaE1vZGUpIHNydi5yb3V0ZVBhcmFtTWF0Y2hNb2RlID0gb3B0aW9ucy5yb3V0ZVBhcmFtTWF0Y2hNb2RlO1xuICAgICAgICBpZiAob3B0aW9ucz8ubWF4KSBzcnYubWF4ID0gb3B0aW9ucy5tYXg7XG4gICAgICAgIGlmIChvcHRpb25zPy5leGNsdWRlcykgc3J2LmV4Y2x1ZGVzID0gb3B0aW9ucy5leGNsdWRlcztcbiAgICAgIH1cbiAgICB9XG4gIF07XG5cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhwcm92aWRlcnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aENhY2hlTWFuYWdlcigpOiBSZXVzZVRhYkZlYXR1cmU8UmV1c2VUYWJGZWF0dXJlS2luZC5DYWNoZU1hbmFnZXI+IHtcbiAgcmV0dXJuIG1ha2VGZWF0dXJlKFJldXNlVGFiRmVhdHVyZUtpbmQuQ2FjaGVNYW5hZ2VyLCBbXG4gICAge1xuICAgICAgcHJvdmlkZTogUkVVU0VfVEFCX0NBQ0hFRF9NQU5BR0VSLFxuICAgICAgdXNlRmFjdG9yeTogKCkgPT4gbmV3IFJldXNlVGFiQ2FjaGVkTWFuYWdlckZhY3RvcnkoKVxuICAgIH1cbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoTG9jYWxTdG9yYWdlKCk6IFJldXNlVGFiRmVhdHVyZTxSZXVzZVRhYkZlYXR1cmVLaW5kLlN0b3JlPiB7XG4gIHJldHVybiBtYWtlRmVhdHVyZShSZXVzZVRhYkZlYXR1cmVLaW5kLlN0b3JlLCBbXG4gICAge1xuICAgICAgcHJvdmlkZTogUkVVU0VfVEFCX1NUT1JBR0VfU1RBVEUsXG4gICAgICB1c2VGYWN0b3J5OiAoKSA9PiBuZXcgUmV1c2VUYWJMb2NhbFN0b3JhZ2VTdGF0ZSgpXG4gICAgfVxuICBdKTtcbn1cbiJdfQ==