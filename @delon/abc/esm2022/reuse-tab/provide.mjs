import { makeEnvironmentProviders } from '@angular/core';
import { RouteReuseStrategy } from '@angular/router';
import { REUSE_TAB_CACHED_MANAGER, ReuseTabCachedManagerFactory } from './reuse-tab.cache';
import { ReuseTabService } from './reuse-tab.service';
import { REUSE_TAB_STORAGE_KEY, REUSE_TAB_STORAGE_STATE, ReuseTabLocalStorageState } from './reuse-tab.state';
import { ReuseTabStrategy } from './reuse-tab.strategy';
export var ReuseTabFeatureKind;
(function (ReuseTabFeatureKind) {
    ReuseTabFeatureKind[ReuseTabFeatureKind["Cache"] = 0] = "Cache";
    ReuseTabFeatureKind[ReuseTabFeatureKind["Store"] = 1] = "Store";
})(ReuseTabFeatureKind || (ReuseTabFeatureKind = {}));
function makeFeature(kind, providers) {
    return {
        ɵkind: kind,
        ɵproviders: providers
    };
}
/**
 * Configures reuse-tab to be available for injection.
 *
 * @see {@link withLocalStorage}
 * @see {@link withCache}
 */
export function provideReuseTabConfig(options) {
    return makeEnvironmentProviders([
        {
            provide: REUSE_TAB_STORAGE_KEY,
            useValue: options?.storeKey ?? '_reuse-tab-state'
        },
        (options?.cache ?? withCache()).ɵproviders,
        (options?.store ?? withLocalStorage()).ɵproviders,
        {
            provide: RouteReuseStrategy,
            useClass: ReuseTabStrategy,
            deps: [ReuseTabService]
        }
    ]);
}
export function withLocalStorage() {
    return makeFeature(ReuseTabFeatureKind.Store, [
        {
            provide: REUSE_TAB_STORAGE_STATE,
            useFactory: () => new ReuseTabLocalStorageState()
        }
    ]);
}
export function withCache() {
    return makeFeature(ReuseTabFeatureKind.Cache, [
        {
            provide: REUSE_TAB_CACHED_MANAGER,
            useFactory: () => new ReuseTabCachedManagerFactory()
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FiYy9yZXVzZS10YWIvcHJvdmlkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWtDLHdCQUF3QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXJELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzNGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsdUJBQXVCLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxNQUFNLENBQU4sSUFBWSxtQkFHWDtBQUhELFdBQVksbUJBQW1CO0lBQzdCLCtEQUFLLENBQUE7SUFDTCwrREFBSyxDQUFBO0FBQ1AsQ0FBQyxFQUhXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFHOUI7QUFPRCxTQUFTLFdBQVcsQ0FBb0MsSUFBVyxFQUFFLFNBQXFCO0lBQ3hGLE9BQU87UUFDTCxLQUFLLEVBQUUsSUFBSTtRQUNYLFVBQVUsRUFBRSxTQUFTO0tBQ3RCLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQUMsT0FJckM7SUFDQyxPQUFPLHdCQUF3QixDQUFDO1FBQzlCO1lBQ0UsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsSUFBSSxrQkFBa0I7U0FDbEQ7UUFDRCxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxVQUFVO1FBQzFDLENBQUMsT0FBTyxFQUFFLEtBQUssSUFBSSxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsVUFBVTtRQUNqRDtZQUNFLE9BQU8sRUFBRSxrQkFBa0I7WUFDM0IsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUM7U0FDeEI7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQjtJQUM5QixPQUFPLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUU7UUFDNUM7WUFDRSxPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLHlCQUF5QixFQUFFO1NBQ2xEO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTO0lBQ3ZCLE9BQU8sV0FBVyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRTtRQUM1QztZQUNFLE9BQU8sRUFBRSx3QkFBd0I7WUFDakMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksNEJBQTRCLEVBQUU7U0FDckQ7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW52aXJvbm1lbnRQcm92aWRlcnMsIFByb3ZpZGVyLCBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlUmV1c2VTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IFJFVVNFX1RBQl9DQUNIRURfTUFOQUdFUiwgUmV1c2VUYWJDYWNoZWRNYW5hZ2VyRmFjdG9yeSB9IGZyb20gJy4vcmV1c2UtdGFiLmNhY2hlJztcbmltcG9ydCB7IFJldXNlVGFiU2VydmljZSB9IGZyb20gJy4vcmV1c2UtdGFiLnNlcnZpY2UnO1xuaW1wb3J0IHsgUkVVU0VfVEFCX1NUT1JBR0VfS0VZLCBSRVVTRV9UQUJfU1RPUkFHRV9TVEFURSwgUmV1c2VUYWJMb2NhbFN0b3JhZ2VTdGF0ZSB9IGZyb20gJy4vcmV1c2UtdGFiLnN0YXRlJztcbmltcG9ydCB7IFJldXNlVGFiU3RyYXRlZ3kgfSBmcm9tICcuL3JldXNlLXRhYi5zdHJhdGVneSc7XG5cbmV4cG9ydCBlbnVtIFJldXNlVGFiRmVhdHVyZUtpbmQge1xuICBDYWNoZSxcbiAgU3RvcmVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXVzZVRhYkZlYXR1cmU8S2luZFQgZXh0ZW5kcyBSZXVzZVRhYkZlYXR1cmVLaW5kPiB7XG4gIMm1a2luZDogS2luZFQ7XG4gIMm1cHJvdmlkZXJzOiBQcm92aWRlcltdO1xufVxuXG5mdW5jdGlvbiBtYWtlRmVhdHVyZTxLaW5kVCBleHRlbmRzIFJldXNlVGFiRmVhdHVyZUtpbmQ+KGtpbmQ6IEtpbmRULCBwcm92aWRlcnM6IFByb3ZpZGVyW10pOiBSZXVzZVRhYkZlYXR1cmU8S2luZFQ+IHtcbiAgcmV0dXJuIHtcbiAgICDJtWtpbmQ6IGtpbmQsXG4gICAgybVwcm92aWRlcnM6IHByb3ZpZGVyc1xuICB9O1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZXMgcmV1c2UtdGFiIHRvIGJlIGF2YWlsYWJsZSBmb3IgaW5qZWN0aW9uLlxuICpcbiAqIEBzZWUge0BsaW5rIHdpdGhMb2NhbFN0b3JhZ2V9XG4gKiBAc2VlIHtAbGluayB3aXRoQ2FjaGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUmV1c2VUYWJDb25maWcob3B0aW9ucz86IHtcbiAgc3RvcmVLZXk/OiBzdHJpbmc7XG4gIGNhY2hlPzogUmV1c2VUYWJGZWF0dXJlPFJldXNlVGFiRmVhdHVyZUtpbmQuQ2FjaGU+O1xuICBzdG9yZT86IFJldXNlVGFiRmVhdHVyZTxSZXVzZVRhYkZlYXR1cmVLaW5kLlN0b3JlPjtcbn0pOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG4gIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMoW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJFVVNFX1RBQl9TVE9SQUdFX0tFWSxcbiAgICAgIHVzZVZhbHVlOiBvcHRpb25zPy5zdG9yZUtleSA/PyAnX3JldXNlLXRhYi1zdGF0ZSdcbiAgICB9LFxuICAgIChvcHRpb25zPy5jYWNoZSA/PyB3aXRoQ2FjaGUoKSkuybVwcm92aWRlcnMsXG4gICAgKG9wdGlvbnM/LnN0b3JlID8/IHdpdGhMb2NhbFN0b3JhZ2UoKSkuybVwcm92aWRlcnMsXG4gICAge1xuICAgICAgcHJvdmlkZTogUm91dGVSZXVzZVN0cmF0ZWd5LFxuICAgICAgdXNlQ2xhc3M6IFJldXNlVGFiU3RyYXRlZ3ksXG4gICAgICBkZXBzOiBbUmV1c2VUYWJTZXJ2aWNlXVxuICAgIH1cbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoTG9jYWxTdG9yYWdlKCk6IFJldXNlVGFiRmVhdHVyZTxSZXVzZVRhYkZlYXR1cmVLaW5kLlN0b3JlPiB7XG4gIHJldHVybiBtYWtlRmVhdHVyZShSZXVzZVRhYkZlYXR1cmVLaW5kLlN0b3JlLCBbXG4gICAge1xuICAgICAgcHJvdmlkZTogUkVVU0VfVEFCX1NUT1JBR0VfU1RBVEUsXG4gICAgICB1c2VGYWN0b3J5OiAoKSA9PiBuZXcgUmV1c2VUYWJMb2NhbFN0b3JhZ2VTdGF0ZSgpXG4gICAgfVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhDYWNoZSgpOiBSZXVzZVRhYkZlYXR1cmU8UmV1c2VUYWJGZWF0dXJlS2luZC5DYWNoZT4ge1xuICByZXR1cm4gbWFrZUZlYXR1cmUoUmV1c2VUYWJGZWF0dXJlS2luZC5DYWNoZSwgW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJFVVNFX1RBQl9DQUNIRURfTUFOQUdFUixcbiAgICAgIHVzZUZhY3Rvcnk6ICgpID0+IG5ldyBSZXVzZVRhYkNhY2hlZE1hbmFnZXJGYWN0b3J5KClcbiAgICB9XG4gIF0pO1xufVxuIl19