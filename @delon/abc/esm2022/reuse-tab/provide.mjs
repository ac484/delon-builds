import { ENVIRONMENT_INITIALIZER, inject, makeEnvironmentProviders } from '@angular/core';
import { RouteReuseStrategy } from '@angular/router';
import { REUSE_TAB_CACHED_MANAGER, ReuseTabCachedManagerFactory } from './reuse-tab.cache';
import { ReuseTabService } from './reuse-tab.service';
import { REUSE_TAB_STORAGE_KEY, REUSE_TAB_STORAGE_STATE, ReuseTabLocalStorageState } from './reuse-tab.state';
import { ReuseTabStrategy } from './reuse-tab.strategy';
export var ReuseTabFeatureKind;
(function (ReuseTabFeatureKind) {
    ReuseTabFeatureKind[ReuseTabFeatureKind["CacheManager"] = 0] = "CacheManager";
    ReuseTabFeatureKind[ReuseTabFeatureKind["Store"] = 1] = "Store";
})(ReuseTabFeatureKind || (ReuseTabFeatureKind = {}));
function makeFeature(kind, providers) {
    return {
        ɵkind: kind,
        ɵproviders: providers
    };
}
/**
 * Configures reuse-tab to be available for injection.
 *
 * @see {@link withLocalStorage}
 * @see {@link withCacheManager}
 */
export function provideReuseTabConfig(options) {
    const providers = [
        {
            provide: REUSE_TAB_STORAGE_KEY,
            useValue: options?.storeKey ?? '_reuse-tab-state'
        },
        (options?.cacheManager ?? withCacheManager()).ɵproviders,
        (options?.store ?? withLocalStorage()).ɵproviders,
        {
            provide: RouteReuseStrategy,
            useClass: ReuseTabStrategy,
            deps: [ReuseTabService]
        },
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useValue: () => {
                const srv = inject(ReuseTabService);
                if (options?.debug)
                    srv.debug = options.debug;
                if (options?.mode)
                    srv.mode = options.mode;
                if (options?.routeParamMatchMode)
                    srv.routeParamMatchMode = options.routeParamMatchMode;
                if (options?.max)
                    srv.max = options.max;
                if (options?.excludes)
                    srv.excludes = options.excludes;
            }
        }
    ];
    return makeEnvironmentProviders(providers);
}
export function withCacheManager() {
    return makeFeature(ReuseTabFeatureKind.CacheManager, [
        {
            provide: REUSE_TAB_CACHED_MANAGER,
            useFactory: () => new ReuseTabCachedManagerFactory()
        }
    ]);
}
export function withLocalStorage() {
    return makeFeature(ReuseTabFeatureKind.Store, [
        {
            provide: REUSE_TAB_STORAGE_STATE,
            useFactory: () => new ReuseTabLocalStorageState()
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FiYy9yZXVzZS10YWIvcHJvdmlkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBR3ZCLE1BQU0sRUFDTix3QkFBd0IsRUFDekIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFckQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFM0YsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSx1QkFBdUIsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXhELE1BQU0sQ0FBTixJQUFZLG1CQUdYO0FBSEQsV0FBWSxtQkFBbUI7SUFDN0IsNkVBQVksQ0FBQTtJQUNaLCtEQUFLLENBQUE7QUFDUCxDQUFDLEVBSFcsbUJBQW1CLEtBQW5CLG1CQUFtQixRQUc5QjtBQU9ELFNBQVMsV0FBVyxDQUFvQyxJQUFXLEVBQUUsU0FBcUI7SUFDeEYsT0FBTztRQUNMLEtBQUssRUFBRSxJQUFJO1FBQ1gsVUFBVSxFQUFFLFNBQVM7S0FDdEIsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxPQVNyQztJQUNDLE1BQU0sU0FBUyxHQUFlO1FBQzVCO1lBQ0UsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsSUFBSSxrQkFBa0I7U0FDbEQ7UUFDRCxDQUFDLE9BQU8sRUFBRSxZQUFZLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLFVBQVU7UUFDeEQsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxVQUFVO1FBQ2pEO1lBQ0UsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQztTQUN4QjtRQUNEO1lBQ0UsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxLQUFLLEVBQUUsSUFBSTtZQUNYLFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ2IsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLE9BQU8sRUFBRSxLQUFLO29CQUFFLEdBQUcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDOUMsSUFBSSxPQUFPLEVBQUUsSUFBSTtvQkFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQzNDLElBQUksT0FBTyxFQUFFLG1CQUFtQjtvQkFBRSxHQUFHLENBQUMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDO2dCQUN4RixJQUFJLE9BQU8sRUFBRSxHQUFHO29CQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztnQkFDeEMsSUFBSSxPQUFPLEVBQUUsUUFBUTtvQkFBRSxHQUFHLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDekQsQ0FBQztTQUNGO0tBQ0YsQ0FBQztJQUVGLE9BQU8sd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0I7SUFDOUIsT0FBTyxXQUFXLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFO1FBQ25EO1lBQ0UsT0FBTyxFQUFFLHdCQUF3QjtZQUNqQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSw0QkFBNEIsRUFBRTtTQUNyRDtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCO0lBQzlCLE9BQU8sV0FBVyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRTtRQUM1QztZQUNFLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUkseUJBQXlCLEVBQUU7U0FDbEQ7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICBQcm92aWRlcixcbiAgaW5qZWN0LFxuICBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZVJldXNlU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBSRVVTRV9UQUJfQ0FDSEVEX01BTkFHRVIsIFJldXNlVGFiQ2FjaGVkTWFuYWdlckZhY3RvcnkgfSBmcm9tICcuL3JldXNlLXRhYi5jYWNoZSc7XG5pbXBvcnQgeyBSZXVzZVRhYk1hdGNoTW9kZSwgUmV1c2VUYWJSb3V0ZVBhcmFtTWF0Y2hNb2RlIH0gZnJvbSAnLi9yZXVzZS10YWIuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBSZXVzZVRhYlNlcnZpY2UgfSBmcm9tICcuL3JldXNlLXRhYi5zZXJ2aWNlJztcbmltcG9ydCB7IFJFVVNFX1RBQl9TVE9SQUdFX0tFWSwgUkVVU0VfVEFCX1NUT1JBR0VfU1RBVEUsIFJldXNlVGFiTG9jYWxTdG9yYWdlU3RhdGUgfSBmcm9tICcuL3JldXNlLXRhYi5zdGF0ZSc7XG5pbXBvcnQgeyBSZXVzZVRhYlN0cmF0ZWd5IH0gZnJvbSAnLi9yZXVzZS10YWIuc3RyYXRlZ3knO1xuXG5leHBvcnQgZW51bSBSZXVzZVRhYkZlYXR1cmVLaW5kIHtcbiAgQ2FjaGVNYW5hZ2VyLFxuICBTdG9yZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJldXNlVGFiRmVhdHVyZTxLaW5kVCBleHRlbmRzIFJldXNlVGFiRmVhdHVyZUtpbmQ+IHtcbiAgybVraW5kOiBLaW5kVDtcbiAgybVwcm92aWRlcnM6IFByb3ZpZGVyW107XG59XG5cbmZ1bmN0aW9uIG1ha2VGZWF0dXJlPEtpbmRUIGV4dGVuZHMgUmV1c2VUYWJGZWF0dXJlS2luZD4oa2luZDogS2luZFQsIHByb3ZpZGVyczogUHJvdmlkZXJbXSk6IFJldXNlVGFiRmVhdHVyZTxLaW5kVD4ge1xuICByZXR1cm4ge1xuICAgIMm1a2luZDoga2luZCxcbiAgICDJtXByb3ZpZGVyczogcHJvdmlkZXJzXG4gIH07XG59XG5cbi8qKlxuICogQ29uZmlndXJlcyByZXVzZS10YWIgdG8gYmUgYXZhaWxhYmxlIGZvciBpbmplY3Rpb24uXG4gKlxuICogQHNlZSB7QGxpbmsgd2l0aExvY2FsU3RvcmFnZX1cbiAqIEBzZWUge0BsaW5rIHdpdGhDYWNoZU1hbmFnZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUmV1c2VUYWJDb25maWcob3B0aW9ucz86IHtcbiAgZGVidWc/OiBib29sZWFuO1xuICBtb2RlPzogUmV1c2VUYWJNYXRjaE1vZGU7XG4gIHJvdXRlUGFyYW1NYXRjaE1vZGU/OiBSZXVzZVRhYlJvdXRlUGFyYW1NYXRjaE1vZGU7XG4gIG1heD86IG51bWJlcjtcbiAgZXhjbHVkZXM/OiBSZWdFeHBbXTtcbiAgc3RvcmVLZXk/OiBzdHJpbmc7XG4gIGNhY2hlTWFuYWdlcj86IFJldXNlVGFiRmVhdHVyZTxSZXVzZVRhYkZlYXR1cmVLaW5kLkNhY2hlTWFuYWdlcj47XG4gIHN0b3JlPzogUmV1c2VUYWJGZWF0dXJlPFJldXNlVGFiRmVhdHVyZUtpbmQuU3RvcmU+O1xufSk6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgY29uc3QgcHJvdmlkZXJzOiBQcm92aWRlcltdID0gW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJFVVNFX1RBQl9TVE9SQUdFX0tFWSxcbiAgICAgIHVzZVZhbHVlOiBvcHRpb25zPy5zdG9yZUtleSA/PyAnX3JldXNlLXRhYi1zdGF0ZSdcbiAgICB9LFxuICAgIChvcHRpb25zPy5jYWNoZU1hbmFnZXIgPz8gd2l0aENhY2hlTWFuYWdlcigpKS7JtXByb3ZpZGVycyxcbiAgICAob3B0aW9ucz8uc3RvcmUgPz8gd2l0aExvY2FsU3RvcmFnZSgpKS7JtXByb3ZpZGVycyxcbiAgICB7XG4gICAgICBwcm92aWRlOiBSb3V0ZVJldXNlU3RyYXRlZ3ksXG4gICAgICB1c2VDbGFzczogUmV1c2VUYWJTdHJhdGVneSxcbiAgICAgIGRlcHM6IFtSZXVzZVRhYlNlcnZpY2VdXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBFTlZJUk9OTUVOVF9JTklUSUFMSVpFUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlVmFsdWU6ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3J2ID0gaW5qZWN0KFJldXNlVGFiU2VydmljZSk7XG4gICAgICAgIGlmIChvcHRpb25zPy5kZWJ1Zykgc3J2LmRlYnVnID0gb3B0aW9ucy5kZWJ1ZztcbiAgICAgICAgaWYgKG9wdGlvbnM/Lm1vZGUpIHNydi5tb2RlID0gb3B0aW9ucy5tb2RlO1xuICAgICAgICBpZiAob3B0aW9ucz8ucm91dGVQYXJhbU1hdGNoTW9kZSkgc3J2LnJvdXRlUGFyYW1NYXRjaE1vZGUgPSBvcHRpb25zLnJvdXRlUGFyYW1NYXRjaE1vZGU7XG4gICAgICAgIGlmIChvcHRpb25zPy5tYXgpIHNydi5tYXggPSBvcHRpb25zLm1heDtcbiAgICAgICAgaWYgKG9wdGlvbnM/LmV4Y2x1ZGVzKSBzcnYuZXhjbHVkZXMgPSBvcHRpb25zLmV4Y2x1ZGVzO1xuICAgICAgfVxuICAgIH1cbiAgXTtcblxuICByZXR1cm4gbWFrZUVudmlyb25tZW50UHJvdmlkZXJzKHByb3ZpZGVycyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQ2FjaGVNYW5hZ2VyKCk6IFJldXNlVGFiRmVhdHVyZTxSZXVzZVRhYkZlYXR1cmVLaW5kLkNhY2hlTWFuYWdlcj4ge1xuICByZXR1cm4gbWFrZUZlYXR1cmUoUmV1c2VUYWJGZWF0dXJlS2luZC5DYWNoZU1hbmFnZXIsIFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBSRVVTRV9UQUJfQ0FDSEVEX01BTkFHRVIsXG4gICAgICB1c2VGYWN0b3J5OiAoKSA9PiBuZXcgUmV1c2VUYWJDYWNoZWRNYW5hZ2VyRmFjdG9yeSgpXG4gICAgfVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhMb2NhbFN0b3JhZ2UoKTogUmV1c2VUYWJGZWF0dXJlPFJldXNlVGFiRmVhdHVyZUtpbmQuU3RvcmU+IHtcbiAgcmV0dXJuIG1ha2VGZWF0dXJlKFJldXNlVGFiRmVhdHVyZUtpbmQuU3RvcmUsIFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBSRVVTRV9UQUJfU1RPUkFHRV9TVEFURSxcbiAgICAgIHVzZUZhY3Rvcnk6ICgpID0+IG5ldyBSZXVzZVRhYkxvY2FsU3RvcmFnZVN0YXRlKClcbiAgICB9XG4gIF0pO1xufVxuIl19