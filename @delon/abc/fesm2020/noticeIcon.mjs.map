{"version":3,"file":"noticeIcon.mjs","sources":["../../../../packages/abc/notice-icon/notice-icon-tab.component.ts","../../../../packages/abc/notice-icon/notice-icon-tab.component.html","../../../../packages/abc/notice-icon/notice-icon.component.ts","../../../../packages/abc/notice-icon/notice-icon.component.html","../../../../packages/abc/notice-icon/notice-icon.module.ts","../../../../packages/abc/notice-icon/noticeIcon.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\nimport { LocaleData } from '@delon/theme';\n\nimport { NoticeIconSelect, NoticeItem } from './notice-icon.types';\n\n@Component({\n  selector: 'notice-icon-tab',\n  exportAs: 'noticeIconTab',\n  templateUrl: './notice-icon-tab.component.html',\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.None\n})\nexport class NoticeIconTabComponent {\n  @Input() locale: LocaleData = {};\n  @Input() data: NoticeItem;\n  @Output() readonly select = new EventEmitter<NoticeIconSelect>();\n  @Output() readonly clear = new EventEmitter<string>();\n\n  onClick(item: NoticeItem): void {\n    this.select.emit({ title: this.data.title, item });\n  }\n\n  onClear(): void {\n    this.clear.emit(this.data.title);\n  }\n}\n","<div *ngIf=\"data.list?.length === 0; else listTpl\" class=\"notice-icon__notfound\">\n  <img class=\"notice-icon__notfound-img\" *ngIf=\"data.emptyImage\" [attr.src]=\"data.emptyImage\" alt=\"not found\" />\n  <p>\n    <ng-container *nzStringTemplateOutlet=\"data.emptyText\">\n      {{ data.emptyText || locale.emptyText }}\n    </ng-container>\n  </p>\n</div>\n<ng-template #listTpl>\n  <nz-list [nzDataSource]=\"data.list\" [nzRenderItem]=\"item\">\n    <ng-template #item let-item>\n      <nz-list-item (click)=\"onClick(item)\" [ngClass]=\"{ 'notice-icon__item-read': item.read }\">\n        <nz-list-item-meta [nzTitle]=\"nzTitle\" [nzDescription]=\"nzDescription\" [nzAvatar]=\"item.avatar\">\n          <ng-template #nzTitle>\n            <ng-container *nzStringTemplateOutlet=\"item.title; context: { $implicit: item }\">{{\n              item.title\n            }}</ng-container>\n            <div class=\"notice-icon__item-extra\" *ngIf=\"item.extra\">\n              <nz-tag [nzColor]=\"item.color\">{{ item.extra }}</nz-tag>\n            </div>\n          </ng-template>\n          <ng-template #nzDescription>\n            <div *ngIf=\"item.description\" class=\"notice-icon__item-desc\">\n              <ng-container *nzStringTemplateOutlet=\"item.description; context: { $implicit: item }\">{{\n                item.description\n              }}</ng-container>\n            </div>\n            <div *ngIf=\"item.datetime\" class=\"notice-icon__item-time\">{{ item.datetime }}</div>\n          </ng-template>\n        </nz-list-item-meta>\n      </nz-list-item>\n    </ng-template>\n  </nz-list>\n  <div class=\"notice-icon__clear\" (click)=\"onClear()\">{{ data.clearText || locale.clearText }}</div>\n</ng-template>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DelonLocaleService, LocaleData } from '@delon/theme';\nimport { BooleanInput, InputBoolean, InputNumber, NumberInput } from '@delon/util/decorator';\nimport type { NgClassType } from 'ng-zorro-antd/core/types';\n\nimport { NoticeIconSelect, NoticeItem } from './notice-icon.types';\n\n@Component({\n  selector: 'notice-icon',\n  exportAs: 'noticeIcon',\n  templateUrl: './notice-icon.component.html',\n  host: { '[class.notice-icon__btn]': 'true' },\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class NoticeIconComponent implements OnInit, OnChanges, OnDestroy {\n  static ngAcceptInputType_count: NumberInput;\n  static ngAcceptInputType_loading: BooleanInput;\n  static ngAcceptInputType_popoverVisible: BooleanInput;\n\n  private i18n$: Subscription;\n  locale: LocaleData = {};\n\n  @Input() data: NoticeItem[] = [];\n  @Input() @InputNumber() count: number;\n  @Input() @InputBoolean() loading = false;\n  @Input() @InputBoolean() popoverVisible = false;\n  @Input() btnClass?: NgClassType;\n  @Input() btnIconClass?: NgClassType;\n  @Output() readonly select = new EventEmitter<NoticeIconSelect>();\n  @Output() readonly clear = new EventEmitter<string>();\n  @Output() readonly popoverVisibleChange = new EventEmitter<boolean>();\n\n  constructor(private i18n: DelonLocaleService, private cdr: ChangeDetectorRef) {}\n\n  onVisibleChange(result: boolean): void {\n    this.popoverVisibleChange.emit(result);\n  }\n\n  onSelect(i: NoticeIconSelect): void {\n    this.select.emit(i);\n  }\n\n  onClear(title: string): void {\n    this.clear.emit(title);\n  }\n\n  ngOnInit(): void {\n    this.i18n$ = this.i18n.change.subscribe(() => {\n      this.locale = this.i18n.getData('noticeIcon');\n      this.cdr.markForCheck();\n    });\n  }\n\n  ngOnChanges(): void {\n    this.cdr.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this.i18n$.unsubscribe();\n  }\n}\n","<ng-template #badgeTpl>\n  <nz-badge [nzCount]=\"count\" [ngClass]=\"btnClass!\" [nzStyle]=\"{ 'box-shadow': 'none' }\">\n    <i nz-icon nzType=\"bell\" [ngClass]=\"btnIconClass!\"></i>\n  </nz-badge>\n</ng-template>\n<div *ngIf=\"data!.length === 0\">\n  <ng-template [ngTemplateOutlet]=\"badgeTpl\"></ng-template>\n</div>\n<div\n  *ngIf=\"data!.length > 0\"\n  nz-dropdown\n  [nzVisible]=\"popoverVisible\"\n  (nzVisibleChange)=\"onVisibleChange($event)\"\n  nzTrigger=\"click\"\n  nzPlacement=\"bottomRight\"\n  nzOverlayClassName=\"header-dropdown notice-icon\"\n  [nzDropdownMenu]=\"noticeMenu\"\n>\n  <ng-template [ngTemplateOutlet]=\"badgeTpl\"></ng-template>\n</div>\n<nz-dropdown-menu #noticeMenu=\"nzDropdownMenu\">\n  <nz-spin [nzSpinning]=\"loading\" [nzDelay]=\"0\">\n    <nz-tabset nzSelectedIndex=\"0\">\n      <nz-tab *ngFor=\"let i of data\" [nzTitle]=\"i.title\">\n        <notice-icon-tab\n          [locale]=\"locale\"\n          [data]=\"i\"\n          (select)=\"onSelect($event)\"\n          (clear)=\"onClear($event)\"\n        ></notice-icon-tab>\n      </nz-tab>\n    </nz-tabset>\n  </nz-spin>\n</nz-dropdown-menu>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { DelonLocaleModule } from '@delon/theme';\nimport { NzBadgeModule } from 'ng-zorro-antd/badge';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzListModule } from 'ng-zorro-antd/list';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\nimport { NzTabsModule } from 'ng-zorro-antd/tabs';\nimport { NzTagModule } from 'ng-zorro-antd/tag';\n\nimport { NoticeIconTabComponent } from './notice-icon-tab.component';\nimport { NoticeIconComponent } from './notice-icon.component';\n\nconst COMPONENTS = [NoticeIconComponent];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DelonLocaleModule,\n    NzBadgeModule,\n    NzDropDownModule,\n    NzIconModule,\n    NzListModule,\n    NzSpinModule,\n    NzTabsModule,\n    NzTagModule,\n    NzOutletModule\n  ],\n  declarations: [...COMPONENTS, NoticeIconTabComponent],\n  exports: COMPONENTS\n})\nexport class NoticeIconModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}