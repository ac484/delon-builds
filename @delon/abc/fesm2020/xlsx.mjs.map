{"version":3,"file":"xlsx.mjs","sources":["../../../../packages/abc/xlsx/xlsx.service.ts","../../../../packages/abc/xlsx/xlsx.directive.ts","../../../../packages/abc/xlsx/xlsx.module.ts","../../../../packages/abc/xlsx/xlsx.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\n\nimport isUtf8 from 'isutf8';\n\nimport { AlainConfigService, AlainXlsxConfig } from '@delon/util/config';\nimport { ZoneOutside } from '@delon/util/decorator';\nimport { LazyResult, LazyService } from '@delon/util/other';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nimport { XlsxExportOptions, XlsxExportResult, XlsxExportSheet } from './xlsx.types';\n\ndeclare var XLSX: NzSafeAny;\ndeclare var cptable: NzSafeAny;\n\n@Injectable({ providedIn: 'root' })\nexport class XlsxService {\n  constructor(\n    private http: HttpClient,\n    private lazy: LazyService,\n    configSrv: AlainConfigService,\n    private ngZone: NgZone\n  ) {\n    this.cog = configSrv.merge('xlsx', {\n      url: 'https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js',\n      modules: [`https://cdn.jsdelivr.net/npm/xlsx/dist/cpexcel.js`]\n    })!;\n  }\n  private cog: AlainXlsxConfig;\n\n  private init(): Promise<LazyResult[]> {\n    return typeof XLSX !== 'undefined'\n      ? Promise.resolve([])\n      : this.lazy.load([this.cog.url!].concat(this.cog.modules!));\n  }\n\n  @ZoneOutside()\n  private read(data: NzSafeAny): { [key: string]: NzSafeAny[][] } {\n    const {\n      read,\n      utils: { sheet_to_json }\n    } = XLSX;\n    const ret: NzSafeAny = {};\n    const buf = new Uint8Array(data);\n    let type = 'array';\n    if (!isUtf8(buf)) {\n      try {\n        data = cptable.utils.decode(936, buf);\n        type = 'string';\n      } catch {}\n    }\n    const wb = read(data, { type });\n    wb.SheetNames.forEach((name: string) => {\n      const sheet: NzSafeAny = wb.Sheets[name];\n      ret[name] = sheet_to_json(sheet, { header: 1 });\n    });\n    return ret;\n  }\n\n  /**\n   * 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式\n   */\n  import(fileOrUrl: File | string): Promise<{ [key: string]: NzSafeAny[][] }> {\n    return new Promise<{ [key: string]: NzSafeAny[][] }>((resolve, reject) => {\n      const r = (data: NzSafeAny): void => this.ngZone.run(() => resolve(this.read(data)));\n      this.init()\n        .then(() => {\n          // from url\n          if (typeof fileOrUrl === 'string') {\n            this.http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe({\n              next: (res: ArrayBuffer) => r(new Uint8Array(res)),\n              error: (err: NzSafeAny) => reject(err)\n            });\n            return;\n          }\n          // from file\n          const reader: FileReader = new FileReader();\n          reader.onload = (e: NzSafeAny) => r(e.target.result);\n          reader.onerror = (e: NzSafeAny) => reject(e);\n          reader.readAsArrayBuffer(fileOrUrl);\n        })\n        .catch(() => reject(`Unable to load xlsx.js`));\n    });\n  }\n\n  @ZoneOutside()\n  async export(options: XlsxExportOptions): Promise<XlsxExportResult> {\n    return new Promise<XlsxExportResult>((resolve, reject) => {\n      this.init()\n        .then(() => {\n          options = { format: 'xlsx', ...options };\n          const {\n            writeFile,\n            utils: { book_new, aoa_to_sheet, book_append_sheet }\n          } = XLSX;\n          const wb: NzSafeAny = book_new();\n          if (Array.isArray(options.sheets)) {\n            (options.sheets as XlsxExportSheet[]).forEach((value: XlsxExportSheet, index: number) => {\n              const ws: NzSafeAny = aoa_to_sheet(value.data);\n              book_append_sheet(wb, ws, value.name || `Sheet${index + 1}`);\n            });\n          } else {\n            wb.SheetNames = Object.keys(options.sheets);\n            wb.Sheets = options.sheets;\n          }\n\n          if (options.callback) options.callback(wb);\n\n          const filename = options.filename || `export.${options.format}`;\n          writeFile(wb, filename, {\n            bookType: options.format,\n            bookSST: false,\n            type: 'array',\n            ...options.opts\n          });\n\n          resolve({ filename, wb });\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  /**\n   * 数据转符号名\n   * - `1` => `A`\n   * - `27` => `AA`\n   * - `703` => `AAA`\n   */\n  numberToSchema(val: number): string {\n    const startCode = 'A'.charCodeAt(0);\n    let res = '';\n\n    do {\n      --val;\n      res = String.fromCharCode(startCode + (val % 26)) + res;\n      val = (val / 26) >> 0;\n    } while (val > 0);\n\n    return res;\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { XlsxService } from './xlsx.service';\nimport { XlsxExportOptions } from './xlsx.types';\n\n@Directive({\n  selector: '[xlsx]',\n  exportAs: 'xlsx',\n  host: {\n    '(click)': '_click()'\n  }\n})\nexport class XlsxDirective {\n  @Input('xlsx') data!: XlsxExportOptions;\n\n  constructor(private srv: XlsxService) {}\n\n  _click(): void {\n    this.srv.export(this.data);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { XlsxDirective } from './xlsx.directive';\n\nconst COMPONENTS = [XlsxDirective];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: COMPONENTS,\n  exports: COMPONENTS\n})\nexport class XlsxModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;;;;MAgBa,WAAW;IACtB,YACU,IAAgB,EAChB,IAAiB,EACzB,SAA6B,EACrB,MAAc;QAHd,SAAI,GAAJ,IAAI,CAAY;QAChB,SAAI,GAAJ,IAAI,CAAa;QAEjB,WAAM,GAAN,MAAM,CAAQ;QAEtB,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE;YACjC,GAAG,EAAE,yDAAyD;YAC9D,OAAO,EAAE,CAAC,mDAAmD,CAAC;SAC/D,CAAE,CAAC;KACL;IAGO,IAAI;QACV,OAAO,OAAO,IAAI,KAAK,WAAW;cAC9B,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;cACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAQ,CAAC,CAAC,CAAC;KAC/D;IAGO,IAAI,CAAC,IAAe;QAC1B,MAAM,EACJ,IAAI,EACJ,KAAK,EAAE,EAAE,aAAa,EAAE,EACzB,GAAG,IAAI,CAAC;QACT,MAAM,GAAG,GAAc,EAAE,CAAC;QAC1B,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,OAAO,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAChB,IAAI;gBACF,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBACtC,IAAI,GAAG,QAAQ,CAAC;aACjB;YAAC,MAAM,GAAE;SACX;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAChC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAY;YACjC,MAAM,KAAK,GAAc,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzC,GAAG,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;SACjD,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACZ;;;;IAKD,MAAM,CAAC,SAAwB;QAC7B,OAAO,IAAI,OAAO,CAAmC,CAAC,OAAO,EAAE,MAAM;YACnE,MAAM,CAAC,GAAG,CAAC,IAAe,KAAW,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrF,IAAI,CAAC,IAAI,EAAE;iBACR,IAAI,CAAC;;gBAEJ,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;oBACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC,SAAS,CAAC;wBAC7E,IAAI,EAAE,CAAC,GAAgB,KAAK,CAAC,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;wBAClD,KAAK,EAAE,CAAC,GAAc,KAAK,MAAM,CAAC,GAAG,CAAC;qBACvC,CAAC,CAAC;oBACH,OAAO;iBACR;;gBAED,MAAM,MAAM,GAAe,IAAI,UAAU,EAAE,CAAC;gBAC5C,MAAM,CAAC,MAAM,GAAG,CAAC,CAAY,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACrD,MAAM,CAAC,OAAO,GAAG,CAAC,CAAY,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;aACrC,CAAC;iBACD,KAAK,CAAC,MAAM,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC;SAClD,CAAC,CAAC;KACJ;IAGD,MAAM,MAAM,CAAC,OAA0B;QACrC,OAAO,IAAI,OAAO,CAAmB,CAAC,OAAO,EAAE,MAAM;YACnD,IAAI,CAAC,IAAI,EAAE;iBACR,IAAI,CAAC;gBACJ,OAAO,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,EAAE,CAAC;gBACzC,MAAM,EACJ,SAAS,EACT,KAAK,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,iBAAiB,EAAE,EACrD,GAAG,IAAI,CAAC;gBACT,MAAM,EAAE,GAAc,QAAQ,EAAE,CAAC;gBACjC,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBAChC,OAAO,CAAC,MAA4B,CAAC,OAAO,CAAC,CAAC,KAAsB,EAAE,KAAa;wBAClF,MAAM,EAAE,GAAc,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBAC/C,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,IAAI,IAAI,QAAQ,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;qBAC9D,CAAC,CAAC;iBACJ;qBAAM;oBACL,EAAE,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC5C,EAAE,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;iBAC5B;gBAED,IAAI,OAAO,CAAC,QAAQ;oBAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAE3C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,UAAU,OAAO,CAAC,MAAM,EAAE,CAAC;gBAChE,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE;oBACtB,QAAQ,EAAE,OAAO,CAAC,MAAM;oBACxB,OAAO,EAAE,KAAK;oBACd,IAAI,EAAE,OAAO;oBACb,GAAG,OAAO,CAAC,IAAI;iBAChB,CAAC,CAAC;gBAEH,OAAO,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;aAC3B,CAAC;iBACD,KAAK,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SAC9B,CAAC,CAAC;KACJ;;;;;;;IAQD,cAAc,CAAC,GAAW;QACxB,MAAM,SAAS,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,GAAG,GAAG,EAAE,CAAC;QAEb,GAAG;YACD,EAAE,GAAG,CAAC;YACN,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;YACxD,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;SACvB,QAAQ,GAAG,GAAG,CAAC,EAAE;QAElB,OAAO,GAAG,CAAC;KACZ;;wGA3HU,WAAW;4GAAX,WAAW,cADE,MAAM;AAsB9B;IADC,WAAW,EAAE;uCAqBb;AA6BD;IADC,WAAW,EAAE;yCAmCb;2FAxGU,WAAW;kBADvB,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;iLAsBxB,IAAI,MAiDN,MAAM;;MC1ED,aAAa;IAGxB,YAAoB,GAAgB;QAAhB,QAAG,GAAH,GAAG,CAAa;KAAI;IAExC,MAAM;QACJ,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC5B;;0GAPU,aAAa;8FAAb,aAAa;2FAAb,aAAa;kBAPzB,SAAS;mBAAC;oBACT,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE,MAAM;oBAChB,IAAI,EAAE;wBACJ,SAAS,EAAE,UAAU;qBACtB;iBACF;+FAEgB,IAAI;sBAAlB,KAAK;uBAAC,MAAM;;;ACRf,MAAM,UAAU,GAAG,CAAC,aAAa,CAAC,CAAC;MAOtB,UAAU;;uGAAV,UAAU;wGAAV,UAAU,iBAPH,aAAa,aAGrB,YAAY,aAHJ,aAAa;wGAOpB,UAAU,YAJZ,CAAC,YAAY,CAAC;2FAIZ,UAAU;kBALtB,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,YAAY,EAAE,UAAU;oBACxB,OAAO,EAAE,UAAU;iBACpB;;;ACXD;;;;;;"}