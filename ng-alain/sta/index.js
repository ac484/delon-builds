"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_SPEC = void 0;
const color_1 = require("@angular/cli/utilities/color");
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const fs_1 = require("fs");
const path_1 = require("path");
const swagger_typescript_api_1 = require("swagger-typescript-api");
const json_1 = require("../utils/json");
const workspace_1 = require("../utils/workspace");
let project;
const filePrefix = `/* eslint-disable */
/*
 * Automatically generated by 'ng g ng-alain:sta'
 * @see https://ng-alain.com/cli/sta
 *
 * Inspired by: https://github.com/acacode/swagger-typescript-api
 */

`;
exports.DEFAULT_SPEC = {
    openapi: '3.0.1',
    info: {
        title: 'Title',
        version: '1.0.0'
    },
    tags: [
        {
            name: 'user'
        }
    ],
    paths: {
        '/user': {
            get: {
                summary: 'Info',
                tags: ['user'],
                responses: {
                    '200': {
                        description: 'Success',
                        content: {
                            'application/json': {
                                schema: {
                                    type: 'object',
                                    properties: {}
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
function addPathInTsConfig(name) {
    return (tree) => {
        const json = json_1.readJSON(tree, 'tsconfig.json', 'compilerOptions');
        if (json == null)
            return tree;
        if (!json.compilerOptions)
            json.compilerOptions = {};
        if (!json.compilerOptions.paths)
            json.compilerOptions.paths = {};
        const paths = json.compilerOptions.paths;
        paths[`@${name}`] = [`src/app/${name}/index`];
        paths[`@${name}/*`] = [`src/app/${name}/*`];
        json_1.writeJSON(tree, 'tsconfig.json', json);
        return tree;
    };
}
function cleanOutput(p) {
    try {
        fs_1.rmdirSync(p, { recursive: true });
        fs_1.mkdirSync(p);
    }
    catch (e) { }
}
function fix(output, res, tree, context) {
    const indexList = [`models`, `base.service`];
    const basePath = core_1.normalize(path_1.join(project.root, output.replace(process.cwd(), '')));
    try {
        // definitions
        const dataTpl = res.getTemplate({ name: 'dataContracts', fileName: 'data-contracts.eta' });
        const dataContent = res.renderTemplate(dataTpl, Object.assign({}, res.configuration));
        tree.create(`${basePath}/models.ts`, filePrefix + res.formatTSContent(dataContent));
        // Base Service
        const baseServiceTpl = res.getTemplate({ name: 'baseService', fileName: 'base.service.eta' });
        const baseServiceContent = res.renderTemplate(baseServiceTpl, Object.assign({}, res.configuration));
        tree.create(`${basePath}/base.service.ts`, filePrefix + res.formatTSContent(baseServiceContent));
        // Tag Service
        const serviceTpl = res.getTemplate({ name: 'service', fileName: 'service.eta' });
        res.configuration.routes.combined.forEach(route => {
            const moduleContent = res.renderTemplate(serviceTpl, Object.assign(Object.assign({}, res.configuration), { route }));
            tree.create(`${basePath}/${route.moduleName}.service.ts`, filePrefix + res.formatTSContent(moduleContent));
            indexList.push(`${route.moduleName}.service`);
        });
        // Index
        tree.create(`${basePath}/index.ts`, filePrefix + indexList.map(name => `export * from './${name}';`).join('\n'));
    }
    catch (ex) {
        throw new schematics_1.SchematicsException(`Parse error: ${ex}`);
    }
}
function genProxy(config) {
    return (tree, context) => {
        var _a, _b;
        context.logger.info(color_1.colors.blue(`- Name: ${config.name}`));
        const output = (config.output = path_1.resolve(process.cwd(), (_a = config.output) !== null && _a !== void 0 ? _a : `./src/app/${config.name}`));
        const templates = (_b = config.templates) !== null && _b !== void 0 ? _b : path_1.resolve(__dirname, './templates');
        let dataType = 'spec';
        if (config.url) {
            dataType = 'url';
            context.logger.info(color_1.colors.blue(`- Using url data: ${config.url}`));
        }
        else if (config.filePath) {
            dataType = 'filePath';
            context.logger.info(color_1.colors.blue(`- Using file data: ${config.filePath}`));
        }
        else {
            context.logger.info(color_1.colors.blue(`- Using spec data`));
        }
        context.logger.info(color_1.colors.blue(`- Output: ${output}`));
        return new Promise(resolve => {
            context.logger.info(color_1.colors.blue(`Start generating...`));
            swagger_typescript_api_1.generateApi({
                name: `${config.name}.ts`,
                spec: dataType !== 'spec' ? null : exports.DEFAULT_SPEC,
                url: config.url,
                input: config.filePath,
                output,
                templates,
                toJS: false,
                modular: true,
                cleanOutput: true,
                generateUnionEnums: true,
                generateClient: true,
                extractRequestParams: true,
                generateResponses: true,
                generateRouteTypes: true,
                generateApi: true,
                silent: true
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            })
                .then((res) => {
                cleanOutput(output);
                fix(output, res, tree, context);
                resolve();
            })
                .catch(ex => {
                throw new schematics_1.SchematicsException(`Generate error: ${ex}`);
            });
        });
    };
}
function finished() {
    return (_, context) => {
        context.logger.info(color_1.colors.green(`âœ“  Finished, refer to: https://ng-alain.com/cli/sta`));
    };
}
function default_1(options) {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        project = (yield workspace_1.getProject(tree, options.project)).project;
        const config = Object.assign({ name: 'proxy' }, options);
        return schematics_1.chain([addPathInTsConfig(config.name), genProxy(config), finished()]);
    });
}
exports.default = default_1;
//# sourceMappingURL=index.js.map