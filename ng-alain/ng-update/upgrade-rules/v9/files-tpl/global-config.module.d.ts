declare const _default: "import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { throwIfAlreadyLoaded } from '@core';\nimport { DelonMockModule } from '@delon/mock';\nimport { AlainThemeModule } from '@delon/theme';\nimport { AlainConfig, ALAIN_CONFIG } from '@delon/util';\n\n// Please refer to: https://ng-alain.com/docs/global-config\n// #region NG-ALAIN Config\n\nimport { DelonACLModule } from '@delon/acl';\n\nconst alainConfig: AlainConfig = {\n  // st: { modal: { size: 'lg' } },\n  // pageHeader: { homeI18n: 'home' },\n  // auth: { login_url: '/passport/login' },\n};\n\nconst alainModules = [AlainThemeModule.forRoot(), DelonACLModule.forRoot(), DelonMockModule.forRoot()];\nconst alainProvides = [{ provide: ALAIN_CONFIG, useValue: alainConfig }];\n\n// mock\nimport { environment } from '@env/environment';\nimport * as MOCKDATA from '../../_mock';\nif (!environment.production) {\n  alainConfig.mock = { data: MOCKDATA };\n}\n\n// #region reuse-tab\n/**\n * 若需要[路由复用](https://ng-alain.com/components/reuse-tab)需要：\n * 1、在 `shared-delon.module.ts` 导入 `ReuseTabModule` 模块\n * 2、注册 `RouteReuseStrategy`\n * 3、在 `src/app/layout/base/base.component.ts` 修改：\n *  ```diff\n *  - <router-outlet></router-outlet>\n *  + <reuse-tab #reuseTab></reuse-tab>\n *  + <router-outlet (activate)=\"reuseTab.activate($event)\"></router-outlet>\n *  ```\n */\n// import { RouteReuseStrategy } from '@angular/router';\n// import { ReuseTabService, ReuseTabStrategy } from '@delon/abc/reuse-tab';\n// alainProvides.push({\n//   provide: RouteReuseStrategy,\n//   useClass: ReuseTabStrategy,\n//   deps: [ReuseTabService],\n// } as any);\n\n// #endregion\n\n// #endregion\n\n// Please refer to: https://ng.ant.design/docs/global-config/en#how-to-use\n// #region NG-ZORRO Config\n\nimport { NzConfig, NZ_CONFIG } from 'ng-zorro-antd/core/config';\n\nconst ngZorroConfig: NzConfig = {};\n\nconst zorroProvides = [{ provide: NZ_CONFIG, useValue: ngZorroConfig }];\n\n// #endregion\n\n@NgModule({\n  imports: [...alainModules],\n})\nexport class GlobalConfigModule {\n  constructor(@Optional() @SkipSelf() parentModule: GlobalConfigModule) {\n    throwIfAlreadyLoaded(parentModule, 'GlobalConfigModule');\n  }\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: GlobalConfigModule,\n      providers: [...alainProvides, ...zorroProvides],\n    };\n  }\n}\n";
export default _default;
